
System-RTOS0302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002c660  0800ce58  0800ce58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080394b8  080394b8  00050084  2**0
                  CONTENTS
  4 .ARM          00000008  080394b8  080394b8  000494b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080394c0  080394c0  00050084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080394c0  080394c0  000494c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080394c4  080394c4  000494c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080394c8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000482c  20000084  0803954c  00050084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200048b0  0803954c  000548b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202ca  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004334  00000000  00000000  0007037e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a98  00000000  00000000  000746b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018c0  00000000  00000000  00076150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a51c  00000000  00000000  00077a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c62  00000000  00000000  00091f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b642  00000000  00000000  000a6b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001421d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007350  00000000  00000000  0014224c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce40 	.word	0x0800ce40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800ce40 	.word	0x0800ce40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2iz>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d215      	bcs.n	800063e <__aeabi_d2iz+0x36>
 8000612:	d511      	bpl.n	8000638 <__aeabi_d2iz+0x30>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d912      	bls.n	8000644 <__aeabi_d2iz+0x3c>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062e:	fa23 f002 	lsr.w	r0, r3, r2
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	4770      	bx	lr
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	4770      	bx	lr
 800063e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000642:	d105      	bne.n	8000650 <__aeabi_d2iz+0x48>
 8000644:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_Init+0x40>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_Init+0x40>)
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x40>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f904 	bl	8000b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f00a fbf4 	bl	800b174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f00a f9c6 	bl	800ad1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20004100 	.word	0x20004100

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20004100 	.word	0x20004100

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_Delay+0x40>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000

08000a20 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <HAL_GetHalVersion+0x10>)
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	01070600 	.word	0x01070600

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff4c 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb6:	f7ff ff61 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000bba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	6978      	ldr	r0, [r7, #20]
 8000bc2:	f7ff ffb1 	bl	8000b28 <NVIC_EncodePriority>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff80 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff54 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d004      	beq.n	8000c16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00c      	b.n	8000c30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2205      	movs	r2, #5
 8000c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0201 	bic.w	r2, r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e159      	b.n	8000f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 8148 	bne.w	8000f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x4a>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b12      	cmp	r3, #18
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	69b9      	ldr	r1, [r7, #24]
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0203 	and.w	r2, r3, #3
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d00b      	beq.n	8000d3e <HAL_GPIO_Init+0xe6>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d007      	beq.n	8000d3e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d32:	2b11      	cmp	r3, #17
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d130      	bne.n	8000da0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	f003 0201 	and.w	r2, r3, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a2 	beq.w	8000f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <HAL_GPIO_Init+0x2e4>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <HAL_GPIO_Init+0x2e4>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <HAL_GPIO_Init+0x2e4>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x202>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a47      	ldr	r2, [pc, #284]	; (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1fe>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <HAL_GPIO_Init+0x2f4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a45      	ldr	r2, [pc, #276]	; (8000f50 <HAL_GPIO_Init+0x2f8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1f6>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a44      	ldr	r2, [pc, #272]	; (8000f54 <HAL_GPIO_Init+0x2fc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1f2>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e008      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e004      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	f002 0203 	and.w	r2, r2, #3
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	4093      	lsls	r3, r2
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6c:	4934      	ldr	r1, [pc, #208]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e9e:	4a2e      	ldr	r2, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef2:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3301      	adds	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	f67f aea2 	bls.w	8000c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f30:	bf00      	nop
 8000f32:	3724      	adds	r7, #36	; 0x24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40013800 	.word	0x40013800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020c00 	.word	0x40020c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	619a      	str	r2, [r3, #24]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e10f      	b.n	80011c2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f009 fedc 	bl	800ad74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2224      	movs	r2, #36	; 0x24
 8000fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fd4:	f002 fee6 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8000fd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a7b      	ldr	r2, [pc, #492]	; (80011cc <HAL_I2C_Init+0x23c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d807      	bhi.n	8000ff4 <HAL_I2C_Init+0x64>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <HAL_I2C_Init+0x240>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	bf94      	ite	ls
 8000fec:	2301      	movls	r3, #1
 8000fee:	2300      	movhi	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	e006      	b.n	8001002 <HAL_I2C_Init+0x72>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4a77      	ldr	r2, [pc, #476]	; (80011d4 <HAL_I2C_Init+0x244>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	bf94      	ite	ls
 8000ffc:	2301      	movls	r3, #1
 8000ffe:	2300      	movhi	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0db      	b.n	80011c2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4a72      	ldr	r2, [pc, #456]	; (80011d8 <HAL_I2C_Init+0x248>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9b      	lsrs	r3, r3, #18
 8001014:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	430a      	orrs	r2, r1
 8001028:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a64      	ldr	r2, [pc, #400]	; (80011cc <HAL_I2C_Init+0x23c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d802      	bhi.n	8001044 <HAL_I2C_Init+0xb4>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	3301      	adds	r3, #1
 8001042:	e009      	b.n	8001058 <HAL_I2C_Init+0xc8>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	4a63      	ldr	r2, [pc, #396]	; (80011dc <HAL_I2C_Init+0x24c>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	099b      	lsrs	r3, r3, #6
 8001056:	3301      	adds	r3, #1
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	430b      	orrs	r3, r1
 800105e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800106a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4956      	ldr	r1, [pc, #344]	; (80011cc <HAL_I2C_Init+0x23c>)
 8001074:	428b      	cmp	r3, r1
 8001076:	d80d      	bhi.n	8001094 <HAL_I2C_Init+0x104>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1e59      	subs	r1, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fbb1 f3f3 	udiv	r3, r1, r3
 8001086:	3301      	adds	r3, #1
 8001088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108c:	2b04      	cmp	r3, #4
 800108e:	bf38      	it	cc
 8001090:	2304      	movcc	r3, #4
 8001092:	e04f      	b.n	8001134 <HAL_I2C_Init+0x1a4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d111      	bne.n	80010c0 <HAL_I2C_Init+0x130>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	1e58      	subs	r0, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6859      	ldr	r1, [r3, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	440b      	add	r3, r1
 80010aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ae:	3301      	adds	r3, #1
 80010b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf0c      	ite	eq
 80010b8:	2301      	moveq	r3, #1
 80010ba:	2300      	movne	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	e012      	b.n	80010e6 <HAL_I2C_Init+0x156>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1e58      	subs	r0, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	0099      	lsls	r1, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_Init+0x15e>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e022      	b.n	8001134 <HAL_I2C_Init+0x1a4>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10e      	bne.n	8001114 <HAL_I2C_Init+0x184>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1e58      	subs	r0, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6859      	ldr	r1, [r3, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	440b      	add	r3, r1
 8001104:	fbb0 f3f3 	udiv	r3, r0, r3
 8001108:	3301      	adds	r3, #1
 800110a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001112:	e00f      	b.n	8001134 <HAL_I2C_Init+0x1a4>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1e58      	subs	r0, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	0099      	lsls	r1, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	fbb0 f3f3 	udiv	r3, r0, r3
 800112a:	3301      	adds	r3, #1
 800112c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	6809      	ldr	r1, [r1, #0]
 8001138:	4313      	orrs	r3, r2
 800113a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69da      	ldr	r2, [r3, #28]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6911      	ldr	r1, [r2, #16]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68d2      	ldr	r2, [r2, #12]
 800116e:	4311      	orrs	r1, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	430b      	orrs	r3, r1
 8001176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2220      	movs	r2, #32
 80011ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	000186a0 	.word	0x000186a0
 80011d0:	001e847f 	.word	0x001e847f
 80011d4:	003d08ff 	.word	0x003d08ff
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	10624dd3 	.word	0x10624dd3

080011e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	461a      	mov	r2, r3
 80011ec:	460b      	mov	r3, r1
 80011ee:	817b      	strh	r3, [r7, #10]
 80011f0:	4613      	mov	r3, r2
 80011f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fbe6 	bl	80009c4 <HAL_GetTick>
 80011f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b20      	cmp	r3, #32
 8001204:	f040 80e0 	bne.w	80013c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2319      	movs	r3, #25
 800120e:	2201      	movs	r2, #1
 8001210:	4970      	ldr	r1, [pc, #448]	; (80013d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f001 ffeb 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800121e:	2302      	movs	r3, #2
 8001220:	e0d3      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_I2C_Master_Transmit+0x50>
 800122c:	2302      	movs	r3, #2
 800122e:	e0cc      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d007      	beq.n	8001256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2221      	movs	r2, #33	; 0x21
 800126a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2210      	movs	r2, #16
 8001272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	893a      	ldrh	r2, [r7, #8]
 8001286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4a50      	ldr	r2, [pc, #320]	; (80013d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001298:	8979      	ldrh	r1, [r7, #10]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	6a3a      	ldr	r2, [r7, #32]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f001 fe0a 	bl	8002eb8 <I2C_MasterRequestWrite>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e08d      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012c4:	e066      	b.n	8001394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	6a39      	ldr	r1, [r7, #32]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f002 f865 	bl	800339a <I2C_WaitOnTXEFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d107      	bne.n	80012ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e06b      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b04      	cmp	r3, #4
 800132e:	d11b      	bne.n	8001368 <HAL_I2C_Master_Transmit+0x188>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d017      	beq.n	8001368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001352:	b29b      	uxth	r3, r3
 8001354:	3b01      	subs	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f002 f855 	bl	800341c <I2C_WaitOnBTFFlagUntilTimeout>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	2b04      	cmp	r3, #4
 800137e:	d107      	bne.n	8001390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800138e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e01a      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	d194      	bne.n	80012c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e000      	b.n	80013ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013c8:	2302      	movs	r3, #2
  }
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	00100002 	.word	0x00100002
 80013d8:	ffff0000 	.word	0xffff0000

080013dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	461a      	mov	r2, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	817b      	strh	r3, [r7, #10]
 80013ec:	4613      	mov	r3, r2
 80013ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff fae8 	bl	80009c4 <HAL_GetTick>
 80013f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b20      	cmp	r3, #32
 8001400:	f040 820b 	bne.w	800181a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2319      	movs	r3, #25
 800140a:	2201      	movs	r2, #1
 800140c:	497c      	ldr	r1, [pc, #496]	; (8001600 <HAL_I2C_Master_Receive+0x224>)
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f001 feed 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800141a:	2302      	movs	r3, #2
 800141c:	e1fe      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_I2C_Master_Receive+0x50>
 8001428:	2302      	movs	r3, #2
 800142a:	e1f7      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b01      	cmp	r3, #1
 8001440:	d007      	beq.n	8001452 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2222      	movs	r2, #34	; 0x22
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2210      	movs	r2, #16
 800146e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	893a      	ldrh	r2, [r7, #8]
 8001482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a5c      	ldr	r2, [pc, #368]	; (8001604 <HAL_I2C_Master_Receive+0x228>)
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f001 fd82 	bl	8002fa4 <I2C_MasterRequestRead>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1b8      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d113      	bne.n	80014da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e18c      	b.n	80017f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d11b      	bne.n	800151a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e16c      	b.n	80017f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	2b02      	cmp	r3, #2
 8001520:	d11b      	bne.n	800155a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001530:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001540:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	e14c      	b.n	80017f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001568:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001580:	e138      	b.n	80017f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	2b03      	cmp	r3, #3
 8001588:	f200 80f1 	bhi.w	800176e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	2b01      	cmp	r3, #1
 8001592:	d123      	bne.n	80015dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f001 ff80 	bl	800349e <I2C_WaitOnRXNEFlagUntilTimeout>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e139      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015da:	e10b      	b.n	80017f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d14e      	bne.n	8001682 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ea:	2200      	movs	r2, #0
 80015ec:	4906      	ldr	r1, [pc, #24]	; (8001608 <HAL_I2C_Master_Receive+0x22c>)
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f001 fdfd 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e10e      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
 80015fe:	bf00      	nop
 8001600:	00100002 	.word	0x00100002
 8001604:	ffff0000 	.word	0xffff0000
 8001608:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29b      	uxth	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001680:	e0b8      	b.n	80017f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001688:	2200      	movs	r2, #0
 800168a:	4966      	ldr	r1, [pc, #408]	; (8001824 <HAL_I2C_Master_Receive+0x448>)
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f001 fdae 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0bf      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	2200      	movs	r2, #0
 80016e6:	494f      	ldr	r1, [pc, #316]	; (8001824 <HAL_I2C_Master_Receive+0x448>)
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f001 fd80 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e091      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800176c:	e042      	b.n	80017f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f001 fe93 	bl	800349e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e04c      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d118      	bne.n	80017f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f47f aec2 	bne.w	8001582 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800181a:	2302      	movs	r3, #2
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	00010004 	.word	0x00010004

08001828 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001848:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001850:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2b10      	cmp	r3, #16
 8001856:	d003      	beq.n	8001860 <HAL_I2C_EV_IRQHandler+0x38>
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b40      	cmp	r3, #64	; 0x40
 800185c:	f040 80b6 	bne.w	80019cc <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10d      	bne.n	8001896 <HAL_I2C_EV_IRQHandler+0x6e>
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001880:	d003      	beq.n	800188a <HAL_I2C_EV_IRQHandler+0x62>
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001888:	d101      	bne.n	800188e <HAL_I2C_EV_IRQHandler+0x66>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_I2C_EV_IRQHandler+0x68>
 800188e:	2300      	movs	r3, #0
 8001890:	2b01      	cmp	r3, #1
 8001892:	f000 8127 	beq.w	8001ae4 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_I2C_EV_IRQHandler+0x92>
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	0a5b      	lsrs	r3, r3, #9
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f001 fe7b 	bl	80035a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fd05 	bl	80022c2 <I2C_Master_SB>
 80018b8:	e087      	b.n	80019ca <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_I2C_EV_IRQHandler+0xb2>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	0a5b      	lsrs	r3, r3, #9
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fd7b 	bl	80023ce <I2C_Master_ADD10>
 80018d8:	e077      	b.n	80019ca <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0xd2>
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	0a5b      	lsrs	r3, r3, #9
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fd95 	bl	8002422 <I2C_Master_ADDR>
 80018f8:	e067      	b.n	80019ca <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d030      	beq.n	8001968 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001914:	f000 80e8 	beq.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	09db      	lsrs	r3, r3, #7
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00f      	beq.n	8001944 <HAL_I2C_EV_IRQHandler+0x11c>
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	0a9b      	lsrs	r3, r3, #10
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <HAL_I2C_EV_IRQHandler+0x11c>
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d103      	bne.n	8001944 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f9e6 	bl	8001d0e <I2C_MasterTransmit_TXE>
 8001942:	e042      	b.n	80019ca <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80cb 	beq.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	0a5b      	lsrs	r3, r3, #9
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80c4 	beq.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 facc 	bl	8001efe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001966:	e0bf      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001976:	f000 80b7 	beq.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00f      	beq.n	80019a6 <HAL_I2C_EV_IRQHandler+0x17e>
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	0a9b      	lsrs	r3, r3, #10
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_I2C_EV_IRQHandler+0x17e>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fb23 	bl	8001fea <I2C_MasterReceive_RXNE>
 80019a4:	e011      	b.n	80019ca <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 809a 	beq.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	0a5b      	lsrs	r3, r3, #9
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8093 	beq.w	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fb93 	bl	80020ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c8:	e08e      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
 80019ca:	e08d      	b.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	e007      	b.n	80019ee <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d012      	beq.n	8001a20 <HAL_I2C_EV_IRQHandler+0x1f8>
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	0a5b      	lsrs	r3, r3, #9
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00c      	beq.n	8001a20 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 ff51 	bl	80028c0 <I2C_Slave_ADDR>
 8001a1e:	e066      	b.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <HAL_I2C_EV_IRQHandler+0x218>
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	0a5b      	lsrs	r3, r3, #9
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 ff85 	bl	8002948 <I2C_Slave_STOPF>
 8001a3e:	e056      	b.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	2b21      	cmp	r3, #33	; 0x21
 8001a44:	d002      	beq.n	8001a4c <HAL_I2C_EV_IRQHandler+0x224>
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	2b29      	cmp	r3, #41	; 0x29
 8001a4a:	d125      	bne.n	8001a98 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	09db      	lsrs	r3, r3, #7
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00f      	beq.n	8001a78 <HAL_I2C_EV_IRQHandler+0x250>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	0a9b      	lsrs	r3, r3, #10
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <HAL_I2C_EV_IRQHandler+0x250>
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fe67 	bl	8002744 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a76:	e039      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d033      	beq.n	8001aec <HAL_I2C_EV_IRQHandler+0x2c4>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	0a5b      	lsrs	r3, r3, #9
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02d      	beq.n	8001aec <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fe94 	bl	80027be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a96:	e029      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00f      	beq.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x29c>
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x29c>
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fe9f 	bl	8002800 <I2C_SlaveReceive_RXNE>
 8001ac2:	e014      	b.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00e      	beq.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0a5b      	lsrs	r3, r3, #9
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fecd 	bl	800287c <I2C_SlaveReceive_BTF>
 8001ae2:	e004      	b.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001ae4:	bf00      	nop
 8001ae6:	e002      	b.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae8:	bf00      	nop
 8001aea:	e000      	b.n	8001aee <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aec:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00e      	beq.n	8001b3a <HAL_I2C_ER_IRQHandler+0x46>
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	0a5b      	lsrs	r3, r3, #9
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00e      	beq.n	8001b64 <HAL_I2C_ER_IRQHandler+0x70>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001b62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d041      	beq.n	8001bf4 <HAL_I2C_ER_IRQHandler+0x100>
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d03b      	beq.n	8001bf4 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b82:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b92:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b9a:	7efb      	ldrb	r3, [r7, #27]
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d112      	bne.n	8001bc6 <HAL_I2C_ER_IRQHandler+0xd2>
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_I2C_ER_IRQHandler+0xd2>
 8001ba6:	7cfb      	ldrb	r3, [r7, #19]
 8001ba8:	2b21      	cmp	r3, #33	; 0x21
 8001baa:	d008      	beq.n	8001bbe <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	2b29      	cmp	r3, #41	; 0x29
 8001bb0:	d005      	beq.n	8001bbe <HAL_I2C_ER_IRQHandler+0xca>
 8001bb2:	7cfb      	ldrb	r3, [r7, #19]
 8001bb4:	2b28      	cmp	r3, #40	; 0x28
 8001bb6:	d106      	bne.n	8001bc6 <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b21      	cmp	r3, #33	; 0x21
 8001bbc:	d103      	bne.n	8001bc6 <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fff2 	bl	8002ba8 <I2C_Slave_AF>
 8001bc4:	e016      	b.n	8001bf4 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bce:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d107      	bne.n	8001bf4 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	0adb      	lsrs	r3, r3, #11
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00e      	beq.n	8001c1e <HAL_I2C_ER_IRQHandler+0x12a>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001c1c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f001 f829 	bl	8002c88 <I2C_ITError>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d24:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d150      	bne.n	8001dd6 <I2C_MasterTransmit_TXE+0xc8>
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b21      	cmp	r3, #33	; 0x21
 8001d38:	d14d      	bne.n	8001dd6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d01d      	beq.n	8001d7c <I2C_MasterTransmit_TXE+0x6e>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d01a      	beq.n	8001d7c <I2C_MasterTransmit_TXE+0x6e>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d4c:	d016      	beq.n	8001d7c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d5c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2211      	movs	r2, #17
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff62 	bl	8001c3e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d7a:	e0bc      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d8a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b40      	cmp	r3, #64	; 0x40
 8001db4:	d107      	bne.n	8001dc6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff7d 	bl	8001cbe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc4:	e097      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff35 	bl	8001c3e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dd4:	e08f      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b21      	cmp	r3, #33	; 0x21
 8001dda:	d007      	beq.n	8001dec <I2C_MasterTransmit_TXE+0xde>
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	f040 8089 	bne.w	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b22      	cmp	r3, #34	; 0x22
 8001de8:	f040 8085 	bne.w	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e06:	e076      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	d15d      	bne.n	8001ed0 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11d      	bne.n	8001e58 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10b      	bne.n	8001e3c <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e34:	1c9a      	adds	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e3a:	e05c      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	121b      	asrs	r3, r3, #8
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e56:	e04e      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10b      	bne.n	8001e78 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e76:	e03e      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d13a      	bne.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b22      	cmp	r3, #34	; 0x22
 8001e8a:	d108      	bne.n	8001e9e <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	e02b      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b21      	cmp	r3, #33	; 0x21
 8001ea8:	d125      	bne.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ece:	e012      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ef4:	e7ff      	b.n	8001ef6 <I2C_MasterTransmit_TXE+0x1e8>
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b21      	cmp	r3, #33	; 0x21
 8001f16:	d164      	bne.n	8001fe2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d012      	beq.n	8001f48 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001f46:	e04c      	b.n	8001fe2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d01d      	beq.n	8001f8a <I2C_MasterTransmit_BTF+0x8c>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d01a      	beq.n	8001f8a <I2C_MasterTransmit_BTF+0x8c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f5a:	d016      	beq.n	8001f8a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f6a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2211      	movs	r2, #17
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fe5b 	bl	8001c3e <HAL_I2C_MasterTxCpltCallback>
}
 8001f88:	e02b      	b.n	8001fe2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f98:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d107      	bne.n	8001fd4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fe76 	bl	8001cbe <HAL_I2C_MemTxCpltCallback>
}
 8001fd2:	e006      	b.n	8001fe2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fe2e 	bl	8001c3e <HAL_I2C_MasterTxCpltCallback>
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b22      	cmp	r3, #34	; 0x22
 8001ffc:	d173      	bne.n	80020e6 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d920      	bls.n	800204e <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d154      	bne.n	80020e6 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800204c:	e04b      	b.n	80020e6 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2b02      	cmp	r3, #2
 8002054:	d047      	beq.n	80020e6 <I2C_MasterReceive_RXNE+0xfc>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d002      	beq.n	8002062 <I2C_MasterReceive_RXNE+0x78>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d141      	bne.n	80020e6 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002070:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002080:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d10a      	bne.n	80020d2 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fe01 	bl	8001cd2 <HAL_I2C_MemRxCpltCallback>
}
 80020d0:	e009      	b.n	80020e6 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2212      	movs	r2, #18
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fdb6 	bl	8001c52 <HAL_I2C_MasterRxCpltCallback>
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b04      	cmp	r3, #4
 8002104:	d11b      	bne.n	800213e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002114:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800213c:	e0bd      	b.n	80022ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d129      	bne.n	800219c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002156:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b04      	cmp	r3, #4
 800215c:	d00a      	beq.n	8002174 <I2C_MasterReceive_BTF+0x86>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d007      	beq.n	8002174 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800219a:	e08e      	b.n	80022ba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d176      	bne.n	8002294 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d002      	beq.n	80021b2 <I2C_MasterReceive_BTF+0xc4>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d108      	bne.n	80021c4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e019      	b.n	80021f8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d002      	beq.n	80021d0 <I2C_MasterReceive_BTF+0xe2>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d108      	bne.n	80021e2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e00a      	b.n	80021f8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d007      	beq.n	80021f8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002252:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d10a      	bne.n	800227e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fd2b 	bl	8001cd2 <HAL_I2C_MemRxCpltCallback>
}
 800227c:	e01d      	b.n	80022ba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2212      	movs	r2, #18
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fce0 	bl	8001c52 <HAL_I2C_MasterRxCpltCallback>
}
 8002292:	e012      	b.n	80022ba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d117      	bne.n	8002306 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80022f0:	e067      	b.n	80023c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	611a      	str	r2, [r3, #16]
}
 8002304:	e05d      	b.n	80023c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800230e:	d133      	bne.n	8002378 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b21      	cmp	r3, #33	; 0x21
 800231a:	d109      	bne.n	8002330 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800232c:	611a      	str	r2, [r3, #16]
 800232e:	e008      	b.n	8002342 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <I2C_Master_SB+0x90>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	2b00      	cmp	r3, #0
 8002350:	d037      	beq.n	80023c2 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <I2C_Master_SB+0xa4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d02d      	beq.n	80023c2 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002374:	605a      	str	r2, [r3, #4]
}
 8002376:	e024      	b.n	80023c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10e      	bne.n	800239e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	b29b      	uxth	r3, r3
 8002386:	11db      	asrs	r3, r3, #7
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 0306 	and.w	r3, r3, #6
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f063 030f 	orn	r3, r3, #15
 8002394:	b2da      	uxtb	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]
}
 800239c:	e011      	b.n	80023c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10d      	bne.n	80023c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	11db      	asrs	r3, r3, #7
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f003 0306 	and.w	r3, r3, #6
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f063 030e 	orn	r3, r3, #14
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	611a      	str	r2, [r3, #16]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <I2C_Master_ADD10+0x24>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d011      	beq.n	8002416 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d104      	bne.n	8002406 <I2C_Master_ADD10+0x38>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002414:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002422:	b480      	push	{r7}
 8002424:	b091      	sub	sp, #68	; 0x44
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002430:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b22      	cmp	r3, #34	; 0x22
 800244a:	f040 8169 	bne.w	8002720 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10f      	bne.n	8002476 <I2C_Master_ADDR+0x54>
 8002456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d10b      	bne.n	8002476 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	633b      	str	r3, [r7, #48]	; 0x30
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	e160      	b.n	8002738 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11d      	bne.n	80024ba <I2C_Master_ADDR+0x98>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002486:	d118      	bne.n	80024ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	651a      	str	r2, [r3, #80]	; 0x50
 80024b8:	e13e      	b.n	8002738 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d113      	bne.n	80024ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c4:	2300      	movs	r3, #0
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e115      	b.n	8002718 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 808a 	bne.w	800260c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024fe:	d137      	bne.n	8002570 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251e:	d113      	bne.n	8002548 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	e0e7      	b.n	8002718 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e0d3      	b.n	8002718 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	2b08      	cmp	r3, #8
 8002574:	d02e      	beq.n	80025d4 <I2C_Master_ADDR+0x1b2>
 8002576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002578:	2b20      	cmp	r3, #32
 800257a:	d02b      	beq.n	80025d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	2b12      	cmp	r3, #18
 8002580:	d102      	bne.n	8002588 <I2C_Master_ADDR+0x166>
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	2b01      	cmp	r3, #1
 8002586:	d125      	bne.n	80025d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	2b04      	cmp	r3, #4
 800258c:	d00e      	beq.n	80025ac <I2C_Master_ADDR+0x18a>
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	2b02      	cmp	r3, #2
 8002592:	d00b      	beq.n	80025ac <I2C_Master_ADDR+0x18a>
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	2b10      	cmp	r3, #16
 8002598:	d008      	beq.n	80025ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e007      	b.n	80025bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	e0a1      	b.n	8002718 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e085      	b.n	8002718 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d14d      	bne.n	80026b2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	2b04      	cmp	r3, #4
 800261a:	d016      	beq.n	800264a <I2C_Master_ADDR+0x228>
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	2b02      	cmp	r3, #2
 8002620:	d013      	beq.n	800264a <I2C_Master_ADDR+0x228>
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	2b10      	cmp	r3, #16
 8002626:	d010      	beq.n	800264a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002636:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e007      	b.n	800265a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002658:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002668:	d117      	bne.n	800269a <I2C_Master_ADDR+0x278>
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002670:	d00b      	beq.n	800268a <I2C_Master_ADDR+0x268>
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	2b01      	cmp	r3, #1
 8002676:	d008      	beq.n	800268a <I2C_Master_ADDR+0x268>
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	2b08      	cmp	r3, #8
 800267c:	d005      	beq.n	800268a <I2C_Master_ADDR+0x268>
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	2b10      	cmp	r3, #16
 8002682:	d002      	beq.n	800268a <I2C_Master_ADDR+0x268>
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	2b20      	cmp	r3, #32
 8002688:	d107      	bne.n	800269a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002698:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	e032      	b.n	8002718 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d0:	d117      	bne.n	8002702 <I2C_Master_ADDR+0x2e0>
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026d8:	d00b      	beq.n	80026f2 <I2C_Master_ADDR+0x2d0>
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d008      	beq.n	80026f2 <I2C_Master_ADDR+0x2d0>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d005      	beq.n	80026f2 <I2C_Master_ADDR+0x2d0>
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d002      	beq.n	80026f2 <I2C_Master_ADDR+0x2d0>
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d107      	bne.n	8002702 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002700:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800271e:	e00b      	b.n	8002738 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	e7ff      	b.n	8002738 <I2C_Master_ADDR+0x316>
 8002738:	bf00      	nop
 800273a:	3744      	adds	r7, #68	; 0x44
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002752:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d02b      	beq.n	80027b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d114      	bne.n	80027b6 <I2C_SlaveTransmit_TXE+0x72>
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b29      	cmp	r3, #41	; 0x29
 8002790:	d111      	bne.n	80027b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2221      	movs	r2, #33	; 0x21
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2228      	movs	r2, #40	; 0x28
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fa58 	bl	8001c66 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d011      	beq.n	80027f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d02c      	beq.n	8002874 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d114      	bne.n	8002874 <I2C_SlaveReceive_RXNE+0x74>
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b2a      	cmp	r3, #42	; 0x2a
 800284e:	d111      	bne.n	8002874 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2222      	movs	r2, #34	; 0x22
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2228      	movs	r2, #40	; 0x28
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fa03 	bl	8001c7a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028da:	2b28      	cmp	r3, #40	; 0x28
 80028dc:	d127      	bne.n	800292e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	09db      	lsrs	r3, r3, #7
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	81bb      	strh	r3, [r7, #12]
 8002910:	e002      	b.n	8002918 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002920:	89ba      	ldrh	r2, [r7, #12]
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff f9b1 	bl	8001c8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800292c:	e008      	b.n	8002940 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f06f 0202 	mvn.w	r2, #2
 8002936:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002966:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002994:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a4:	d172      	bne.n	8002a8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b22      	cmp	r3, #34	; 0x22
 80029aa:	d002      	beq.n	80029b2 <I2C_Slave_STOPF+0x6a>
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b2a      	cmp	r3, #42	; 0x2a
 80029b0:	d135      	bne.n	8002a1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f926 	bl	8000c3c <HAL_DMA_GetState>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d049      	beq.n	8002a8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	4a69      	ldr	r2, [pc, #420]	; (8002ba0 <I2C_Slave_STOPF+0x258>)
 80029fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe f8f8 	bl	8000bf8 <HAL_DMA_Abort_IT>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03d      	beq.n	8002a8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a1c:	e035      	b.n	8002a8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0204 	orr.w	r2, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe f8f0 	bl	8000c3c <HAL_DMA_GetState>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d014      	beq.n	8002a8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	4a4e      	ldr	r2, [pc, #312]	; (8002ba0 <I2C_Slave_STOPF+0x258>)
 8002a68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f8c2 	bl	8000bf8 <HAL_DMA_Abort_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
 8002a88:	e000      	b.n	8002a8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03e      	beq.n	8002b14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d112      	bne.n	8002aca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d112      	bne.n	8002afe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8b3 	bl	8002c88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b22:	e039      	b.n	8002b98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b2a      	cmp	r3, #42	; 0x2a
 8002b28:	d109      	bne.n	8002b3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2228      	movs	r2, #40	; 0x28
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff f89e 	bl	8001c7a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b28      	cmp	r3, #40	; 0x28
 8002b48:	d111      	bne.n	8002b6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <I2C_Slave_STOPF+0x25c>)
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff f89f 	bl	8001caa <HAL_I2C_ListenCpltCallback>
}
 8002b6c:	e014      	b.n	8002b98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	2b22      	cmp	r3, #34	; 0x22
 8002b74:	d002      	beq.n	8002b7c <I2C_Slave_STOPF+0x234>
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b22      	cmp	r3, #34	; 0x22
 8002b7a:	d10d      	bne.n	8002b98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff f871 	bl	8001c7a <HAL_I2C_SlaveRxCpltCallback>
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	08003111 	.word	0x08003111
 8002ba4:	ffff0000 	.word	0xffff0000

08002ba8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d002      	beq.n	8002bca <I2C_Slave_AF+0x22>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d129      	bne.n	8002c1e <I2C_Slave_AF+0x76>
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b28      	cmp	r3, #40	; 0x28
 8002bce:	d126      	bne.n	8002c1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a2c      	ldr	r2, [pc, #176]	; (8002c84 <I2C_Slave_AF+0xdc>)
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff f847 	bl	8001caa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c1c:	e02e      	b.n	8002c7c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b21      	cmp	r3, #33	; 0x21
 8002c22:	d126      	bne.n	8002c72 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <I2C_Slave_AF+0xdc>)
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2221      	movs	r2, #33	; 0x21
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c68:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe fffb 	bl	8001c66 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c70:	e004      	b.n	8002c7c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c7a:	615a      	str	r2, [r3, #20]
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	ffff0000 	.word	0xffff0000

08002c88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d10a      	bne.n	8002cba <I2C_ITError+0x32>
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b22      	cmp	r3, #34	; 0x22
 8002ca8:	d107      	bne.n	8002cba <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cc0:	2b28      	cmp	r3, #40	; 0x28
 8002cc2:	d107      	bne.n	8002cd4 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2228      	movs	r2, #40	; 0x28
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cd2:	e015      	b.n	8002d00 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce2:	d006      	beq.n	8002cf2 <I2C_ITError+0x6a>
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b60      	cmp	r3, #96	; 0x60
 8002ce8:	d003      	beq.n	8002cf2 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d0e:	d162      	bne.n	8002dd6 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d020      	beq.n	8002d70 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	4a5f      	ldr	r2, [pc, #380]	; (8002eb0 <I2C_ITError+0x228>)
 8002d34:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd ff5c 	bl	8000bf8 <HAL_DMA_Abort_IT>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8089 	beq.w	8002e5a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4798      	blx	r3
 8002d6e:	e074      	b.n	8002e5a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	4a4e      	ldr	r2, [pc, #312]	; (8002eb0 <I2C_ITError+0x228>)
 8002d76:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd ff3b 	bl	8000bf8 <HAL_DMA_Abort_IT>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d068      	beq.n	8002e5a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b40      	cmp	r3, #64	; 0x40
 8002d94:	d10b      	bne.n	8002dae <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4798      	blx	r3
 8002dd4:	e041      	b.n	8002e5a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b60      	cmp	r3, #96	; 0x60
 8002de0:	d125      	bne.n	8002e2e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d10b      	bne.n	8002e16 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe ff67 	bl	8001cfa <HAL_I2C_AbortCpltCallback>
 8002e2c:	e015      	b.n	8002e5a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d10b      	bne.n	8002e54 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe ff46 	bl	8001ce6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d11b      	bne.n	8002ea6 <I2C_ITError+0x21e>
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b28      	cmp	r3, #40	; 0x28
 8002e72:	d118      	bne.n	8002ea6 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e82:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <I2C_ITError+0x22c>)
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fe ff02 	bl	8001caa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08003111 	.word	0x08003111
 8002eb4:	ffff0000 	.word	0xffff0000

08002eb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d006      	beq.n	8002ee2 <I2C_MasterRequestWrite+0x2a>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d003      	beq.n	8002ee2 <I2C_MasterRequestWrite+0x2a>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee0:	d108      	bne.n	8002ef4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e00b      	b.n	8002f0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	2b12      	cmp	r3, #18
 8002efa:	d107      	bne.n	8002f0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f968 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e035      	b.n	8002f94 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f30:	d108      	bne.n	8002f44 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f40:	611a      	str	r2, [r3, #16]
 8002f42:	e01b      	b.n	8002f7c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f44:	897b      	ldrh	r3, [r7, #10]
 8002f46:	11db      	asrs	r3, r3, #7
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f003 0306 	and.w	r3, r3, #6
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f063 030f 	orn	r3, r3, #15
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	490e      	ldr	r1, [pc, #56]	; (8002f9c <I2C_MasterRequestWrite+0xe4>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f99a 	bl	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e010      	b.n	8002f94 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <I2C_MasterRequestWrite+0xe8>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f98a 	bl	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	00010008 	.word	0x00010008
 8002fa0:	00010002 	.word	0x00010002

08002fa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d006      	beq.n	8002fde <I2C_MasterRequestRead+0x3a>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d003      	beq.n	8002fde <I2C_MasterRequestRead+0x3a>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fdc:	d108      	bne.n	8002ff0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e00b      	b.n	8003008 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	2b11      	cmp	r3, #17
 8002ff6:	d107      	bne.n	8003008 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f8ea 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e06d      	b.n	8003100 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302c:	d108      	bne.n	8003040 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]
 800303e:	e053      	b.n	80030e8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	11db      	asrs	r3, r3, #7
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0306 	and.w	r3, r3, #6
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f063 030f 	orn	r3, r3, #15
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	492a      	ldr	r1, [pc, #168]	; (8003108 <I2C_MasterRequestRead+0x164>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f91c 	bl	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e048      	b.n	8003100 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4923      	ldr	r1, [pc, #140]	; (800310c <I2C_MasterRequestRead+0x168>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f90c 	bl	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e038      	b.n	8003100 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f894 	bl	80031ee <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e017      	b.n	8003100 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030d0:	897b      	ldrh	r3, [r7, #10]
 80030d2:	11db      	asrs	r3, r3, #7
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 0306 	and.w	r3, r3, #6
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f063 030e 	orn	r3, r3, #14
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <I2C_MasterRequestRead+0x168>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f8d4 	bl	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	00010008 	.word	0x00010008
 800310c:	00010002 	.word	0x00010002

08003110 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	2200      	movs	r2, #0
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	2200      	movs	r2, #0
 8003134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003144:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	2200      	movs	r2, #0
 8003152:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	2200      	movs	r2, #0
 800315a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b60      	cmp	r3, #96	; 0x60
 8003176:	d10e      	bne.n	8003196 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7fe fdb3 	bl	8001cfa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003194:	e027      	b.n	80031e6 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003196:	7afb      	ldrb	r3, [r7, #11]
 8003198:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800319c:	2b28      	cmp	r3, #40	; 0x28
 800319e:	d117      	bne.n	80031d0 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2228      	movs	r2, #40	; 0x28
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031ce:	e007      	b.n	80031e0 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7fe fd80 	bl	8001ce6 <HAL_I2C_ErrorCallback>
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fe:	e025      	b.n	800324c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d021      	beq.n	800324c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003208:	f7fd fbdc 	bl	80009c4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e023      	b.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10d      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	e00c      	b.n	800328c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	43da      	mvns	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	429a      	cmp	r2, r3
 8003290:	d0b6      	beq.n	8003200 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032aa:	e051      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	d123      	bne.n	8003304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e046      	b.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d021      	beq.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330c:	f7fd fb5a 	bl	80009c4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d302      	bcc.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d116      	bne.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e020      	b.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0c1b      	lsrs	r3, r3, #16
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d10c      	bne.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	43da      	mvns	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4013      	ands	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e00b      	b.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d18d      	bne.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a6:	e02d      	b.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f8ce 	bl	800354a <I2C_IsAcknowledgeFailed>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e02d      	b.n	8003414 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d021      	beq.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7fd fb00 	bl	80009c4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d1ca      	bne.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003428:	e02d      	b.n	8003486 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f88d 	bl	800354a <I2C_IsAcknowledgeFailed>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e02d      	b.n	8003496 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d021      	beq.n	8003486 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fd fabf 	bl	80009c4 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d116      	bne.n	8003486 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e007      	b.n	8003496 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d1ca      	bne.n	800342a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034aa:	e042      	b.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d119      	bne.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0210 	mvn.w	r2, #16
 80034c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e029      	b.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7fd fa69 	bl	80009c4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d116      	bne.n	8003532 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e007      	b.n	8003542 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d1b5      	bne.n	80034ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d11b      	bne.n	800359a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035b8:	d103      	bne.n	80035c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80035c0:	e007      	b.n	80035d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035ca:	d102      	bne.n	80035d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2208      	movs	r2, #8
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e22d      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035fe:	4ba3      	ldr	r3, [pc, #652]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00c      	beq.n	8003624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4ba0      	ldr	r3, [pc, #640]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d112      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003616:	4b9d      	ldr	r3, [pc, #628]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003622:	d10b      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	4b99      	ldr	r3, [pc, #612]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d157      	bne.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e208      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x74>
 8003646:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e01d      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x98>
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a8a      	ldr	r2, [pc, #552]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a87      	ldr	r2, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003678:	4b84      	ldr	r3, [pc, #528]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a80      	ldr	r2, [pc, #512]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd f994 	bl	80009c4 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fd f990 	bl	80009c4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1cd      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd f980 	bl	80009c4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fd f97c 	bl	80009c4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1b9      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d063      	beq.n	80037be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11c      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d116      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e18d      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b56      	ldr	r3, [pc, #344]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4952      	ldr	r1, [pc, #328]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	e03a      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003750:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fd f935 	bl	80009c4 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375e:	f7fd f931 	bl	80009c4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e16e      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4940      	ldr	r1, [pc, #256]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd f914 	bl	80009c4 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fd f910 	bl	80009c4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e14d      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d030      	beq.n	800382c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd f8f4 	bl	80009c4 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd f8f0 	bl	80009c4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e12d      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x200>
 80037fe:	e015      	b.n	800382c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fd f8dd 	bl	80009c4 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fd f8d9 	bl	80009c4 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e116      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a0 	beq.w	800397a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fd f89f 	bl	80009c4 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e011      	b.n	80038ae <HAL_RCC_OscConfig+0x2ce>
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
 8003898:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fd f892 	bl	80009c4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0cf      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	4b6a      	ldr	r3, [pc, #424]	; (8003a58 <HAL_RCC_OscConfig+0x478>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
 80038c2:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	e01c      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCC_OscConfig+0x312>
 80038d8:	4b60      	ldr	r3, [pc, #384]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a5f      	ldr	r2, [pc, #380]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a5c      	ldr	r2, [pc, #368]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	e00b      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038f2:	4b5a      	ldr	r3, [pc, #360]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a59      	ldr	r2, [pc, #356]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fd f857 	bl	80009c4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fd f853 	bl	80009c4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e08e      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ee      	beq.n	800391a <HAL_RCC_OscConfig+0x33a>
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fd f841 	bl	80009c4 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd f83d 	bl	80009c4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e078      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ee      	bne.n	8003946 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d064      	beq.n	8003a4c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003982:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	d05c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d141      	bne.n	8003a1a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003996:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <HAL_RCC_OscConfig+0x480>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fd f812 	bl	80009c4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd f80e 	bl	80009c4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e04b      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	3b01      	subs	r3, #1
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	491d      	ldr	r1, [pc, #116]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <HAL_RCC_OscConfig+0x480>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fc ffe7 	bl	80009c4 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fc ffe3 	bl	80009c4 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e020      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x41a>
 8003a18:	e018      	b.n	8003a4c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_RCC_OscConfig+0x480>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fc ffd0 	bl	80009c4 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fc ffcc 	bl	80009c4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_RCC_OscConfig+0x47c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x448>
 8003a46:	e001      	b.n	8003a4c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	42470060 	.word	0x42470060

08003a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0ca      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b67      	ldr	r3, [pc, #412]	; (8003c18 <HAL_RCC_ClockConfig+0x1b4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d90c      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_RCC_ClockConfig+0x1b4>)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b62      	ldr	r3, [pc, #392]	; (8003c18 <HAL_RCC_ClockConfig+0x1b4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b6      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab8:	4b58      	ldr	r3, [pc, #352]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a57      	ldr	r2, [pc, #348]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad0:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a51      	ldr	r2, [pc, #324]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	494c      	ldr	r1, [pc, #304]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d044      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d119      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07d      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06d      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e065      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4933      	ldr	r1, [pc, #204]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7fc ff36 	bl	80009c4 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5c:	f7fc ff32 	bl	80009c4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e04d      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 020c 	and.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1eb      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCC_ClockConfig+0x1b4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d20c      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCC_ClockConfig+0x1b4>)
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <HAL_RCC_ClockConfig+0x1b4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e030      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4915      	ldr	r1, [pc, #84]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	490d      	ldr	r1, [pc, #52]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bea:	f000 f81d 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003bee:	4601      	mov	r1, r0
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	5cd3      	ldrb	r3, [r2, r3]
 8003bfe:	fa21 f303 	lsr.w	r3, r1, r3
 8003c02:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c06:	2000      	movs	r0, #0
 8003c08:	f007 fab4 	bl	800b174 <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	08032918 	.word	0x08032918
 8003c24:	2000001c 	.word	0x2000001c

08003c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	2300      	movs	r3, #0
 8003c38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d007      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x32>
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x38>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 808d 	bne.w	8003d6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b4b      	ldr	r3, [pc, #300]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c56:	60bb      	str	r3, [r7, #8]
       break;
 8003c58:	e08c      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5a:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c5c:	60bb      	str	r3, [r7, #8]
      break;
 8003c5e:	e089      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c60:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6a:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d023      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	f04f 0400 	mov.w	r4, #0
 8003c80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	ea03 0501 	and.w	r5, r3, r1
 8003c8c:	ea04 0602 	and.w	r6, r4, r2
 8003c90:	4a3d      	ldr	r2, [pc, #244]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c92:	fb02 f106 	mul.w	r1, r2, r6
 8003c96:	2200      	movs	r2, #0
 8003c98:	fb02 f205 	mul.w	r2, r2, r5
 8003c9c:	440a      	add	r2, r1
 8003c9e:	493a      	ldr	r1, [pc, #232]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ca0:	fba5 0101 	umull	r0, r1, r5, r1
 8003ca4:	1853      	adds	r3, r2, r1
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f04f 0400 	mov.w	r4, #0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	f7fc fcd1 	bl	8000658 <__aeabi_uldivmod>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e049      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	f04f 0400 	mov.w	r4, #0
 8003cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	ea03 0501 	and.w	r5, r3, r1
 8003cd4:	ea04 0602 	and.w	r6, r4, r2
 8003cd8:	4629      	mov	r1, r5
 8003cda:	4632      	mov	r2, r6
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	0154      	lsls	r4, r2, #5
 8003ce6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cea:	014b      	lsls	r3, r1, #5
 8003cec:	4619      	mov	r1, r3
 8003cee:	4622      	mov	r2, r4
 8003cf0:	1b49      	subs	r1, r1, r5
 8003cf2:	eb62 0206 	sbc.w	r2, r2, r6
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	f04f 0400 	mov.w	r4, #0
 8003cfe:	0194      	lsls	r4, r2, #6
 8003d00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d04:	018b      	lsls	r3, r1, #6
 8003d06:	1a5b      	subs	r3, r3, r1
 8003d08:	eb64 0402 	sbc.w	r4, r4, r2
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	00e2      	lsls	r2, r4, #3
 8003d16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d1a:	00d9      	lsls	r1, r3, #3
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4614      	mov	r4, r2
 8003d20:	195b      	adds	r3, r3, r5
 8003d22:	eb44 0406 	adc.w	r4, r4, r6
 8003d26:	f04f 0100 	mov.w	r1, #0
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	02a2      	lsls	r2, r4, #10
 8003d30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d34:	0299      	lsls	r1, r3, #10
 8003d36:	460b      	mov	r3, r1
 8003d38:	4614      	mov	r4, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f04f 0400 	mov.w	r4, #0
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	f7fc fc86 	bl	8000658 <__aeabi_uldivmod>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	60bb      	str	r3, [r7, #8]
      break;
 8003d6c:	e002      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d70:	60bb      	str	r3, [r7, #8]
      break;
 8003d72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d74:	68bb      	ldr	r3, [r7, #8]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	017d7840 	.word	0x017d7840

08003d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	2000001c 	.word	0x2000001c

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4601      	mov	r1, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08032928 	.word	0x08032928

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd0:	f7ff ffdc 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0b5b      	lsrs	r3, r3, #13
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4a03      	ldr	r2, [pc, #12]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de2:	5cd3      	ldrb	r3, [r2, r3]
 8003de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	08032928 	.word	0x08032928

08003df4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	220f      	movs	r2, #15
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0203 	and.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <HAL_RCC_GetClockConfig+0x60>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 020f 	and.w	r2, r3, #15
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40023c00 	.word	0x40023c00

08003e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e056      	b.n	8003f18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f006 ffcd 	bl	800ae24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	f003 0104 	and.w	r1, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_SPI_Transmit+0x22>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e11e      	b.n	8004180 <HAL_SPI_Transmit+0x260>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f4a:	f7fc fd3b 	bl	80009c4 <HAL_GetTick>
 8003f4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f64:	e103      	b.n	800416e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_SPI_Transmit+0x52>
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f76:	e0fa      	b.n	800416e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	88fa      	ldrh	r2, [r7, #6]
 8003f96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbe:	d107      	bne.n	8003fd0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d007      	beq.n	8003fee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff6:	d14b      	bne.n	8004090 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_Transmit+0xe6>
 8004000:	8afb      	ldrh	r3, [r7, #22]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d13e      	bne.n	8004084 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	1c9a      	adds	r2, r3, #2
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800402a:	e02b      	b.n	8004084 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d112      	bne.n	8004060 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	881a      	ldrh	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	86da      	strh	r2, [r3, #54]	; 0x36
 800405e:	e011      	b.n	8004084 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004060:	f7fc fcb0 	bl	80009c4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d803      	bhi.n	8004078 <HAL_SPI_Transmit+0x158>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d102      	bne.n	800407e <HAL_SPI_Transmit+0x15e>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004082:	e074      	b.n	800416e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ce      	bne.n	800402c <HAL_SPI_Transmit+0x10c>
 800408e:	e04c      	b.n	800412a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SPI_Transmit+0x17e>
 8004098:	8afb      	ldrh	r3, [r7, #22]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d140      	bne.n	8004120 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	7812      	ldrb	r2, [r2, #0]
 80040aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040c4:	e02c      	b.n	8004120 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d113      	bne.n	80040fc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80040fa:	e011      	b.n	8004120 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fc:	f7fc fc62 	bl	80009c4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d803      	bhi.n	8004114 <HAL_SPI_Transmit+0x1f4>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d102      	bne.n	800411a <HAL_SPI_Transmit+0x1fa>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800411e:	e026      	b.n	800416e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1cd      	bne.n	80040c6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f9b2 	bl	8004498 <SPI_EndRxTxTransaction>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e000      	b.n	800416e <HAL_SPI_Transmit+0x24e>
  }

error:
 800416c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800417e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10f      	bne.n	80041cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
    return;
 80041ca:	e0d8      	b.n	800437e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_SPI_IRQHandler+0x66>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	09db      	lsrs	r3, r3, #7
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4798      	blx	r3
    return;
 80041ec:	e0c7      	b.n	800437e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_SPI_IRQHandler+0x8c>
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	099b      	lsrs	r3, r3, #6
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_SPI_IRQHandler+0x8c>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	0a1b      	lsrs	r3, r3, #8
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80b5 	beq.w	800437e <HAL_SPI_IRQHandler+0x1f6>
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80ae 	beq.w	800437e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	099b      	lsrs	r3, r3, #6
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d023      	beq.n	8004276 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b03      	cmp	r3, #3
 8004238:	d011      	beq.n	800425e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f043 0204 	orr.w	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	e00b      	b.n	8004276 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	693b      	ldr	r3, [r7, #16]
        return;
 8004274:	e083      	b.n	800437e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d014      	beq.n	80042ac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00c      	beq.n	80042d2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f043 0208 	orr.w	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d050      	beq.n	800437c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042e8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <HAL_SPI_IRQHandler+0x17e>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d034      	beq.n	8004370 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0203 	bic.w	r2, r2, #3
 8004314:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d011      	beq.n	8004342 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_SPI_IRQHandler+0x1fc>)
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fc64 	bl	8000bf8 <HAL_DMA_Abort_IT>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434e:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_SPI_IRQHandler+0x1fc>)
 8004350:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc fc4e 	bl	8000bf8 <HAL_DMA_Abort_IT>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800436e:	e003      	b.n	8004378 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f809 	bl	8004388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004376:	e000      	b.n	800437a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004378:	bf00      	nop
    return;
 800437a:	bf00      	nop
 800437c:	bf00      	nop
  }
}
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	0800439d 	.word	0x0800439d

08004388 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff ffe6 	bl	8004388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d4:	e04c      	b.n	8004470 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d048      	beq.n	8004470 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043de:	f7fc faf1 	bl	80009c4 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d902      	bls.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d13d      	bne.n	8004470 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004402:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440c:	d111      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004416:	d004      	beq.n	8004422 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d107      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004430:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443a:	d10f      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e00f      	b.n	8004490 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	429a      	cmp	r2, r3
 800448c:	d1a3      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <SPI_EndRxTxTransaction+0x7c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <SPI_EndRxTxTransaction+0x80>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0d5b      	lsrs	r3, r3, #21
 80044b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c2:	d112      	bne.n	80044ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff ff78 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e00f      	b.n	800450a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d0f2      	beq.n	80044ea <SPI_EndRxTxTransaction+0x52>
 8004504:	e000      	b.n	8004508 <SPI_EndRxTxTransaction+0x70>
        break;
 8004506:	bf00      	nop
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2000001c 	.word	0x2000001c
 8004518:	165e9f81 	.word	0x165e9f81

0800451c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e01d      	b.n	800456a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f006 fd1c 	bl	800af80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 fb38 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b06      	cmp	r3, #6
 800459a:	d007      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e01d      	b.n	8004608 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f006 fc8f 	bl	800af04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f000 fae9 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fd7a 	bl	800511c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a10      	ldr	r2, [pc, #64]	; (8004670 <HAL_TIM_PWM_Start+0x60>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d107      	bne.n	8004642 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b06      	cmp	r3, #6
 8004652:	d007      	beq.n	8004664 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000

08004674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0202 	mvn.w	r2, #2
 80046a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fa6b 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa5d 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fa6e 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0204 	mvn.w	r2, #4
 80046f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa41 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa33 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fa44 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b08      	cmp	r3, #8
 8004730:	d122      	bne.n	8004778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b08      	cmp	r3, #8
 800473e:	d11b      	bne.n	8004778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0208 	mvn.w	r2, #8
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2204      	movs	r2, #4
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fa17 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa09 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fa1a 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b10      	cmp	r3, #16
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0210 	mvn.w	r2, #16
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2208      	movs	r2, #8
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9ed 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9df 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f9f0 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10e      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0201 	mvn.w	r2, #1
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f005 fca0 	bl	800a138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d10e      	bne.n	8004824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d107      	bne.n	8004824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fd42 	bl	80052a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d10e      	bne.n	8004850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d107      	bne.n	8004850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9b5 	bl	8004bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b20      	cmp	r3, #32
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b20      	cmp	r3, #32
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0220 	mvn.w	r2, #32
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fd0c 	bl	8005294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800489a:	2302      	movs	r3, #2
 800489c:	e0b4      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	f200 809f 	bhi.w	80049f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	080049f5 	.word	0x080049f5
 80048c4:	080049f5 	.word	0x080049f5
 80048c8:	080049f5 	.word	0x080049f5
 80048cc:	08004931 	.word	0x08004931
 80048d0:	080049f5 	.word	0x080049f5
 80048d4:	080049f5 	.word	0x080049f5
 80048d8:	080049f5 	.word	0x080049f5
 80048dc:	08004973 	.word	0x08004973
 80048e0:	080049f5 	.word	0x080049f5
 80048e4:	080049f5 	.word	0x080049f5
 80048e8:	080049f5 	.word	0x080049f5
 80048ec:	080049b3 	.word	0x080049b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f9ea 	bl	8004cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0208 	orr.w	r2, r2, #8
 800490a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0204 	bic.w	r2, r2, #4
 800491a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6999      	ldr	r1, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	619a      	str	r2, [r3, #24]
      break;
 800492e:	e062      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fa30 	bl	8004d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6999      	ldr	r1, [r3, #24]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	619a      	str	r2, [r3, #24]
      break;
 8004970:	e041      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fa7b 	bl	8004e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0208 	orr.w	r2, r2, #8
 800498c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0204 	bic.w	r2, r2, #4
 800499c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	61da      	str	r2, [r3, #28]
      break;
 80049b0:	e021      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fac5 	bl	8004f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69d9      	ldr	r1, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	021a      	lsls	r2, r3, #8
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	61da      	str	r2, [r3, #28]
      break;
 80049f2:	e000      	b.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80049f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_ConfigClockSource+0x18>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e0a6      	b.n	8004b76 <HAL_TIM_ConfigClockSource+0x166>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d067      	beq.n	8004b30 <HAL_TIM_ConfigClockSource+0x120>
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d80b      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x6c>
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d073      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d802      	bhi.n	8004a72 <HAL_TIM_ConfigClockSource+0x62>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d06f      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004a70:	e078      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d06c      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
 8004a76:	2b30      	cmp	r3, #48	; 0x30
 8004a78:	d06a      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004a7a:	e073      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d00d      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x8c>
 8004a80:	2b70      	cmp	r3, #112	; 0x70
 8004a82:	d804      	bhi.n	8004a8e <HAL_TIM_ConfigClockSource+0x7e>
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d033      	beq.n	8004af0 <HAL_TIM_ConfigClockSource+0xe0>
 8004a88:	2b60      	cmp	r3, #96	; 0x60
 8004a8a:	d041      	beq.n	8004b10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a8c:	e06a      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d066      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x152>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d017      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a9a:	e063      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6899      	ldr	r1, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f000 fb16 	bl	80050dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004abe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e04c      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6899      	ldr	r1, [r3, #8]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f000 faff 	bl	80050dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aec:	609a      	str	r2, [r3, #8]
      break;
 8004aee:	e039      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	461a      	mov	r2, r3
 8004afe:	f000 fa73 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2150      	movs	r1, #80	; 0x50
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 facc 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004b0e:	e029      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f000 fa92 	bl	8005046 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2160      	movs	r1, #96	; 0x60
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fabc 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004b2e:	e019      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6859      	ldr	r1, [r3, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f000 fa53 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 faac 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004b4e:	e009      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f000 faa3 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004b60:	e000      	b.n	8004b64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a34      	ldr	r2, [pc, #208]	; (8004cb4 <TIM_Base_SetConfig+0xe4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <TIM_Base_SetConfig+0xe8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a30      	ldr	r2, [pc, #192]	; (8004cbc <TIM_Base_SetConfig+0xec>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a2f      	ldr	r2, [pc, #188]	; (8004cc0 <TIM_Base_SetConfig+0xf0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <TIM_Base_SetConfig+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <TIM_Base_SetConfig+0xe8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <TIM_Base_SetConfig+0xec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a20      	ldr	r2, [pc, #128]	; (8004cc0 <TIM_Base_SetConfig+0xf0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <TIM_Base_SetConfig+0xf4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <TIM_Base_SetConfig+0xf8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <TIM_Base_SetConfig+0xfc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <TIM_Base_SetConfig+0xe4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d103      	bne.n	8004ca0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	615a      	str	r2, [r3, #20]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40000c00 	.word	0x40000c00
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	40014400 	.word	0x40014400
 8004ccc:	40014800 	.word	0x40014800

08004cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f023 0201 	bic.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 0302 	bic.w	r3, r3, #2
 8004d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <TIM_OC1_SetConfig+0xc8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10c      	bne.n	8004d46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0308 	bic.w	r3, r3, #8
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <TIM_OC1_SetConfig+0xc8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d111      	bne.n	8004d72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40010000 	.word	0x40010000

08004d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0320 	bic.w	r3, r3, #32
 8004de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <TIM_OC2_SetConfig+0xd4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10d      	bne.n	8004e18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a15      	ldr	r2, [pc, #84]	; (8004e70 <TIM_OC2_SetConfig+0xd4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d113      	bne.n	8004e48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40010000 	.word	0x40010000

08004e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <TIM_OC3_SetConfig+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10d      	bne.n	8004eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <TIM_OC3_SetConfig+0xd0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d113      	bne.n	8004f1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	40010000 	.word	0x40010000

08004f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <TIM_OC4_SetConfig+0x9c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d109      	bne.n	8004fbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000

08004fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 030a 	bic.w	r3, r3, #10
 8005024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0210 	bic.w	r2, r3, #16
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	031b      	lsls	r3, r3, #12
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f043 0307 	orr.w	r3, r3, #7
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	431a      	orrs	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2201      	movs	r2, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	43db      	mvns	r3, r3
 800513e:	401a      	ands	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800517a:	2302      	movs	r3, #2
 800517c:	e032      	b.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005208:	2302      	movs	r3, #2
 800520a:	e03d      	b.n	8005288 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e03f      	b.n	800534e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f005 fef6 	bl	800b0d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	; 0x24
 80052ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fb93 	bl	8005a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b088      	sub	sp, #32
 800535a:	af02      	add	r7, sp, #8
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b20      	cmp	r3, #32
 8005374:	f040 8083 	bne.w	800547e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_UART_Transmit+0x2e>
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e07b      	b.n	8005480 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_UART_Transmit+0x40>
 8005392:	2302      	movs	r3, #2
 8005394:	e074      	b.n	8005480 <HAL_UART_Transmit+0x12a>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2221      	movs	r2, #33	; 0x21
 80053a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053ac:	f7fb fb0a 	bl	80009c4 <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	88fa      	ldrh	r2, [r7, #6]
 80053b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053be:	e042      	b.n	8005446 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d6:	d122      	bne.n	800541e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2200      	movs	r2, #0
 80053e0:	2180      	movs	r1, #128	; 0x80
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f9b6 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e046      	b.n	8005480 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005404:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d103      	bne.n	8005416 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	3302      	adds	r3, #2
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	e017      	b.n	8005446 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3301      	adds	r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	e013      	b.n	8005446 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2180      	movs	r1, #128	; 0x80
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f993 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e023      	b.n	8005480 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	60ba      	str	r2, [r7, #8]
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1b7      	bne.n	80053c0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2200      	movs	r2, #0
 8005458:	2140      	movs	r1, #64	; 0x40
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f97a 	bl	8005754 <UART_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e00a      	b.n	8005480 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d140      	bne.n	8005524 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_UART_Receive_IT+0x26>
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e039      	b.n	8005526 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_UART_Receive_IT+0x38>
 80054bc:	2302      	movs	r3, #2
 80054be:	e032      	b.n	8005526 <HAL_UART_Receive_IT+0x9e>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	88fa      	ldrh	r2, [r7, #6]
 80054d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2222      	movs	r2, #34	; 0x22
 80054e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0220 	orr.w	r2, r2, #32
 800551e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10d      	bne.n	8005586 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_UART_IRQHandler+0x52>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f9d2 	bl	8005928 <UART_Receive_IT>
      return;
 8005584:	e0cc      	b.n	8005720 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80ab 	beq.w	80056e4 <HAL_UART_IRQHandler+0x1b0>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_UART_IRQHandler+0x70>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80a0 	beq.w	80056e4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_UART_IRQHandler+0x90>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	f043 0201 	orr.w	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_UART_IRQHandler+0xb0>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055dc:	f043 0202 	orr.w	r2, r3, #2
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_UART_IRQHandler+0xd0>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fc:	f043 0204 	orr.w	r2, r3, #4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_UART_IRQHandler+0xf0>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	f043 0208 	orr.w	r2, r3, #8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d078      	beq.n	800571e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_UART_IRQHandler+0x112>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f971 	bl	8005928 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <HAL_UART_IRQHandler+0x13a>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d031      	beq.n	80056d2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8ba 	bl	80057e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	d123      	bne.n	80056ca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005690:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	2b00      	cmp	r3, #0
 8005698:	d013      	beq.n	80056c2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	4a22      	ldr	r2, [pc, #136]	; (8005728 <HAL_UART_IRQHandler+0x1f4>)
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb faa6 	bl	8000bf8 <HAL_DMA_Abort_IT>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c0:	e00e      	b.n	80056e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f83c 	bl	8005740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	e00a      	b.n	80056e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f838 	bl	8005740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	e006      	b.n	80056e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f834 	bl	8005740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80056de:	e01e      	b.n	800571e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	bf00      	nop
    return;
 80056e2:	e01c      	b.n	800571e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_UART_IRQHandler+0x1cc>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8a7 	bl	800584c <UART_Transmit_IT>
    return;
 80056fe:	e00f      	b.n	8005720 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <HAL_UART_IRQHandler+0x1ec>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f8ef 	bl	80058f8 <UART_EndTransmit_IT>
    return;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_UART_IRQHandler+0x1ec>
    return;
 800571e:	bf00      	nop
  }
}
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	08005825 	.word	0x08005825

0800572c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005764:	e02c      	b.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d028      	beq.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0x30>
 8005774:	f7fb f926 	bl	80009c4 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	429a      	cmp	r2, r3
 8005782:	d21d      	bcs.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005792:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e00f      	b.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4013      	ands	r3, r2
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d0c3      	beq.n	8005766 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff ff7e 	bl	8005740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b21      	cmp	r3, #33	; 0x21
 800585e:	d144      	bne.n	80058ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005868:	d11a      	bne.n	80058a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]
 8005892:	e00e      	b.n	80058b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]
 800589e:	e008      	b.n	80058b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	1c59      	adds	r1, r3, #1
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6211      	str	r1, [r2, #32]
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e000      	b.n	80058ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
  }
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ff07 	bl	800572c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b22      	cmp	r3, #34	; 0x22
 800593a:	d171      	bne.n	8005a20 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005944:	d123      	bne.n	800598e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10e      	bne.n	8005972 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
 8005970:	e029      	b.n	80059c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	b29b      	uxth	r3, r3
 800597a:	b2db      	uxtb	r3, r3
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
 800598c:	e01b      	b.n	80059c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6858      	ldr	r0, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	1c59      	adds	r1, r3, #1
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6291      	str	r1, [r2, #40]	; 0x28
 80059a6:	b2c2      	uxtb	r2, r0
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e00c      	b.n	80059c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	1c58      	adds	r0, r3, #1
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	6288      	str	r0, [r1, #40]	; 0x28
 80059be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4619      	mov	r1, r3
 80059d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d120      	bne.n	8005a1c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0220 	bic.w	r2, r2, #32
 80059e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f003 f87a 	bl	8008b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e002      	b.n	8005a22 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a2c:	b5b0      	push	{r4, r5, r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a6c:	f023 030c 	bic.w	r3, r3, #12
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	68f9      	ldr	r1, [r7, #12]
 8005a76:	430b      	orrs	r3, r1
 8005a78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a98:	f040 80e4 	bne.w	8005c64 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4aab      	ldr	r2, [pc, #684]	; (8005d50 <UART_SetConfig+0x324>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <UART_SetConfig+0x84>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4aaa      	ldr	r2, [pc, #680]	; (8005d54 <UART_SetConfig+0x328>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d16c      	bne.n	8005b8a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005ab0:	f7fe f98c 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009a      	lsls	r2, r3, #2
 8005abe:	441a      	add	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	4aa3      	ldr	r2, [pc, #652]	; (8005d58 <UART_SetConfig+0x32c>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	011c      	lsls	r4, r3, #4
 8005ad4:	f7fe f97a 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009a      	lsls	r2, r3, #2
 8005ae2:	441a      	add	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	fbb2 f5f3 	udiv	r5, r2, r3
 8005aee:	f7fe f96d 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005af2:	4602      	mov	r2, r0
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	4a93      	ldr	r2, [pc, #588]	; (8005d58 <UART_SetConfig+0x32c>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2264      	movs	r2, #100	; 0x64
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	1aeb      	subs	r3, r5, r3
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	3332      	adds	r3, #50	; 0x32
 8005b1c:	4a8e      	ldr	r2, [pc, #568]	; (8005d58 <UART_SetConfig+0x32c>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b2a:	441c      	add	r4, r3
 8005b2c:	f7fe f94e 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005b30:	4602      	mov	r2, r0
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009a      	lsls	r2, r3, #2
 8005b3a:	441a      	add	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b46:	f7fe f941 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009a      	lsls	r2, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	4a7d      	ldr	r2, [pc, #500]	; (8005d58 <UART_SetConfig+0x32c>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2264      	movs	r2, #100	; 0x64
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	1aeb      	subs	r3, r5, r3
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a78      	ldr	r2, [pc, #480]	; (8005d58 <UART_SetConfig+0x32c>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 0207 	and.w	r2, r3, #7
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4422      	add	r2, r4
 8005b86:	609a      	str	r2, [r3, #8]
 8005b88:	e154      	b.n	8005e34 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b8a:	f7fe f90b 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009a      	lsls	r2, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	4a6c      	ldr	r2, [pc, #432]	; (8005d58 <UART_SetConfig+0x32c>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	011c      	lsls	r4, r3, #4
 8005bae:	f7fe f8f9 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009a      	lsls	r2, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fbb2 f5f3 	udiv	r5, r2, r3
 8005bc8:	f7fe f8ec 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009a      	lsls	r2, r3, #2
 8005bd6:	441a      	add	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be2:	4a5d      	ldr	r2, [pc, #372]	; (8005d58 <UART_SetConfig+0x32c>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2264      	movs	r2, #100	; 0x64
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	1aeb      	subs	r3, r5, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a58      	ldr	r2, [pc, #352]	; (8005d58 <UART_SetConfig+0x32c>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c04:	441c      	add	r4, r3
 8005c06:	f7fe f8cd 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009a      	lsls	r2, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c20:	f7fe f8c0 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009a      	lsls	r2, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	4a47      	ldr	r2, [pc, #284]	; (8005d58 <UART_SetConfig+0x32c>)
 8005c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	2264      	movs	r2, #100	; 0x64
 8005c44:	fb02 f303 	mul.w	r3, r2, r3
 8005c48:	1aeb      	subs	r3, r5, r3
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	3332      	adds	r3, #50	; 0x32
 8005c4e:	4a42      	ldr	r2, [pc, #264]	; (8005d58 <UART_SetConfig+0x32c>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	f003 0207 	and.w	r2, r3, #7
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4422      	add	r2, r4
 8005c60:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005c62:	e0e7      	b.n	8005e34 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a39      	ldr	r2, [pc, #228]	; (8005d50 <UART_SetConfig+0x324>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <UART_SetConfig+0x24c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a38      	ldr	r2, [pc, #224]	; (8005d54 <UART_SetConfig+0x328>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d171      	bne.n	8005d5c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005c78:	f7fe f8a8 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009a      	lsls	r2, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	4a31      	ldr	r2, [pc, #196]	; (8005d58 <UART_SetConfig+0x32c>)
 8005c94:	fba2 2303 	umull	r2, r3, r2, r3
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	011c      	lsls	r4, r3, #4
 8005c9c:	f7fe f896 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009a      	lsls	r2, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8005cb6:	f7fe f889 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009a      	lsls	r2, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	4a21      	ldr	r2, [pc, #132]	; (8005d58 <UART_SetConfig+0x32c>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2264      	movs	r2, #100	; 0x64
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	1aeb      	subs	r3, r5, r3
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	3332      	adds	r3, #50	; 0x32
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <UART_SetConfig+0x32c>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf0:	441c      	add	r4, r3
 8005cf2:	f7fe f86b 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009a      	lsls	r2, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d0c:	f7fe f85e 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009a      	lsls	r2, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	4a0c      	ldr	r2, [pc, #48]	; (8005d58 <UART_SetConfig+0x32c>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2264      	movs	r2, #100	; 0x64
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	1aeb      	subs	r3, r5, r3
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <UART_SetConfig+0x32c>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4422      	add	r2, r4
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	e071      	b.n	8005e34 <UART_SetConfig+0x408>
 8005d50:	40011000 	.word	0x40011000
 8005d54:	40011400 	.word	0x40011400
 8005d58:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005d5c:	f7fe f822 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005d60:	4602      	mov	r2, r0
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009a      	lsls	r2, r3, #2
 8005d6a:	441a      	add	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	4a31      	ldr	r2, [pc, #196]	; (8005e3c <UART_SetConfig+0x410>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	011c      	lsls	r4, r3, #4
 8005d80:	f7fe f810 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005d84:	4602      	mov	r2, r0
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009a      	lsls	r2, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d9a:	f7fe f803 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009a      	lsls	r2, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <UART_SetConfig+0x410>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	2264      	movs	r2, #100	; 0x64
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	1aeb      	subs	r3, r5, r3
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	3332      	adds	r3, #50	; 0x32
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <UART_SetConfig+0x410>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd4:	441c      	add	r4, r3
 8005dd6:	f7fd ffe5 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009a      	lsls	r2, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	fbb2 f5f3 	udiv	r5, r2, r3
 8005df0:	f7fd ffd8 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009a      	lsls	r2, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	4a0c      	ldr	r2, [pc, #48]	; (8005e3c <UART_SetConfig+0x410>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	2264      	movs	r2, #100	; 0x64
 8005e14:	fb02 f303 	mul.w	r3, r2, r3
 8005e18:	1aeb      	subs	r3, r5, r3
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	3332      	adds	r3, #50	; 0x32
 8005e1e:	4a07      	ldr	r2, [pc, #28]	; (8005e3c <UART_SetConfig+0x410>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	f003 020f 	and.w	r2, r3, #15
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4422      	add	r2, r4
 8005e30:	609a      	str	r2, [r3, #8]
}
 8005e32:	e7ff      	b.n	8005e34 <UART_SetConfig+0x408>
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e3c:	51eb851f 	.word	0x51eb851f

08005e40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e52:	2b84      	cmp	r3, #132	; 0x84
 8005e54:	d005      	beq.n	8005e62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3303      	adds	r3, #3
 8005e60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e62:	68fb      	ldr	r3, [r7, #12]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e74:	f000 fe3c 	bl	8006af0 <vTaskStartScheduler>
  
  return osOK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e80:	b089      	sub	sp, #36	; 0x24
 8005e82:	af04      	add	r7, sp, #16
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <osThreadCreate+0x54>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01c      	beq.n	8005ed2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685c      	ldr	r4, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681d      	ldr	r5, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691e      	ldr	r6, [r3, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ffc8 	bl	8005e40 <makeFreeRtosPriority>
 8005eb0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eba:	9202      	str	r2, [sp, #8]
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	9100      	str	r1, [sp, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 fc58 	bl	800677c <xTaskCreateStatic>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e01c      	b.n	8005f0c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685c      	ldr	r4, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ede:	b29e      	uxth	r6, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff ffaa 	bl	8005e40 <makeFreeRtosPriority>
 8005eec:	4602      	mov	r2, r0
 8005eee:	f107 030c 	add.w	r3, r7, #12
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	9200      	str	r2, [sp, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4629      	mov	r1, r5
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fc96 	bl	800682e <xTaskCreate>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d001      	beq.n	8005f0c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e000      	b.n	8005f0e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <osDelay+0x16>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	e000      	b.n	8005f2e <osDelay+0x18>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fdaa 	bl	8006a88 <vTaskDelay>
  
  return osOK;
 8005f34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	4619      	mov	r1, r3
 8005f54:	2001      	movs	r0, #1
 8005f56:	f000 fa27 	bl	80063a8 <xQueueCreateMutexStatic>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e003      	b.n	8005f66 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005f5e:	2001      	movs	r0, #1
 8005f60:	f000 fa0a 	bl	8006378 <xQueueCreateMutex>
 8005f64:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f04f 32ff 	mov.w	r2, #4294967295
 8005f86:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f103 0208 	add.w	r2, r3, #8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f103 0208 	add.w	r2, r3, #8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d103      	bne.n	8006030 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e00c      	b.n	800604a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3308      	adds	r3, #8
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e002      	b.n	800603e <vListInsert+0x2e>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	429a      	cmp	r2, r3
 8006048:	d2f6      	bcs.n	8006038 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6892      	ldr	r2, [r2, #8]
 8006098:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6852      	ldr	r2, [r2, #4]
 80060a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d103      	bne.n	80060b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	e7fe      	b.n	80060fe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006100:	f001 fb24 	bl	800774c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	68f9      	ldr	r1, [r7, #12]
 800610e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006130:	3b01      	subs	r3, #1
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	441a      	add	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	22ff      	movs	r2, #255	; 0xff
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	22ff      	movs	r2, #255	; 0xff
 800614c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d114      	bne.n	8006180 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01a      	beq.n	8006194 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3310      	adds	r3, #16
 8006162:	4618      	mov	r0, r3
 8006164:	f000 ff06 	bl	8006f74 <xTaskRemoveFromEventList>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d012      	beq.n	8006194 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <xQueueGenericReset+0xcc>)
 8006170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	e009      	b.n	8006194 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3310      	adds	r3, #16
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fef2 	bl	8005f6e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3324      	adds	r3, #36	; 0x24
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff feed 	bl	8005f6e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006194:	f001 fb08 	bl	80077a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006198:	2301      	movs	r3, #1
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08e      	sub	sp, #56	; 0x38
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <xQueueGenericCreateStatic+0x28>
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ce:	e7fe      	b.n	80061ce <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <xQueueGenericCreateStatic+0x42>
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
 80061e8:	e7fe      	b.n	80061e8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <xQueueGenericCreateStatic+0x4e>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <xQueueGenericCreateStatic+0x52>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <xQueueGenericCreateStatic+0x54>
 80061fa:	2300      	movs	r3, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <xQueueGenericCreateStatic+0x6c>
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	e7fe      	b.n	8006212 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <xQueueGenericCreateStatic+0x78>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <xQueueGenericCreateStatic+0x7c>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <xQueueGenericCreateStatic+0x7e>
 8006224:	2300      	movs	r3, #0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <xQueueGenericCreateStatic+0x96>
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e7fe      	b.n	800623c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800623e:	2348      	movs	r3, #72	; 0x48
 8006240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b48      	cmp	r3, #72	; 0x48
 8006246:	d009      	beq.n	800625c <xQueueGenericCreateStatic+0xb4>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e7fe      	b.n	800625a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800626e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f842 	bl	8006306 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006284:	4618      	mov	r0, r3
 8006286:	3730      	adds	r7, #48	; 0x30
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <xQueueGenericCreate+0x28>
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	e7fe      	b.n	80062b2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61fb      	str	r3, [r7, #28]
 80062be:	e004      	b.n	80062ca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3348      	adds	r3, #72	; 0x48
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 fb18 	bl	8007904 <pvPortMalloc>
 80062d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00f      	beq.n	80062fc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	3348      	adds	r3, #72	; 0x48
 80062e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062ea:	79fa      	ldrb	r2, [r7, #7]
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f805 	bl	8006306 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80062fc:	69bb      	ldr	r3, [r7, #24]
	}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e002      	b.n	8006328 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006334:	2101      	movs	r1, #1
 8006336:	69b8      	ldr	r0, [r7, #24]
 8006338:	f7ff fece 	bl	80060d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006364:	2300      	movs	r3, #0
 8006366:	2200      	movs	r2, #0
 8006368:	2100      	movs	r1, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f838 	bl	80063e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006382:	2301      	movs	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	461a      	mov	r2, r3
 800638e:	6939      	ldr	r1, [r7, #16]
 8006390:	6978      	ldr	r0, [r7, #20]
 8006392:	f7ff ff7b 	bl	800628c <xQueueGenericCreate>
 8006396:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff ffd3 	bl	8006344 <prvInitialiseMutex>

		return pxNewQueue;
 800639e:	68fb      	ldr	r3, [r7, #12]
	}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	4603      	mov	r3, r0
 80063b0:	6039      	str	r1, [r7, #0]
 80063b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	6939      	ldr	r1, [r7, #16]
 80063c6:	6978      	ldr	r0, [r7, #20]
 80063c8:	f7ff feee 	bl	80061a8 <xQueueGenericCreateStatic>
 80063cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff ffb8 	bl	8006344 <prvInitialiseMutex>

		return pxNewQueue;
 80063d4:	68fb      	ldr	r3, [r7, #12]
	}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	; 0x38
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ee:	2300      	movs	r3, #0
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <xQueueGenericSend+0x30>
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
 800640e:	e7fe      	b.n	800640e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <xQueueGenericSend+0x3e>
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <xQueueGenericSend+0x42>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericSend+0x44>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <xQueueGenericSend+0x5c>
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
 800643a:	e7fe      	b.n	800643a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x6a>
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <xQueueGenericSend+0x6e>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericSend+0x70>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <xQueueGenericSend+0x88>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	e7fe      	b.n	8006466 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006468:	f000 ff40 	bl	80072ec <xTaskGetSchedulerState>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <xQueueGenericSend+0x98>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <xQueueGenericSend+0x9c>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <xQueueGenericSend+0x9e>
 800647c:	2300      	movs	r3, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <xQueueGenericSend+0xb6>
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e7fe      	b.n	8006494 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006496:	f001 f959 	bl	800774c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d302      	bcc.n	80064ac <xQueueGenericSend+0xcc>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d129      	bne.n	8006500 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b2:	f000 f88f 	bl	80065d4 <prvCopyDataToQueue>
 80064b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d010      	beq.n	80064e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	3324      	adds	r3, #36	; 0x24
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fd55 	bl	8006f74 <xTaskRemoveFromEventList>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d013      	beq.n	80064f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064d0:	4b3f      	ldr	r3, [pc, #252]	; (80065d0 <xQueueGenericSend+0x1f0>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	e00a      	b.n	80064f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064e8:	4b39      	ldr	r3, [pc, #228]	; (80065d0 <xQueueGenericSend+0x1f0>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064f8:	f001 f956 	bl	80077a8 <vPortExitCritical>
				return pdPASS;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e063      	b.n	80065c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006506:	f001 f94f 	bl	80077a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800650a:	2300      	movs	r3, #0
 800650c:	e05c      	b.n	80065c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006514:	f107 0314 	add.w	r3, r7, #20
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fd8d 	bl	8007038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800651e:	2301      	movs	r3, #1
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006522:	f001 f941 	bl	80077a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006526:	f000 fb41 	bl	8006bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800652a:	f001 f90f 	bl	800774c <vPortEnterCritical>
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006534:	b25b      	sxtb	r3, r3
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653a:	d103      	bne.n	8006544 <xQueueGenericSend+0x164>
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800654a:	b25b      	sxtb	r3, r3
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d103      	bne.n	800655a <xQueueGenericSend+0x17a>
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800655a:	f001 f925 	bl	80077a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800655e:	1d3a      	adds	r2, r7, #4
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fd7c 	bl	8007064 <xTaskCheckForTimeOut>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d124      	bne.n	80065bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006574:	f000 f8ea 	bl	800674c <prvIsQueueFull>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d018      	beq.n	80065b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	3310      	adds	r3, #16
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4611      	mov	r1, r2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fcd0 	bl	8006f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800658c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800658e:	f000 f88b 	bl	80066a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006592:	f000 fb19 	bl	8006bc8 <xTaskResumeAll>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	f47f af7c 	bne.w	8006496 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <xQueueGenericSend+0x1f0>)
 80065a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	e772      	b.n	8006496 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b2:	f000 f879 	bl	80066a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b6:	f000 fb07 	bl	8006bc8 <xTaskResumeAll>
 80065ba:	e76c      	b.n	8006496 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065be:	f000 f873 	bl	80066a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065c2:	f000 fb01 	bl	8006bc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065c6:	2300      	movs	r3, #0
		}
	}
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3738      	adds	r7, #56	; 0x38
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d14d      	bne.n	8006696 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fe92 	bl	8007328 <xTaskPriorityDisinherit>
 8006604:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
 800660c:	e043      	b.n	8006696 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d119      	bne.n	8006648 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6898      	ldr	r0, [r3, #8]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	461a      	mov	r2, r3
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	f005 ff76 	bl	800c510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	441a      	add	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	429a      	cmp	r2, r3
 800663c:	d32b      	bcc.n	8006696 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	609a      	str	r2, [r3, #8]
 8006646:	e026      	b.n	8006696 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68d8      	ldr	r0, [r3, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	461a      	mov	r2, r3
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	f005 ff5c 	bl	800c510 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	425b      	negs	r3, r3
 8006662:	441a      	add	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d207      	bcs.n	8006684 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	425b      	negs	r3, r3
 800667e:	441a      	add	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d105      	bne.n	8006696 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3b01      	subs	r3, #1
 8006694:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800669e:	697b      	ldr	r3, [r7, #20]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066b0:	f001 f84c 	bl	800774c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066bc:	e011      	b.n	80066e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d012      	beq.n	80066ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3324      	adds	r3, #36	; 0x24
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fc52 	bl	8006f74 <xTaskRemoveFromEventList>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066d6:	f000 fd25 	bl	8007124 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	3b01      	subs	r3, #1
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dce9      	bgt.n	80066be <prvUnlockQueue+0x16>
 80066ea:	e000      	b.n	80066ee <prvUnlockQueue+0x46>
					break;
 80066ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066f6:	f001 f857 	bl	80077a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066fa:	f001 f827 	bl	800774c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006706:	e011      	b.n	800672c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3310      	adds	r3, #16
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fc2d 	bl	8006f74 <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006720:	f000 fd00 	bl	8007124 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	3b01      	subs	r3, #1
 8006728:	b2db      	uxtb	r3, r3
 800672a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800672c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dce9      	bgt.n	8006708 <prvUnlockQueue+0x60>
 8006734:	e000      	b.n	8006738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006740:	f001 f832 	bl	80077a8 <vPortExitCritical>
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006754:	f000 fffa 	bl	800774c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	429a      	cmp	r2, r3
 8006762:	d102      	bne.n	800676a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006764:	2301      	movs	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e001      	b.n	800676e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800676e:	f001 f81b 	bl	80077a8 <vPortExitCritical>

	return xReturn;
 8006772:	68fb      	ldr	r3, [r7, #12]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af04      	add	r7, sp, #16
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <xTaskCreateStatic+0x28>
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	e7fe      	b.n	80067a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <xTaskCreateStatic+0x42>
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	e7fe      	b.n	80067bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067be:	2354      	movs	r3, #84	; 0x54
 80067c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b54      	cmp	r3, #84	; 0x54
 80067c6:	d009      	beq.n	80067dc <xTaskCreateStatic+0x60>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e7fe      	b.n	80067da <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01e      	beq.n	8006820 <xTaskCreateStatic+0xa4>
 80067e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01b      	beq.n	8006820 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067fa:	2300      	movs	r3, #0
 80067fc:	9303      	str	r3, [sp, #12]
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	9302      	str	r3, [sp, #8]
 8006802:	f107 0314 	add.w	r3, r7, #20
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f850 	bl	80068b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800681a:	f000 f8cb 	bl	80069b4 <prvAddNewTaskToReadyList>
 800681e:	e001      	b.n	8006824 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006824:	697b      	ldr	r3, [r7, #20]
	}
 8006826:	4618      	mov	r0, r3
 8006828:	3728      	adds	r7, #40	; 0x28
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800682e:	b580      	push	{r7, lr}
 8006830:	b08c      	sub	sp, #48	; 0x30
 8006832:	af04      	add	r7, sp, #16
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	603b      	str	r3, [r7, #0]
 800683a:	4613      	mov	r3, r2
 800683c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4618      	mov	r0, r3
 8006844:	f001 f85e 	bl	8007904 <pvPortMalloc>
 8006848:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00e      	beq.n	800686e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006850:	2054      	movs	r0, #84	; 0x54
 8006852:	f001 f857 	bl	8007904 <pvPortMalloc>
 8006856:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
 8006864:	e005      	b.n	8006872 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006866:	6978      	ldr	r0, [r7, #20]
 8006868:	f001 f90e 	bl	8007a88 <vPortFree>
 800686c:	e001      	b.n	8006872 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800686e:	2300      	movs	r3, #0
 8006870:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d017      	beq.n	80068a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006880:	88fa      	ldrh	r2, [r7, #6]
 8006882:	2300      	movs	r3, #0
 8006884:	9303      	str	r3, [sp, #12]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	9302      	str	r3, [sp, #8]
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f80e 	bl	80068b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800689c:	69f8      	ldr	r0, [r7, #28]
 800689e:	f000 f889 	bl	80069b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068a2:	2301      	movs	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e002      	b.n	80068ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068ae:	69bb      	ldr	r3, [r7, #24]
	}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3720      	adds	r7, #32
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068d0:	3b01      	subs	r3, #1
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f023 0307 	bic.w	r3, r3, #7
 80068de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <prvInitialiseNewTask+0x46>
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	e7fe      	b.n	80068fc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	e012      	b.n	800692a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	7819      	ldrb	r1, [r3, #0]
 800690c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	3334      	adds	r3, #52	; 0x34
 8006914:	460a      	mov	r2, r1
 8006916:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	3301      	adds	r3, #1
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b0f      	cmp	r3, #15
 800692e:	d9e9      	bls.n	8006904 <prvInitialiseNewTask+0x4c>
 8006930:	e000      	b.n	8006934 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006932:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	2b06      	cmp	r3, #6
 8006940:	d901      	bls.n	8006946 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006942:	2306      	movs	r3, #6
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800694a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	3304      	adds	r3, #4
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fb26 	bl	8005fae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	3318      	adds	r3, #24
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fb21 	bl	8005fae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006970:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	f1c3 0207 	rsb	r2, r3, #7
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006980:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2200      	movs	r2, #0
 8006986:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	69b8      	ldr	r0, [r7, #24]
 8006996:	f000 fdb1 	bl	80074fc <pxPortInitialiseStack>
 800699a:	4602      	mov	r2, r0
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069ac:	bf00      	nop
 80069ae:	3720      	adds	r7, #32
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069bc:	f000 fec6 	bl	800774c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069c0:	4b2a      	ldr	r3, [pc, #168]	; (8006a6c <prvAddNewTaskToReadyList+0xb8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <prvAddNewTaskToReadyList+0xb8>)
 80069c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069ca:	4b29      	ldr	r3, [pc, #164]	; (8006a70 <prvAddNewTaskToReadyList+0xbc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069d2:	4a27      	ldr	r2, [pc, #156]	; (8006a70 <prvAddNewTaskToReadyList+0xbc>)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069d8:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <prvAddNewTaskToReadyList+0xb8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d110      	bne.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069e0:	f000 fbc4 	bl	800716c <prvInitialiseTaskLists>
 80069e4:	e00d      	b.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069e6:	4b23      	ldr	r3, [pc, #140]	; (8006a74 <prvAddNewTaskToReadyList+0xc0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069ee:	4b20      	ldr	r3, [pc, #128]	; (8006a70 <prvAddNewTaskToReadyList+0xbc>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d802      	bhi.n	8006a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069fc:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <prvAddNewTaskToReadyList+0xbc>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a02:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <prvAddNewTaskToReadyList+0xc4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <prvAddNewTaskToReadyList+0xc4>)
 8006a0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	2201      	movs	r2, #1
 8006a12:	409a      	lsls	r2, r3
 8006a14:	4b19      	ldr	r3, [pc, #100]	; (8006a7c <prvAddNewTaskToReadyList+0xc8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <prvAddNewTaskToReadyList+0xc8>)
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a15      	ldr	r2, [pc, #84]	; (8006a80 <prvAddNewTaskToReadyList+0xcc>)
 8006a2c:	441a      	add	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7ff fac7 	bl	8005fc8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a3a:	f000 feb5 	bl	80077a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <prvAddNewTaskToReadyList+0xc0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00e      	beq.n	8006a64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <prvAddNewTaskToReadyList+0xbc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d207      	bcs.n	8006a64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <prvAddNewTaskToReadyList+0xd0>)
 8006a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200001a0 	.word	0x200001a0
 8006a70:	200000a0 	.word	0x200000a0
 8006a74:	200001ac 	.word	0x200001ac
 8006a78:	200001bc 	.word	0x200001bc
 8006a7c:	200001a8 	.word	0x200001a8
 8006a80:	200000a4 	.word	0x200000a4
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a9a:	4b13      	ldr	r3, [pc, #76]	; (8006ae8 <vTaskDelay+0x60>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <vTaskDelay+0x2e>
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60bb      	str	r3, [r7, #8]
 8006ab4:	e7fe      	b.n	8006ab4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006ab6:	f000 f879 	bl	8006bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aba:	2100      	movs	r1, #0
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fcb7 	bl	8007430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ac2:	f000 f881 	bl	8006bc8 <xTaskResumeAll>
 8006ac6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d107      	bne.n	8006ade <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006ace:	4b07      	ldr	r3, [pc, #28]	; (8006aec <vTaskDelay+0x64>)
 8006ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200001c8 	.word	0x200001c8
 8006aec:	e000ed04 	.word	0xe000ed04

08006af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006afe:	463a      	mov	r2, r7
 8006b00:	1d39      	adds	r1, r7, #4
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 f9f4 	bl	8007ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	9202      	str	r2, [sp, #8]
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	2300      	movs	r3, #0
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	460a      	mov	r2, r1
 8006b1e:	491d      	ldr	r1, [pc, #116]	; (8006b94 <vTaskStartScheduler+0xa4>)
 8006b20:	481d      	ldr	r0, [pc, #116]	; (8006b98 <vTaskStartScheduler+0xa8>)
 8006b22:	f7ff fe2b 	bl	800677c <xTaskCreateStatic>
 8006b26:	4602      	mov	r2, r0
 8006b28:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <vTaskStartScheduler+0xac>)
 8006b2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <vTaskStartScheduler+0xac>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e001      	b.n	8006b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d115      	bne.n	8006b70 <vTaskStartScheduler+0x80>
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b56:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <vTaskStartScheduler+0xb0>)
 8006b58:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <vTaskStartScheduler+0xb4>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <vTaskStartScheduler+0xb8>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b6a:	f000 fd51 	bl	8007610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b6e:	e00d      	b.n	8006b8c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d109      	bne.n	8006b8c <vTaskStartScheduler+0x9c>
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	e7fe      	b.n	8006b8a <vTaskStartScheduler+0x9a>
}
 8006b8c:	bf00      	nop
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	0800ce58 	.word	0x0800ce58
 8006b98:	0800713d 	.word	0x0800713d
 8006b9c:	200001c4 	.word	0x200001c4
 8006ba0:	200001c0 	.word	0x200001c0
 8006ba4:	200001ac 	.word	0x200001ac
 8006ba8:	200001a4 	.word	0x200001a4

08006bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <vTaskSuspendAll+0x18>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a03      	ldr	r2, [pc, #12]	; (8006bc4 <vTaskSuspendAll+0x18>)
 8006bb8:	6013      	str	r3, [r2, #0]
}
 8006bba:	bf00      	nop
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	200001c8 	.word	0x200001c8

08006bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bd6:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <xTaskResumeAll+0x114>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <xTaskResumeAll+0x2a>
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	e7fe      	b.n	8006bf0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bf2:	f000 fdab 	bl	800774c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bf6:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <xTaskResumeAll+0x114>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	4a37      	ldr	r2, [pc, #220]	; (8006cdc <xTaskResumeAll+0x114>)
 8006bfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c00:	4b36      	ldr	r3, [pc, #216]	; (8006cdc <xTaskResumeAll+0x114>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d161      	bne.n	8006ccc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c08:	4b35      	ldr	r3, [pc, #212]	; (8006ce0 <xTaskResumeAll+0x118>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d05d      	beq.n	8006ccc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c10:	e02e      	b.n	8006c70 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c12:	4b34      	ldr	r3, [pc, #208]	; (8006ce4 <xTaskResumeAll+0x11c>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fa2f 	bl	8006082 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fa2a 	bl	8006082 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	2201      	movs	r2, #1
 8006c34:	409a      	lsls	r2, r3
 8006c36:	4b2c      	ldr	r3, [pc, #176]	; (8006ce8 <xTaskResumeAll+0x120>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ce8 <xTaskResumeAll+0x120>)
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4a27      	ldr	r2, [pc, #156]	; (8006cec <xTaskResumeAll+0x124>)
 8006c4e:	441a      	add	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7ff f9b6 	bl	8005fc8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c60:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <xTaskResumeAll+0x128>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d302      	bcc.n	8006c70 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006c6a:	4b22      	ldr	r3, [pc, #136]	; (8006cf4 <xTaskResumeAll+0x12c>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c70:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <xTaskResumeAll+0x11c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1cc      	bne.n	8006c12 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c7e:	f000 fb0f 	bl	80072a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c82:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <xTaskResumeAll+0x130>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c8e:	f000 f837 	bl	8006d00 <xTaskIncrementTick>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006c98:	4b16      	ldr	r3, [pc, #88]	; (8006cf4 <xTaskResumeAll+0x12c>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f1      	bne.n	8006c8e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <xTaskResumeAll+0x130>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cb0:	4b10      	ldr	r3, [pc, #64]	; (8006cf4 <xTaskResumeAll+0x12c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cbc:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <xTaskResumeAll+0x134>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ccc:	f000 fd6c 	bl	80077a8 <vPortExitCritical>

	return xAlreadyYielded;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200001c8 	.word	0x200001c8
 8006ce0:	200001a0 	.word	0x200001a0
 8006ce4:	20000160 	.word	0x20000160
 8006ce8:	200001a8 	.word	0x200001a8
 8006cec:	200000a4 	.word	0x200000a4
 8006cf0:	200000a0 	.word	0x200000a0
 8006cf4:	200001b4 	.word	0x200001b4
 8006cf8:	200001b0 	.word	0x200001b0
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d0a:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <xTaskIncrementTick+0x14c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f040 808c 	bne.w	8006e2c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d14:	4b4e      	ldr	r3, [pc, #312]	; (8006e50 <xTaskIncrementTick+0x150>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d1c:	4a4c      	ldr	r2, [pc, #304]	; (8006e50 <xTaskIncrementTick+0x150>)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11f      	bne.n	8006d68 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d28:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <xTaskIncrementTick+0x154>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <xTaskIncrementTick+0x46>
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	e7fe      	b.n	8006d44 <xTaskIncrementTick+0x44>
 8006d46:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <xTaskIncrementTick+0x154>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	4b42      	ldr	r3, [pc, #264]	; (8006e58 <xTaskIncrementTick+0x158>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a40      	ldr	r2, [pc, #256]	; (8006e54 <xTaskIncrementTick+0x154>)
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4a40      	ldr	r2, [pc, #256]	; (8006e58 <xTaskIncrementTick+0x158>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	4b40      	ldr	r3, [pc, #256]	; (8006e5c <xTaskIncrementTick+0x15c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a3e      	ldr	r2, [pc, #248]	; (8006e5c <xTaskIncrementTick+0x15c>)
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	f000 fa9c 	bl	80072a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d68:	4b3d      	ldr	r3, [pc, #244]	; (8006e60 <xTaskIncrementTick+0x160>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d34d      	bcc.n	8006e0e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d72:	4b38      	ldr	r3, [pc, #224]	; (8006e54 <xTaskIncrementTick+0x154>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <xTaskIncrementTick+0x80>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <xTaskIncrementTick+0x82>
 8006d80:	2300      	movs	r3, #0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d86:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <xTaskIncrementTick+0x160>)
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	601a      	str	r2, [r3, #0]
					break;
 8006d8e:	e03e      	b.n	8006e0e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d90:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <xTaskIncrementTick+0x154>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d203      	bcs.n	8006db0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006da8:	4a2d      	ldr	r2, [pc, #180]	; (8006e60 <xTaskIncrementTick+0x160>)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6013      	str	r3, [r2, #0]
						break;
 8006dae:	e02e      	b.n	8006e0e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff f964 	bl	8006082 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3318      	adds	r3, #24
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff f95b 	bl	8006082 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	4b23      	ldr	r3, [pc, #140]	; (8006e64 <xTaskIncrementTick+0x164>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	4a22      	ldr	r2, [pc, #136]	; (8006e64 <xTaskIncrementTick+0x164>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <xTaskIncrementTick+0x168>)
 8006dec:	441a      	add	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7ff f8e7 	bl	8005fc8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <xTaskIncrementTick+0x16c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d3b4      	bcc.n	8006d72 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e0c:	e7b1      	b.n	8006d72 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <xTaskIncrementTick+0x16c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4914      	ldr	r1, [pc, #80]	; (8006e68 <xTaskIncrementTick+0x168>)
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d907      	bls.n	8006e36 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e004      	b.n	8006e36 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e2c:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <xTaskIncrementTick+0x170>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <xTaskIncrementTick+0x170>)
 8006e34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e36:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <xTaskIncrementTick+0x174>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e42:	697b      	ldr	r3, [r7, #20]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	200001c8 	.word	0x200001c8
 8006e50:	200001a4 	.word	0x200001a4
 8006e54:	20000158 	.word	0x20000158
 8006e58:	2000015c 	.word	0x2000015c
 8006e5c:	200001b8 	.word	0x200001b8
 8006e60:	200001c0 	.word	0x200001c0
 8006e64:	200001a8 	.word	0x200001a8
 8006e68:	200000a4 	.word	0x200000a4
 8006e6c:	200000a0 	.word	0x200000a0
 8006e70:	200001b0 	.word	0x200001b0
 8006e74:	200001b4 	.word	0x200001b4

08006e78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e7e:	4b26      	ldr	r3, [pc, #152]	; (8006f18 <vTaskSwitchContext+0xa0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e86:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <vTaskSwitchContext+0xa4>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e8c:	e03e      	b.n	8006f0c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006e8e:	4b23      	ldr	r3, [pc, #140]	; (8006f1c <vTaskSwitchContext+0xa4>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e94:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <vTaskSwitchContext+0xa8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	fab3 f383 	clz	r3, r3
 8006ea0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	f1c3 031f 	rsb	r3, r3, #31
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	491e      	ldr	r1, [pc, #120]	; (8006f24 <vTaskSwitchContext+0xac>)
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	607b      	str	r3, [r7, #4]
 8006ed0:	e7fe      	b.n	8006ed0 <vTaskSwitchContext+0x58>
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4a11      	ldr	r2, [pc, #68]	; (8006f24 <vTaskSwitchContext+0xac>)
 8006ede:	4413      	add	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d104      	bne.n	8006f02 <vTaskSwitchContext+0x8a>
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	605a      	str	r2, [r3, #4]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <vTaskSwitchContext+0xb0>)
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	200001c8 	.word	0x200001c8
 8006f1c:	200001b4 	.word	0x200001b4
 8006f20:	200001a8 	.word	0x200001a8
 8006f24:	200000a4 	.word	0x200000a4
 8006f28:	200000a0 	.word	0x200000a0

08006f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <vTaskPlaceOnEventList+0x24>
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e7fe      	b.n	8006f4e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <vTaskPlaceOnEventList+0x44>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3318      	adds	r3, #24
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff f859 	bl	8006010 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6838      	ldr	r0, [r7, #0]
 8006f62:	f000 fa65 	bl	8007430 <prvAddCurrentTaskToDelayedList>
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200000a0 	.word	0x200000a0

08006f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <xTaskRemoveFromEventList+0x2a>
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e7fe      	b.n	8006f9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3318      	adds	r3, #24
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff f86d 	bl	8006082 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa8:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <xTaskRemoveFromEventList+0xac>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d11c      	bne.n	8006fea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff f864 	bl	8006082 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	409a      	lsls	r2, r3
 8006fc2:	4b18      	ldr	r3, [pc, #96]	; (8007024 <xTaskRemoveFromEventList+0xb0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	4a16      	ldr	r2, [pc, #88]	; (8007024 <xTaskRemoveFromEventList+0xb0>)
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4a13      	ldr	r2, [pc, #76]	; (8007028 <xTaskRemoveFromEventList+0xb4>)
 8006fda:	441a      	add	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fe fff0 	bl	8005fc8 <vListInsertEnd>
 8006fe8:	e005      	b.n	8006ff6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3318      	adds	r3, #24
 8006fee:	4619      	mov	r1, r3
 8006ff0:	480e      	ldr	r0, [pc, #56]	; (800702c <xTaskRemoveFromEventList+0xb8>)
 8006ff2:	f7fe ffe9 	bl	8005fc8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <xTaskRemoveFromEventList+0xbc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	429a      	cmp	r2, r3
 8007002:	d905      	bls.n	8007010 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <xTaskRemoveFromEventList+0xc0>)
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e001      	b.n	8007014 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007014:	697b      	ldr	r3, [r7, #20]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200001c8 	.word	0x200001c8
 8007024:	200001a8 	.word	0x200001a8
 8007028:	200000a4 	.word	0x200000a4
 800702c:	20000160 	.word	0x20000160
 8007030:	200000a0 	.word	0x200000a0
 8007034:	200001b4 	.word	0x200001b4

08007038 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <vTaskInternalSetTimeOutState+0x24>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <vTaskInternalSetTimeOutState+0x28>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	605a      	str	r2, [r3, #4]
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	200001b8 	.word	0x200001b8
 8007060:	200001a4 	.word	0x200001a4

08007064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <xTaskCheckForTimeOut+0x24>
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	e7fe      	b.n	8007086 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <xTaskCheckForTimeOut+0x3e>
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	e7fe      	b.n	80070a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80070a2:	f000 fb53 	bl	800774c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070a6:	4b1d      	ldr	r3, [pc, #116]	; (800711c <xTaskCheckForTimeOut+0xb8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d102      	bne.n	80070c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	e023      	b.n	800710e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4b15      	ldr	r3, [pc, #84]	; (8007120 <xTaskCheckForTimeOut+0xbc>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d007      	beq.n	80070e2 <xTaskCheckForTimeOut+0x7e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d302      	bcc.n	80070e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070dc:	2301      	movs	r3, #1
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e015      	b.n	800710e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d20b      	bcs.n	8007104 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff ff9d 	bl	8007038 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
 8007102:	e004      	b.n	800710e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800710a:	2301      	movs	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800710e:	f000 fb4b 	bl	80077a8 <vPortExitCritical>

	return xReturn;
 8007112:	69fb      	ldr	r3, [r7, #28]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	200001a4 	.word	0x200001a4
 8007120:	200001b8 	.word	0x200001b8

08007124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007128:	4b03      	ldr	r3, [pc, #12]	; (8007138 <vTaskMissedYield+0x14>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	200001b4 	.word	0x200001b4

0800713c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007144:	f000 f852 	bl	80071ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <prvIdleTask+0x28>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d9f9      	bls.n	8007144 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007150:	4b05      	ldr	r3, [pc, #20]	; (8007168 <prvIdleTask+0x2c>)
 8007152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007160:	e7f0      	b.n	8007144 <prvIdleTask+0x8>
 8007162:	bf00      	nop
 8007164:	200000a4 	.word	0x200000a4
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007172:	2300      	movs	r3, #0
 8007174:	607b      	str	r3, [r7, #4]
 8007176:	e00c      	b.n	8007192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4a12      	ldr	r2, [pc, #72]	; (80071cc <prvInitialiseTaskLists+0x60>)
 8007184:	4413      	add	r3, r2
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fef1 	bl	8005f6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3301      	adds	r3, #1
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d9ef      	bls.n	8007178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007198:	480d      	ldr	r0, [pc, #52]	; (80071d0 <prvInitialiseTaskLists+0x64>)
 800719a:	f7fe fee8 	bl	8005f6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800719e:	480d      	ldr	r0, [pc, #52]	; (80071d4 <prvInitialiseTaskLists+0x68>)
 80071a0:	f7fe fee5 	bl	8005f6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071a4:	480c      	ldr	r0, [pc, #48]	; (80071d8 <prvInitialiseTaskLists+0x6c>)
 80071a6:	f7fe fee2 	bl	8005f6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071aa:	480c      	ldr	r0, [pc, #48]	; (80071dc <prvInitialiseTaskLists+0x70>)
 80071ac:	f7fe fedf 	bl	8005f6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071b0:	480b      	ldr	r0, [pc, #44]	; (80071e0 <prvInitialiseTaskLists+0x74>)
 80071b2:	f7fe fedc 	bl	8005f6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071b6:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <prvInitialiseTaskLists+0x78>)
 80071b8:	4a05      	ldr	r2, [pc, #20]	; (80071d0 <prvInitialiseTaskLists+0x64>)
 80071ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <prvInitialiseTaskLists+0x7c>)
 80071be:	4a05      	ldr	r2, [pc, #20]	; (80071d4 <prvInitialiseTaskLists+0x68>)
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200000a4 	.word	0x200000a4
 80071d0:	20000130 	.word	0x20000130
 80071d4:	20000144 	.word	0x20000144
 80071d8:	20000160 	.word	0x20000160
 80071dc:	20000174 	.word	0x20000174
 80071e0:	2000018c 	.word	0x2000018c
 80071e4:	20000158 	.word	0x20000158
 80071e8:	2000015c 	.word	0x2000015c

080071ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071f2:	e019      	b.n	8007228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071f4:	f000 faaa 	bl	800774c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071f8:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <prvCheckTasksWaitingTermination+0x4c>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3304      	adds	r3, #4
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe ff3c 	bl	8006082 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800720a:	4b0c      	ldr	r3, [pc, #48]	; (800723c <prvCheckTasksWaitingTermination+0x50>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3b01      	subs	r3, #1
 8007210:	4a0a      	ldr	r2, [pc, #40]	; (800723c <prvCheckTasksWaitingTermination+0x50>)
 8007212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007214:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <prvCheckTasksWaitingTermination+0x54>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3b01      	subs	r3, #1
 800721a:	4a09      	ldr	r2, [pc, #36]	; (8007240 <prvCheckTasksWaitingTermination+0x54>)
 800721c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800721e:	f000 fac3 	bl	80077a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f80e 	bl	8007244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <prvCheckTasksWaitingTermination+0x54>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e1      	bne.n	80071f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000174 	.word	0x20000174
 800723c:	200001a0 	.word	0x200001a0
 8007240:	20000188 	.word	0x20000188

08007244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fc14 	bl	8007a88 <vPortFree>
				vPortFree( pxTCB );
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc11 	bl	8007a88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007266:	e017      	b.n	8007298 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800726e:	2b01      	cmp	r3, #1
 8007270:	d103      	bne.n	800727a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fc08 	bl	8007a88 <vPortFree>
	}
 8007278:	e00e      	b.n	8007298 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007280:	2b02      	cmp	r3, #2
 8007282:	d009      	beq.n	8007298 <prvDeleteTCB+0x54>
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e7fe      	b.n	8007296 <prvDeleteTCB+0x52>
	}
 8007298:	bf00      	nop
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072a6:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <prvResetNextTaskUnblockTime+0x44>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <prvResetNextTaskUnblockTime+0x14>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e000      	b.n	80072b6 <prvResetNextTaskUnblockTime+0x16>
 80072b4:	2300      	movs	r3, #0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d004      	beq.n	80072c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <prvResetNextTaskUnblockTime+0x48>)
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072c2:	e008      	b.n	80072d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <prvResetNextTaskUnblockTime+0x44>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4a05      	ldr	r2, [pc, #20]	; (80072e8 <prvResetNextTaskUnblockTime+0x48>)
 80072d4:	6013      	str	r3, [r2, #0]
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20000158 	.word	0x20000158
 80072e8:	200001c0 	.word	0x200001c0

080072ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072f2:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <xTaskGetSchedulerState+0x34>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072fa:	2301      	movs	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	e008      	b.n	8007312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007300:	4b08      	ldr	r3, [pc, #32]	; (8007324 <xTaskGetSchedulerState+0x38>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007308:	2302      	movs	r3, #2
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e001      	b.n	8007312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007312:	687b      	ldr	r3, [r7, #4]
	}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	200001ac 	.word	0x200001ac
 8007324:	200001c8 	.word	0x200001c8

08007328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d06c      	beq.n	8007418 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800733e:	4b39      	ldr	r3, [pc, #228]	; (8007424 <xTaskPriorityDisinherit+0xfc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	429a      	cmp	r2, r3
 8007346:	d009      	beq.n	800735c <xTaskPriorityDisinherit+0x34>
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e7fe      	b.n	800735a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <xTaskPriorityDisinherit+0x50>
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	e7fe      	b.n	8007376 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737c:	1e5a      	subs	r2, r3, #1
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	429a      	cmp	r2, r3
 800738c:	d044      	beq.n	8007418 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007392:	2b00      	cmp	r3, #0
 8007394:	d140      	bne.n	8007418 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fe71 	bl	8006082 <uxListRemove>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d115      	bne.n	80073d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	491f      	ldr	r1, [pc, #124]	; (8007428 <xTaskPriorityDisinherit+0x100>)
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xTaskPriorityDisinherit+0xaa>
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	2201      	movs	r2, #1
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43da      	mvns	r2, r3
 80073c8:	4b18      	ldr	r3, [pc, #96]	; (800742c <xTaskPriorityDisinherit+0x104>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4013      	ands	r3, r2
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <xTaskPriorityDisinherit+0x104>)
 80073d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	f1c3 0207 	rsb	r2, r3, #7
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	2201      	movs	r2, #1
 80073ec:	409a      	lsls	r2, r3
 80073ee:	4b0f      	ldr	r3, [pc, #60]	; (800742c <xTaskPriorityDisinherit+0x104>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	4a0d      	ldr	r2, [pc, #52]	; (800742c <xTaskPriorityDisinherit+0x104>)
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4a08      	ldr	r2, [pc, #32]	; (8007428 <xTaskPriorityDisinherit+0x100>)
 8007406:	441a      	add	r2, r3
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7fe fdda 	bl	8005fc8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007418:	697b      	ldr	r3, [r7, #20]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	200000a0 	.word	0x200000a0
 8007428:	200000a4 	.word	0x200000a4
 800742c:	200001a8 	.word	0x200001a8

08007430 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800743a:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007440:	4b28      	ldr	r3, [pc, #160]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3304      	adds	r3, #4
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fe1b 	bl	8006082 <uxListRemove>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	2201      	movs	r2, #1
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	43da      	mvns	r2, r3
 8007460:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4013      	ands	r3, r2
 8007466:	4a20      	ldr	r2, [pc, #128]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007468:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d10a      	bne.n	8007488 <prvAddCurrentTaskToDelayedList+0x58>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3304      	adds	r3, #4
 800747e:	4619      	mov	r1, r3
 8007480:	481a      	ldr	r0, [pc, #104]	; (80074ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8007482:	f7fe fda1 	bl	8005fc8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007486:	e026      	b.n	80074d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007490:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	429a      	cmp	r2, r3
 800749e:	d209      	bcs.n	80074b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fe fdaf 	bl	8006010 <vListInsert>
}
 80074b2:	e010      	b.n	80074d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074b4:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3304      	adds	r3, #4
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7fe fda5 	bl	8006010 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d202      	bcs.n	80074d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074d0:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6013      	str	r3, [r2, #0]
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200001a4 	.word	0x200001a4
 80074e4:	200000a0 	.word	0x200000a0
 80074e8:	200001a8 	.word	0x200001a8
 80074ec:	2000018c 	.word	0x2000018c
 80074f0:	2000015c 	.word	0x2000015c
 80074f4:	20000158 	.word	0x20000158
 80074f8:	200001c0 	.word	0x200001c0

080074fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3b04      	subs	r3, #4
 800750c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3b04      	subs	r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3b04      	subs	r3, #4
 800752a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800752c:	4a0c      	ldr	r2, [pc, #48]	; (8007560 <pxPortInitialiseStack+0x64>)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3b14      	subs	r3, #20
 8007536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3b04      	subs	r3, #4
 8007542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f06f 0202 	mvn.w	r2, #2
 800754a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3b20      	subs	r3, #32
 8007550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	08007565 	.word	0x08007565

08007564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <prvTaskExitError+0x50>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d009      	beq.n	800758c <prvTaskExitError+0x28>
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e7fe      	b.n	800758a <prvTaskExitError+0x26>
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800759e:	bf00      	nop
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0fc      	beq.n	80075a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000004 	.word	0x20000004
	...

080075c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <pxCurrentTCBConst2>)
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f380 8809 	msr	PSP, r0
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	4770      	bx	lr
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst2>:
 80075e0:	200000a0 	.word	0x200000a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075e8:	4808      	ldr	r0, [pc, #32]	; (800760c <prvPortStartFirstTask+0x24>)
 80075ea:	6800      	ldr	r0, [r0, #0]
 80075ec:	6800      	ldr	r0, [r0, #0]
 80075ee:	f380 8808 	msr	MSP, r0
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f380 8814 	msr	CONTROL, r0
 80075fa:	b662      	cpsie	i
 80075fc:	b661      	cpsie	f
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	df00      	svc	0
 8007608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800760a:	bf00      	nop
 800760c:	e000ed08 	.word	0xe000ed08

08007610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007616:	4b44      	ldr	r3, [pc, #272]	; (8007728 <xPortStartScheduler+0x118>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a44      	ldr	r2, [pc, #272]	; (800772c <xPortStartScheduler+0x11c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d109      	bne.n	8007634 <xPortStartScheduler+0x24>
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	e7fe      	b.n	8007632 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007634:	4b3c      	ldr	r3, [pc, #240]	; (8007728 <xPortStartScheduler+0x118>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a3d      	ldr	r2, [pc, #244]	; (8007730 <xPortStartScheduler+0x120>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d109      	bne.n	8007652 <xPortStartScheduler+0x42>
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	e7fe      	b.n	8007650 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007652:	4b38      	ldr	r3, [pc, #224]	; (8007734 <xPortStartScheduler+0x124>)
 8007654:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	22ff      	movs	r2, #255	; 0xff
 8007662:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4b30      	ldr	r3, [pc, #192]	; (8007738 <xPortStartScheduler+0x128>)
 8007678:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <xPortStartScheduler+0x12c>)
 800767c:	2207      	movs	r2, #7
 800767e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007680:	e009      	b.n	8007696 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007682:	4b2e      	ldr	r3, [pc, #184]	; (800773c <xPortStartScheduler+0x12c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3b01      	subs	r3, #1
 8007688:	4a2c      	ldr	r2, [pc, #176]	; (800773c <xPortStartScheduler+0x12c>)
 800768a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d0ef      	beq.n	8007682 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <xPortStartScheduler+0x12c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1c3 0307 	rsb	r3, r3, #7
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d009      	beq.n	80076c2 <xPortStartScheduler+0xb2>
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	60bb      	str	r3, [r7, #8]
 80076c0:	e7fe      	b.n	80076c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076c2:	4b1e      	ldr	r3, [pc, #120]	; (800773c <xPortStartScheduler+0x12c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	4a1c      	ldr	r2, [pc, #112]	; (800773c <xPortStartScheduler+0x12c>)
 80076ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076cc:	4b1b      	ldr	r3, [pc, #108]	; (800773c <xPortStartScheduler+0x12c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <xPortStartScheduler+0x12c>)
 80076d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <xPortStartScheduler+0x130>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <xPortStartScheduler+0x130>)
 80076e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <xPortStartScheduler+0x130>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <xPortStartScheduler+0x130>)
 80076f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076f8:	f000 f8d6 	bl	80078a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076fc:	4b11      	ldr	r3, [pc, #68]	; (8007744 <xPortStartScheduler+0x134>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007702:	f000 f8f5 	bl	80078f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <xPortStartScheduler+0x138>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a0f      	ldr	r2, [pc, #60]	; (8007748 <xPortStartScheduler+0x138>)
 800770c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007710:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007712:	f7ff ff69 	bl	80075e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007716:	f7ff fbaf 	bl	8006e78 <vTaskSwitchContext>
	prvTaskExitError();
 800771a:	f7ff ff23 	bl	8007564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000ed00 	.word	0xe000ed00
 800772c:	410fc271 	.word	0x410fc271
 8007730:	410fc270 	.word	0x410fc270
 8007734:	e000e400 	.word	0xe000e400
 8007738:	200001cc 	.word	0x200001cc
 800773c:	200001d0 	.word	0x200001d0
 8007740:	e000ed20 	.word	0xe000ed20
 8007744:	20000004 	.word	0x20000004
 8007748:	e000ef34 	.word	0xe000ef34

0800774c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <vPortEnterCritical+0x54>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	4a0d      	ldr	r2, [pc, #52]	; (80077a0 <vPortEnterCritical+0x54>)
 800776c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800776e:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <vPortEnterCritical+0x54>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d10e      	bne.n	8007794 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007776:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <vPortEnterCritical+0x58>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <vPortEnterCritical+0x48>
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	e7fe      	b.n	8007792 <vPortEnterCritical+0x46>
	}
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	20000004 	.word	0x20000004
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <vPortExitCritical+0x4c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <vPortExitCritical+0x22>
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	e7fe      	b.n	80077c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80077ca:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <vPortExitCritical+0x4c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	4a08      	ldr	r2, [pc, #32]	; (80077f4 <vPortExitCritical+0x4c>)
 80077d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077d4:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <vPortExitCritical+0x4c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <vPortExitCritical+0x3e>
 80077dc:	2300      	movs	r3, #0
 80077de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000004 	.word	0x20000004
	...

08007800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007800:	f3ef 8009 	mrs	r0, PSP
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <pxCurrentTCBConst>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	f01e 0f10 	tst.w	lr, #16
 8007810:	bf08      	it	eq
 8007812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007824:	f380 8811 	msr	BASEPRI, r0
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f7ff fb22 	bl	8006e78 <vTaskSwitchContext>
 8007834:	f04f 0000 	mov.w	r0, #0
 8007838:	f380 8811 	msr	BASEPRI, r0
 800783c:	bc09      	pop	{r0, r3}
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	6808      	ldr	r0, [r1, #0]
 8007842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007846:	f01e 0f10 	tst.w	lr, #16
 800784a:	bf08      	it	eq
 800784c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007850:	f380 8809 	msr	PSP, r0
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst>:
 8007860:	200000a0 	.word	0x200000a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007880:	f7ff fa3e 	bl	8006d00 <xTaskIncrementTick>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800788a:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <SysTick_Handler+0x3c>)
 800788c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <vPortSetupTimerInterrupt+0x34>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <vPortSetupTimerInterrupt+0x38>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <vPortSetupTimerInterrupt+0x3c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a0a      	ldr	r2, [pc, #40]	; (80078e8 <vPortSetupTimerInterrupt+0x40>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	4a09      	ldr	r2, [pc, #36]	; (80078ec <vPortSetupTimerInterrupt+0x44>)
 80078c6:	3b01      	subs	r3, #1
 80078c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <vPortSetupTimerInterrupt+0x34>)
 80078cc:	2207      	movs	r2, #7
 80078ce:	601a      	str	r2, [r3, #0]
}
 80078d0:	bf00      	nop
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	e000e010 	.word	0xe000e010
 80078e0:	e000e018 	.word	0xe000e018
 80078e4:	2000001c 	.word	0x2000001c
 80078e8:	10624dd3 	.word	0x10624dd3
 80078ec:	e000e014 	.word	0xe000e014

080078f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007900 <vPortEnableVFP+0x10>
 80078f4:	6801      	ldr	r1, [r0, #0]
 80078f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078fa:	6001      	str	r1, [r0, #0]
 80078fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078fe:	bf00      	nop
 8007900:	e000ed88 	.word	0xe000ed88

08007904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	; 0x28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007910:	f7ff f94c 	bl	8006bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007914:	4b57      	ldr	r3, [pc, #348]	; (8007a74 <pvPortMalloc+0x170>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800791c:	f000 f90c 	bl	8007b38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007920:	4b55      	ldr	r3, [pc, #340]	; (8007a78 <pvPortMalloc+0x174>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4013      	ands	r3, r2
 8007928:	2b00      	cmp	r3, #0
 800792a:	f040 808c 	bne.w	8007a46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01c      	beq.n	800796e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007934:	2208      	movs	r2, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	2b00      	cmp	r3, #0
 8007944:	d013      	beq.n	800796e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f023 0307 	bic.w	r3, r3, #7
 800794c:	3308      	adds	r3, #8
 800794e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <pvPortMalloc+0x6a>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	e7fe      	b.n	800796c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d068      	beq.n	8007a46 <pvPortMalloc+0x142>
 8007974:	4b41      	ldr	r3, [pc, #260]	; (8007a7c <pvPortMalloc+0x178>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d863      	bhi.n	8007a46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800797e:	4b40      	ldr	r3, [pc, #256]	; (8007a80 <pvPortMalloc+0x17c>)
 8007980:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007982:	4b3f      	ldr	r3, [pc, #252]	; (8007a80 <pvPortMalloc+0x17c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007988:	e004      	b.n	8007994 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	d903      	bls.n	80079a6 <pvPortMalloc+0xa2>
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f1      	bne.n	800798a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079a6:	4b33      	ldr	r3, [pc, #204]	; (8007a74 <pvPortMalloc+0x170>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d04a      	beq.n	8007a46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	4413      	add	r3, r2
 80079b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	2308      	movs	r3, #8
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d91e      	bls.n	8007a10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <pvPortMalloc+0xf4>
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	e7fe      	b.n	80079f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a0a:	69b8      	ldr	r0, [r7, #24]
 8007a0c:	f000 f8f6 	bl	8007bfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <pvPortMalloc+0x178>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <pvPortMalloc+0x178>)
 8007a1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a1e:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <pvPortMalloc+0x178>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <pvPortMalloc+0x180>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d203      	bcs.n	8007a32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a2a:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <pvPortMalloc+0x178>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <pvPortMalloc+0x180>)
 8007a30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <pvPortMalloc+0x174>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a46:	f7ff f8bf 	bl	8006bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d009      	beq.n	8007a68 <pvPortMalloc+0x164>
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e7fe      	b.n	8007a66 <pvPortMalloc+0x162>
	return pvReturn;
 8007a68:	69fb      	ldr	r3, [r7, #28]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3728      	adds	r7, #40	; 0x28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20003ddc 	.word	0x20003ddc
 8007a78:	20003de8 	.word	0x20003de8
 8007a7c:	20003de0 	.word	0x20003de0
 8007a80:	20003dd4 	.word	0x20003dd4
 8007a84:	20003de4 	.word	0x20003de4

08007a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d046      	beq.n	8007b28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	425b      	negs	r3, r3
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <vPortFree+0xa8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <vPortFree+0x42>
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	e7fe      	b.n	8007ac8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <vPortFree+0x5e>
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60bb      	str	r3, [r7, #8]
 8007ae4:	e7fe      	b.n	8007ae4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <vPortFree+0xa8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d019      	beq.n	8007b28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d115      	bne.n	8007b28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <vPortFree+0xa8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b0c:	f7ff f84e 	bl	8006bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <vPortFree+0xac>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4413      	add	r3, r2
 8007b1a:	4a06      	ldr	r2, [pc, #24]	; (8007b34 <vPortFree+0xac>)
 8007b1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b1e:	6938      	ldr	r0, [r7, #16]
 8007b20:	f000 f86c 	bl	8007bfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b24:	f7ff f850 	bl	8006bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b28:	bf00      	nop
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20003de8 	.word	0x20003de8
 8007b34:	20003de0 	.word	0x20003de0

08007b38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b44:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <prvHeapInit+0xac>)
 8007b46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3307      	adds	r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	4a1f      	ldr	r2, [pc, #124]	; (8007be4 <prvHeapInit+0xac>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b70:	4a1d      	ldr	r2, [pc, #116]	; (8007be8 <prvHeapInit+0xb0>)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b76:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <prvHeapInit+0xb0>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4413      	add	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b84:	2208      	movs	r2, #8
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <prvHeapInit+0xb4>)
 8007b98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <prvHeapInit+0xb4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <prvHeapInit+0xb4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <prvHeapInit+0xb4>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <prvHeapInit+0xb8>)
 8007bc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <prvHeapInit+0xbc>)
 8007bce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <prvHeapInit+0xc0>)
 8007bd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bd6:	601a      	str	r2, [r3, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	200001d4 	.word	0x200001d4
 8007be8:	20003dd4 	.word	0x20003dd4
 8007bec:	20003ddc 	.word	0x20003ddc
 8007bf0:	20003de4 	.word	0x20003de4
 8007bf4:	20003de0 	.word	0x20003de0
 8007bf8:	20003de8 	.word	0x20003de8

08007bfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c04:	4b28      	ldr	r3, [pc, #160]	; (8007ca8 <prvInsertBlockIntoFreeList+0xac>)
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e002      	b.n	8007c10 <prvInsertBlockIntoFreeList+0x14>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d8f7      	bhi.n	8007c0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	4413      	add	r3, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d108      	bne.n	8007c3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	441a      	add	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d118      	bne.n	8007c84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b15      	ldr	r3, [pc, #84]	; (8007cac <prvInsertBlockIntoFreeList+0xb0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d00d      	beq.n	8007c7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	441a      	add	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	e008      	b.n	8007c8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c7a:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <prvInsertBlockIntoFreeList+0xb0>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e003      	b.n	8007c8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d002      	beq.n	8007c9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	20003dd4 	.word	0x20003dd4
 8007cac:	20003ddc 	.word	0x20003ddc

08007cb0 <fan_init>:
#define highSp		50
int current_fan1_speed = lowSp;		//Luu toc do hien tai cua dong co 1, ban dau: off
int current_fan2_speed = lowSp;		//Luu toc do hien tai cua dong co 2, ban dau: off
int softStartTime = 30;

void fan_init(){
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b092      	sub	sp, #72	; 0x48
 8007cb4:	af00      	add	r7, sp, #0
  //Copy from CubeMX
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	609a      	str	r2, [r3, #8]
 8007ccc:	60da      	str	r2, [r3, #12]
 8007cce:	611a      	str	r2, [r3, #16]
 8007cd0:	615a      	str	r2, [r3, #20]
 8007cd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007cd4:	1d3b      	adds	r3, r7, #4
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f004 fc23 	bl	800c526 <memset>

  htim1.Instance = TIM1;
 8007ce0:	4b41      	ldr	r3, [pc, #260]	; (8007de8 <fan_init+0x138>)
 8007ce2:	4a42      	ldr	r2, [pc, #264]	; (8007dec <fan_init+0x13c>)
 8007ce4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8007ce6:	4b40      	ldr	r3, [pc, #256]	; (8007de8 <fan_init+0x138>)
 8007ce8:	2254      	movs	r2, #84	; 0x54
 8007cea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cec:	4b3e      	ldr	r3, [pc, #248]	; (8007de8 <fan_init+0x138>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8007cf2:	4b3d      	ldr	r3, [pc, #244]	; (8007de8 <fan_init+0x138>)
 8007cf4:	2264      	movs	r2, #100	; 0x64
 8007cf6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cf8:	4b3b      	ldr	r3, [pc, #236]	; (8007de8 <fan_init+0x138>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007cfe:	4b3a      	ldr	r3, [pc, #232]	; (8007de8 <fan_init+0x138>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d04:	4b38      	ldr	r3, [pc, #224]	; (8007de8 <fan_init+0x138>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007d0a:	4837      	ldr	r0, [pc, #220]	; (8007de8 <fan_init+0x138>)
 8007d0c:	f7fc fc55 	bl	80045ba <HAL_TIM_PWM_Init>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <fan_init+0x6a>
  {
    Error_Handler();
 8007d16:	f002 fa43 	bl	800a1a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007d22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007d26:	4619      	mov	r1, r3
 8007d28:	482f      	ldr	r0, [pc, #188]	; (8007de8 <fan_init+0x138>)
 8007d2a:	f7fd fa1c 	bl	8005166 <HAL_TIMEx_MasterConfigSynchronization>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <fan_init+0x88>
  {
    Error_Handler();
 8007d34:	f002 fa34 	bl	800a1a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d38:	2360      	movs	r3, #96	; 0x60
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007d44:	2300      	movs	r3, #0
 8007d46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007d50:	2300      	movs	r3, #0
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4822      	ldr	r0, [pc, #136]	; (8007de8 <fan_init+0x138>)
 8007d5e:	f7fc fd91 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <fan_init+0xbc>
  {
    Error_Handler();
 8007d68:	f002 fa1a 	bl	800a1a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d70:	220c      	movs	r2, #12
 8007d72:	4619      	mov	r1, r3
 8007d74:	481c      	ldr	r0, [pc, #112]	; (8007de8 <fan_init+0x138>)
 8007d76:	f7fc fd85 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <fan_init+0xd4>
  {
    Error_Handler();
 8007d80:	f002 fa0e 	bl	800a1a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007d84:	2300      	movs	r3, #0
 8007d86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007da2:	1d3b      	adds	r3, r7, #4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4810      	ldr	r0, [pc, #64]	; (8007de8 <fan_init+0x138>)
 8007da8:	f7fd fa22 	bl	80051f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <fan_init+0x106>
  {
    Error_Handler();
 8007db2:	f002 f9f5 	bl	800a1a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007db6:	480c      	ldr	r0, [pc, #48]	; (8007de8 <fan_init+0x138>)
 8007db8:	f003 f908 	bl	800afcc <HAL_TIM_MspPostInit>
  //End copy from CubeMX
  
  /* PWM1 and PWM2 set */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	480a      	ldr	r0, [pc, #40]	; (8007de8 <fan_init+0x138>)
 8007dc0:	f7fc fc26 	bl	8004610 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8007dc4:	210c      	movs	r1, #12
 8007dc6:	4808      	ldr	r0, [pc, #32]	; (8007de8 <fan_init+0x138>)
 8007dc8:	f7fc fc22 	bl	8004610 <HAL_TIM_PWM_Start>

  fan_1_stop();
 8007dcc:	f000 f814 	bl	8007df8 <fan_1_stop>
  fan_2_stop();
 8007dd0:	f000 f824 	bl	8007e1c <fan_2_stop>
  current_fan1_speed = 0;
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <fan_init+0x140>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
  current_fan2_speed = 0;
 8007dda:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <fan_init+0x144>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3748      	adds	r7, #72	; 0x48
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	200044d8 	.word	0x200044d8
 8007dec:	40010000 	.word	0x40010000
 8007df0:	20000008 	.word	0x20000008
 8007df4:	2000000c 	.word	0x2000000c

08007df8 <fan_1_stop>:


void fan_1_stop(){
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
//  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); dau ra bi floating point
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);	//Do thiet ke mach dang de keo len
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <fan_1_stop+0x1c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2264      	movs	r2, #100	; 0x64
 8007e02:	635a      	str	r2, [r3, #52]	; 0x34
	current_fan1_speed = lowSp;
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <fan_1_stop+0x20>)
 8007e06:	2214      	movs	r2, #20
 8007e08:	601a      	str	r2, [r3, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	200044d8 	.word	0x200044d8
 8007e18:	20000008 	.word	0x20000008

08007e1c <fan_2_stop>:
  }

  current_fan1_speed = level;
}

void fan_2_stop(){
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <fan_2_stop+0x1c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2264      	movs	r2, #100	; 0x64
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
	current_fan2_speed = lowSp;
 8007e28:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <fan_2_stop+0x20>)
 8007e2a:	2214      	movs	r2, #20
 8007e2c:	601a      	str	r2, [r3, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	200044d8 	.word	0x200044d8
 8007e3c:	2000000c 	.word	0x2000000c

08007e40 <fan_12_run>:
	  }

	  current_fan2_speed = level;
}

void fan_12_run(uint8_t level){
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
  if(level != current_fan1_speed){		//Neu truyen vao toc do khac voi hien tai
 8007e4a:	79fa      	ldrb	r2, [r7, #7]
 8007e4c:	4b25      	ldr	r3, [pc, #148]	; (8007ee4 <fan_12_run+0xa4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d03d      	beq.n	8007ed0 <fan_12_run+0x90>
	  if(level > current_fan1_speed){	//truyen vao > hien tai
 8007e54:	79fa      	ldrb	r2, [r7, #7]
 8007e56:	4b23      	ldr	r3, [pc, #140]	; (8007ee4 <fan_12_run+0xa4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	dd1c      	ble.n	8007e98 <fan_12_run+0x58>
		  for(int i = current_fan1_speed; i < level; i++){
 8007e5e:	4b21      	ldr	r3, [pc, #132]	; (8007ee4 <fan_12_run+0xa4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e013      	b.n	8007e8e <fan_12_run+0x4e>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100 - i);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8007e6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ee8 <fan_12_run+0xa8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100 - i);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8007e78:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <fan_12_run+0xa8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(softStartTime);
 8007e7e:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <fan_12_run+0xac>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f8 fdaa 	bl	80009dc <HAL_Delay>
		  for(int i = current_fan1_speed; i < level; i++){
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	dbe7      	blt.n	8007e66 <fan_12_run+0x26>
 8007e96:	e01b      	b.n	8007ed0 <fan_12_run+0x90>
		  }
	  }
	  else {							//truyen vao < hien tai
		  for(int i = current_fan1_speed; i > level; i--){
 8007e98:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <fan_12_run+0xa4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
 8007e9e:	e013      	b.n	8007ec8 <fan_12_run+0x88>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100 - i);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <fan_12_run+0xa8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100 - i);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <fan_12_run+0xa8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(softStartTime);
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <fan_12_run+0xac>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f8 fd8d 	bl	80009dc <HAL_Delay>
		  for(int i = current_fan1_speed; i > level; i--){
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	60bb      	str	r3, [r7, #8]
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	dce7      	bgt.n	8007ea0 <fan_12_run+0x60>
		  }
	  }
  }

  current_fan1_speed = level;
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <fan_12_run+0xa4>)
 8007ed4:	6013      	str	r3, [r2, #0]
  current_fan2_speed = level;
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	4a05      	ldr	r2, [pc, #20]	; (8007ef0 <fan_12_run+0xb0>)
 8007eda:	6013      	str	r3, [r2, #0]
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000008 	.word	0x20000008
 8007ee8:	200044d8 	.word	0x200044d8
 8007eec:	20000010 	.word	0x20000010
 8007ef0:	2000000c 	.word	0x2000000c

08007ef4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a07      	ldr	r2, [pc, #28]	; (8007f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4a06      	ldr	r2, [pc, #24]	; (8007f24 <vApplicationGetIdleTaskMemory+0x30>)
 8007f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2280      	movs	r2, #128	; 0x80
 8007f10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20003dec 	.word	0x20003dec
 8007f24:	20003e40 	.word	0x20003e40

08007f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f28:	b5b0      	push	{r4, r5, r7, lr}
 8007f2a:	b0ae      	sub	sp, #184	; 0xb8
 8007f2c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007f2e:	f7f8 fd13 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f32:	f000 f94d 	bl	80081d0 <SystemClock_Config>




  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f36:	f000 fbc1 	bl	80086bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8007f3a:	f000 f9b1 	bl	80082a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8007f3e:	f000 f9dd 	bl	80082fc <MX_SPI2_Init>
  MX_TIM1_Init();
 8007f42:	f000 fa11 	bl	8008368 <MX_TIM1_Init>
  MX_TIM2_Init();
 8007f46:	f000 fa9d 	bl	8008484 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007f4a:	f000 fb29 	bl	80085a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8007f4e:	f000 fb8b 	bl	8008668 <MX_USART1_UART_Init>
  sensirion_i2c_init();
 8007f52:	f002 fb0f 	bl	800a574 <sensirion_i2c_init>
  tft_init();
 8007f56:	f003 faff 	bl	800b558 <tft_init>
  fan_init();
 8007f5a:	f7ff fea9 	bl	8007cb0 <fan_init>


  /* USER CODE BEGIN 2 */
   tft_puts_image(vht1);
 8007f5e:	487b      	ldr	r0, [pc, #492]	; (800814c <main+0x224>)
 8007f60:	f003 ff5a 	bl	800be18 <tft_puts_image>
   HAL_Delay(3000);
 8007f64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007f68:	f7f8 fd38 	bl	80009dc <HAL_Delay>
   tft_fill(0,0,320,240,BLACK);
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	23f0      	movs	r3, #240	; 0xf0
 8007f72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007f76:	2100      	movs	r1, #0
 8007f78:	2000      	movs	r0, #0
 8007f7a:	f003 fec1 	bl	800bd00 <tft_fill>
   POINT_COLOR=CYAN;
 8007f7e:	4b74      	ldr	r3, [pc, #464]	; (8008150 <main+0x228>)
 8007f80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007f84:	801a      	strh	r2, [r3, #0]
   tft_puts26x48(58,3,(int8_t*)" Viettel",TFT_STRING_MODE_NO_BACKGROUND);
 8007f86:	2301      	movs	r3, #1
 8007f88:	4a72      	ldr	r2, [pc, #456]	; (8008154 <main+0x22c>)
 8007f8a:	2103      	movs	r1, #3
 8007f8c:	203a      	movs	r0, #58	; 0x3a
 8007f8e:	f003 fce9 	bl	800b964 <tft_puts26x48>
   tft_puts26x48(58,5,(int8_t*)" Viettel",TFT_STRING_MODE_NO_BACKGROUND);
 8007f92:	2301      	movs	r3, #1
 8007f94:	4a6f      	ldr	r2, [pc, #444]	; (8008154 <main+0x22c>)
 8007f96:	2105      	movs	r1, #5
 8007f98:	203a      	movs	r0, #58	; 0x3a
 8007f9a:	f003 fce3 	bl	800b964 <tft_puts26x48>
   tft_puts18x32(114,3,(int8_t*)"   MEDICAL",TFT_STRING_MODE_NO_BACKGROUND);
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	4a6d      	ldr	r2, [pc, #436]	; (8008158 <main+0x230>)
 8007fa2:	2103      	movs	r1, #3
 8007fa4:	2072      	movs	r0, #114	; 0x72
 8007fa6:	f003 fc9f 	bl	800b8e8 <tft_puts18x32>
   tft_puts18x32(160,3,(int8_t*)"   PRODUCTS",TFT_STRING_MODE_NO_BACKGROUND);
 8007faa:	2301      	movs	r3, #1
 8007fac:	4a6b      	ldr	r2, [pc, #428]	; (800815c <main+0x234>)
 8007fae:	2103      	movs	r1, #3
 8007fb0:	20a0      	movs	r0, #160	; 0xa0
 8007fb2:	f003 fc99 	bl	800b8e8 <tft_puts18x32>
   HAL_Delay(3000);
 8007fb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007fba:	f7f8 fd0f 	bl	80009dc <HAL_Delay>
   tft_fill(0,0,320,240,BLACK);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	23f0      	movs	r3, #240	; 0xf0
 8007fc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007fc8:	2100      	movs	r1, #0
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f003 fe98 	bl	800bd00 <tft_fill>
   /* UART */
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	4963      	ldr	r1, [pc, #396]	; (8008160 <main+0x238>)
 8007fd4:	4863      	ldr	r0, [pc, #396]	; (8008164 <main+0x23c>)
 8007fd6:	f7fd fa57 	bl	8005488 <HAL_UART_Receive_IT>
	ret = sps30_start_measurement();
 8007fda:	f002 fc40 	bl	800a85e <sps30_start_measurement>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b61      	ldr	r3, [pc, #388]	; (8008168 <main+0x240>)
 8007fe4:	801a      	strh	r2, [r3, #0]
	err = sgp30_iaq_init();
 8007fe6:	f002 fbd0 	bl	800a78a <sgp30_iaq_init>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	4b5f      	ldr	r3, [pc, #380]	; (800816c <main+0x244>)
 8007ff0:	801a      	strh	r2, [r3, #0]

	/* Code khởi tạo chế độ ban đầu */
	    // set PWM cho tốc độ động cơ quạt là trung bình
	speed = low;
 8007ff2:	4b5f      	ldr	r3, [pc, #380]	; (8008170 <main+0x248>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
	power = Power_On;
 8007ff8:	4b5e      	ldr	r3, [pc, #376]	; (8008174 <main+0x24c>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
	ctrmode = Manual;
 8007ffe:	4b5e      	ldr	r3, [pc, #376]	; (8008178 <main+0x250>)
 8008000:	2201      	movs	r2, #1
 8008002:	601a      	str	r2, [r3, #0]
	filmode = Fresh_Air;
 8008004:	4b5d      	ldr	r3, [pc, #372]	; (800817c <main+0x254>)
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
	nightmode = Nightmode_Off;
 800800a:	4b5d      	ldr	r3, [pc, #372]	; (8008180 <main+0x258>)
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
	UVmode = UVon;
 8008010:	4b5c      	ldr	r3, [pc, #368]	; (8008184 <main+0x25c>)
 8008012:	2201      	movs	r2, #1
 8008014:	601a      	str	r2, [r3, #0]
	IONmode = 0;
 8008016:	4b5c      	ldr	r3, [pc, #368]	; (8008188 <main+0x260>)
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
	ionval = 0;
 800801c:	4b5b      	ldr	r3, [pc, #364]	; (800818c <main+0x264>)
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
	BACK_COLOR=BLACK;
 8008022:	4b5b      	ldr	r3, [pc, #364]	; (8008190 <main+0x268>)
 8008024:	2200      	movs	r2, #0
 8008026:	801a      	strh	r2, [r3, #0]
	POINT_COLOR=RED;
 8008028:	4b49      	ldr	r3, [pc, #292]	; (8008150 <main+0x228>)
 800802a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800802e:	801a      	strh	r2, [r3, #0]

	fan_12_run(lowspeed);
 8008030:	2046      	movs	r0, #70	; 0x46
 8008032:	f7ff ff05 	bl	8007e40 <fan_12_run>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,GPIO_PIN_SET);
 8008036:	2201      	movs	r2, #1
 8008038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800803c:	4855      	ldr	r0, [pc, #340]	; (8008194 <main+0x26c>)
 800803e:	f7f8 ff8d 	bl	8000f5c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutexLCD */
  osMutexDef(myMutexLCD);
 8008042:	2300      	movs	r3, #0
 8008044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008048:	2300      	movs	r3, #0
 800804a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  myMutexLCDHandle = osMutexCreate(osMutex(myMutexLCD));
 800804e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008052:	4618      	mov	r0, r3
 8008054:	f7fd ff73 	bl	8005f3e <osMutexCreate>
 8008058:	4602      	mov	r2, r0
 800805a:	4b4f      	ldr	r3, [pc, #316]	; (8008198 <main+0x270>)
 800805c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  HAL_TIM_Base_Start_IT(&htim2);
 800805e:	484f      	ldr	r0, [pc, #316]	; (800819c <main+0x274>)
 8008060:	f7fc fa87 	bl	8004572 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 8008064:	4b4e      	ldr	r3, [pc, #312]	; (80081a0 <main+0x278>)
 8008066:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800806a:	461d      	mov	r5, r3
 800806c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800806e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008070:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8008078:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800807c:	2100      	movs	r1, #0
 800807e:	4618      	mov	r0, r3
 8008080:	f7fd fefd 	bl	8005e7e <osThreadCreate>
 8008084:	4602      	mov	r2, r0
 8008086:	4b47      	ldr	r3, [pc, #284]	; (80081a4 <main+0x27c>)
 8008088:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 800808a:	4b47      	ldr	r3, [pc, #284]	; (80081a8 <main+0x280>)
 800808c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8008090:	461d      	mov	r5, r3
 8008092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008096:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800809a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800809e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fd feea 	bl	8005e7e <osThreadCreate>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b3f      	ldr	r3, [pc, #252]	; (80081ac <main+0x284>)
 80080ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 80080b0:	4b3f      	ldr	r3, [pc, #252]	; (80081b0 <main+0x288>)
 80080b2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80080b6:	461d      	mov	r5, r3
 80080b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 80080c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fd fed7 	bl	8005e7e <osThreadCreate>
 80080d0:	4602      	mov	r2, r0
 80080d2:	4b38      	ldr	r3, [pc, #224]	; (80081b4 <main+0x28c>)
 80080d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 80080d6:	4b38      	ldr	r3, [pc, #224]	; (80081b8 <main+0x290>)
 80080d8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80080dc:	461d      	mov	r5, r3
 80080de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 80080ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fd fec4 	bl	8005e7e <osThreadCreate>
 80080f6:	4602      	mov	r2, r0
 80080f8:	4b30      	ldr	r3, [pc, #192]	; (80081bc <main+0x294>)
 80080fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task05 */
  osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 80080fc:	4b30      	ldr	r3, [pc, #192]	; (80081c0 <main+0x298>)
 80080fe:	f107 041c 	add.w	r4, r7, #28
 8008102:	461d      	mov	r5, r3
 8008104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800810c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task05Handle = osThreadCreate(osThread(Task05), NULL);
 8008110:	f107 031c 	add.w	r3, r7, #28
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f7fd feb1 	bl	8005e7e <osThreadCreate>
 800811c:	4602      	mov	r2, r0
 800811e:	4b29      	ldr	r3, [pc, #164]	; (80081c4 <main+0x29c>)
 8008120:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task06 */
  osThreadDef(Task06, StartTask06, osPriorityIdle, 0, 128);
 8008122:	4b29      	ldr	r3, [pc, #164]	; (80081c8 <main+0x2a0>)
 8008124:	463c      	mov	r4, r7
 8008126:	461d      	mov	r5, r3
 8008128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800812a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800812c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task06Handle = osThreadCreate(osThread(Task06), NULL);
 8008134:	463b      	mov	r3, r7
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f7fd fea0 	bl	8005e7e <osThreadCreate>
 800813e:	4602      	mov	r2, r0
 8008140:	4b22      	ldr	r3, [pc, #136]	; (80081cc <main+0x2a4>)
 8008142:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008144:	f7fd fe94 	bl	8005e70 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008148:	e7fe      	b.n	8008148 <main+0x220>
 800814a:	bf00      	nop
 800814c:	0800d0f0 	.word	0x0800d0f0
 8008150:	200048aa 	.word	0x200048aa
 8008154:	0800ce60 	.word	0x0800ce60
 8008158:	0800ce6c 	.word	0x0800ce6c
 800815c:	0800ce78 	.word	0x0800ce78
 8008160:	200041d0 	.word	0x200041d0
 8008164:	20004250 	.word	0x20004250
 8008168:	20004838 	.word	0x20004838
 800816c:	200044b8 	.word	0x200044b8
 8008170:	200045bc 	.word	0x200045bc
 8008174:	20004174 	.word	0x20004174
 8008178:	200041d8 	.word	0x200041d8
 800817c:	20004864 	.word	0x20004864
 8008180:	200044b0 	.word	0x200044b0
 8008184:	20004170 	.word	0x20004170
 8008188:	20004540 	.word	0x20004540
 800818c:	200044ac 	.word	0x200044ac
 8008190:	200048a8 	.word	0x200048a8
 8008194:	40020800 	.word	0x40020800
 8008198:	200041cc 	.word	0x200041cc
 800819c:	200047c4 	.word	0x200047c4
 80081a0:	0800ce8c 	.word	0x0800ce8c
 80081a4:	20004228 	.word	0x20004228
 80081a8:	0800ceb0 	.word	0x0800ceb0
 80081ac:	2000410c 	.word	0x2000410c
 80081b0:	0800ced4 	.word	0x0800ced4
 80081b4:	200045c0 	.word	0x200045c0
 80081b8:	0800cef8 	.word	0x0800cef8
 80081bc:	200041dc 	.word	0x200041dc
 80081c0:	0800cf1c 	.word	0x0800cf1c
 80081c4:	20004808 	.word	0x20004808
 80081c8:	0800cf40 	.word	0x0800cf40
 80081cc:	200044b4 	.word	0x200044b4

080081d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b094      	sub	sp, #80	; 0x50
 80081d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081d6:	f107 0320 	add.w	r3, r7, #32
 80081da:	2230      	movs	r2, #48	; 0x30
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f004 f9a1 	bl	800c526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081e4:	f107 030c 	add.w	r3, r7, #12
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	609a      	str	r2, [r3, #8]
 80081f0:	60da      	str	r2, [r3, #12]
 80081f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80081f4:	2300      	movs	r3, #0
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	4b27      	ldr	r3, [pc, #156]	; (8008298 <SystemClock_Config+0xc8>)
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	4a26      	ldr	r2, [pc, #152]	; (8008298 <SystemClock_Config+0xc8>)
 80081fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008202:	6413      	str	r3, [r2, #64]	; 0x40
 8008204:	4b24      	ldr	r3, [pc, #144]	; (8008298 <SystemClock_Config+0xc8>)
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008210:	2300      	movs	r3, #0
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	4b21      	ldr	r3, [pc, #132]	; (800829c <SystemClock_Config+0xcc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a20      	ldr	r2, [pc, #128]	; (800829c <SystemClock_Config+0xcc>)
 800821a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	4b1e      	ldr	r3, [pc, #120]	; (800829c <SystemClock_Config+0xcc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800822c:	2302      	movs	r3, #2
 800822e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008230:	2301      	movs	r3, #1
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008234:	2310      	movs	r3, #16
 8008236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008238:	2302      	movs	r3, #2
 800823a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800823c:	2300      	movs	r3, #0
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008240:	2310      	movs	r3, #16
 8008242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008244:	23c0      	movs	r3, #192	; 0xc0
 8008246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008248:	2302      	movs	r3, #2
 800824a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800824c:	2304      	movs	r3, #4
 800824e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008250:	f107 0320 	add.w	r3, r7, #32
 8008254:	4618      	mov	r0, r3
 8008256:	f7fb f9c3 	bl	80035e0 <HAL_RCC_OscConfig>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008260:	f001 ff9e 	bl	800a1a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008264:	230f      	movs	r3, #15
 8008266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008268:	2302      	movs	r3, #2
 800826a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008276:	2300      	movs	r3, #0
 8008278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	2103      	movs	r1, #3
 8008280:	4618      	mov	r0, r3
 8008282:	f7fb fbef 	bl	8003a64 <HAL_RCC_ClockConfig>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800828c:	f001 ff88 	bl	800a1a0 <Error_Handler>
  }
}
 8008290:	bf00      	nop
 8008292:	3750      	adds	r7, #80	; 0x50
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40023800 	.word	0x40023800
 800829c:	40007000 	.word	0x40007000

080082a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80082a4:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082a6:	4a13      	ldr	r2, [pc, #76]	; (80082f4 <MX_I2C1_Init+0x54>)
 80082a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80082aa:	4b11      	ldr	r3, [pc, #68]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082ac:	4a12      	ldr	r2, [pc, #72]	; (80082f8 <MX_I2C1_Init+0x58>)
 80082ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80082b0:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80082b6:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80082bc:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80082c4:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80082d0:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80082d6:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082d8:	2200      	movs	r2, #0
 80082da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80082dc:	4804      	ldr	r0, [pc, #16]	; (80082f0 <MX_I2C1_Init+0x50>)
 80082de:	f7f8 fe57 	bl	8000f90 <HAL_I2C_Init>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80082e8:	f001 ff5a 	bl	800a1a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80082ec:	bf00      	nop
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20004178 	.word	0x20004178
 80082f4:	40005400 	.word	0x40005400
 80082f8:	000186a0 	.word	0x000186a0

080082fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008300:	4b17      	ldr	r3, [pc, #92]	; (8008360 <MX_SPI2_Init+0x64>)
 8008302:	4a18      	ldr	r2, [pc, #96]	; (8008364 <MX_SPI2_Init+0x68>)
 8008304:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008306:	4b16      	ldr	r3, [pc, #88]	; (8008360 <MX_SPI2_Init+0x64>)
 8008308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800830c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800830e:	4b14      	ldr	r3, [pc, #80]	; (8008360 <MX_SPI2_Init+0x64>)
 8008310:	2200      	movs	r2, #0
 8008312:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008314:	4b12      	ldr	r3, [pc, #72]	; (8008360 <MX_SPI2_Init+0x64>)
 8008316:	2200      	movs	r2, #0
 8008318:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800831a:	4b11      	ldr	r3, [pc, #68]	; (8008360 <MX_SPI2_Init+0x64>)
 800831c:	2200      	movs	r2, #0
 800831e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008320:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <MX_SPI2_Init+0x64>)
 8008322:	2200      	movs	r2, #0
 8008324:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008326:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <MX_SPI2_Init+0x64>)
 8008328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800832c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <MX_SPI2_Init+0x64>)
 8008330:	2200      	movs	r2, #0
 8008332:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008334:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <MX_SPI2_Init+0x64>)
 8008336:	2200      	movs	r2, #0
 8008338:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <MX_SPI2_Init+0x64>)
 800833c:	2200      	movs	r2, #0
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <MX_SPI2_Init+0x64>)
 8008342:	2200      	movs	r2, #0
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008346:	4b06      	ldr	r3, [pc, #24]	; (8008360 <MX_SPI2_Init+0x64>)
 8008348:	220a      	movs	r2, #10
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800834c:	4804      	ldr	r0, [pc, #16]	; (8008360 <MX_SPI2_Init+0x64>)
 800834e:	f7fb fd83 	bl	8003e58 <HAL_SPI_Init>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008358:	f001 ff22 	bl	800a1a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800835c:	bf00      	nop
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20004118 	.word	0x20004118
 8008364:	40003800 	.word	0x40003800

08008368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b092      	sub	sp, #72	; 0x48
 800836c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800836e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	605a      	str	r2, [r3, #4]
 8008382:	609a      	str	r2, [r3, #8]
 8008384:	60da      	str	r2, [r3, #12]
 8008386:	611a      	str	r2, [r3, #16]
 8008388:	615a      	str	r2, [r3, #20]
 800838a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800838c:	1d3b      	adds	r3, r7, #4
 800838e:	2220      	movs	r2, #32
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f004 f8c7 	bl	800c526 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008398:	4b38      	ldr	r3, [pc, #224]	; (800847c <MX_TIM1_Init+0x114>)
 800839a:	4a39      	ldr	r2, [pc, #228]	; (8008480 <MX_TIM1_Init+0x118>)
 800839c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800839e:	4b37      	ldr	r3, [pc, #220]	; (800847c <MX_TIM1_Init+0x114>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083a4:	4b35      	ldr	r3, [pc, #212]	; (800847c <MX_TIM1_Init+0x114>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80083aa:	4b34      	ldr	r3, [pc, #208]	; (800847c <MX_TIM1_Init+0x114>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083b0:	4b32      	ldr	r3, [pc, #200]	; (800847c <MX_TIM1_Init+0x114>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80083b6:	4b31      	ldr	r3, [pc, #196]	; (800847c <MX_TIM1_Init+0x114>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083bc:	4b2f      	ldr	r3, [pc, #188]	; (800847c <MX_TIM1_Init+0x114>)
 80083be:	2200      	movs	r2, #0
 80083c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80083c2:	482e      	ldr	r0, [pc, #184]	; (800847c <MX_TIM1_Init+0x114>)
 80083c4:	f7fc f8f9 	bl	80045ba <HAL_TIM_PWM_Init>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80083ce:	f001 fee7 	bl	800a1a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083d2:	2300      	movs	r3, #0
 80083d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80083da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083de:	4619      	mov	r1, r3
 80083e0:	4826      	ldr	r0, [pc, #152]	; (800847c <MX_TIM1_Init+0x114>)
 80083e2:	f7fc fec0 	bl	8005166 <HAL_TIMEx_MasterConfigSynchronization>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80083ec:	f001 fed8 	bl	800a1a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80083f0:	2360      	movs	r3, #96	; 0x60
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80083f8:	2300      	movs	r3, #0
 80083fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80083fc:	2300      	movs	r3, #0
 80083fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008400:	2300      	movs	r3, #0
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008404:	2300      	movs	r3, #0
 8008406:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008408:	2300      	movs	r3, #0
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800840c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008410:	2200      	movs	r2, #0
 8008412:	4619      	mov	r1, r3
 8008414:	4819      	ldr	r0, [pc, #100]	; (800847c <MX_TIM1_Init+0x114>)
 8008416:	f7fc fa35 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8008420:	f001 febe 	bl	800a1a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008428:	220c      	movs	r2, #12
 800842a:	4619      	mov	r1, r3
 800842c:	4813      	ldr	r0, [pc, #76]	; (800847c <MX_TIM1_Init+0x114>)
 800842e:	f7fc fa29 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8008438:	f001 feb2 	bl	800a1a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800843c:	2300      	movs	r3, #0
 800843e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008440:	2300      	movs	r3, #0
 8008442:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008454:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008456:	2300      	movs	r3, #0
 8008458:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800845a:	1d3b      	adds	r3, r7, #4
 800845c:	4619      	mov	r1, r3
 800845e:	4807      	ldr	r0, [pc, #28]	; (800847c <MX_TIM1_Init+0x114>)
 8008460:	f7fc fec6 	bl	80051f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800846a:	f001 fe99 	bl	800a1a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800846e:	4803      	ldr	r0, [pc, #12]	; (800847c <MX_TIM1_Init+0x114>)
 8008470:	f002 fdac 	bl	800afcc <HAL_TIM_MspPostInit>

}
 8008474:	bf00      	nop
 8008476:	3748      	adds	r7, #72	; 0x48
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	200044d8 	.word	0x200044d8
 8008480:	40010000 	.word	0x40010000

08008484 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08e      	sub	sp, #56	; 0x38
 8008488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	  /* USER CODE END TIM2_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800848a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	609a      	str	r2, [r3, #8]
 8008496:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008498:	f107 0320 	add.w	r3, r7, #32
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	611a      	str	r2, [r3, #16]
 80084b0:	615a      	str	r2, [r3, #20]
 80084b2:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 80084b4:	4b38      	ldr	r3, [pc, #224]	; (8008598 <MX_TIM2_Init+0x114>)
 80084b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80084ba:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 1599;
 80084bc:	4b36      	ldr	r3, [pc, #216]	; (8008598 <MX_TIM2_Init+0x114>)
 80084be:	f240 623f 	movw	r2, #1599	; 0x63f
 80084c2:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084c4:	4b34      	ldr	r3, [pc, #208]	; (8008598 <MX_TIM2_Init+0x114>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 999999;
 80084ca:	4b33      	ldr	r3, [pc, #204]	; (8008598 <MX_TIM2_Init+0x114>)
 80084cc:	4a33      	ldr	r2, [pc, #204]	; (800859c <MX_TIM2_Init+0x118>)
 80084ce:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084d0:	4b31      	ldr	r3, [pc, #196]	; (8008598 <MX_TIM2_Init+0x114>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084d6:	4b30      	ldr	r3, [pc, #192]	; (8008598 <MX_TIM2_Init+0x114>)
 80084d8:	2200      	movs	r2, #0
 80084da:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80084dc:	482e      	ldr	r0, [pc, #184]	; (8008598 <MX_TIM2_Init+0x114>)
 80084de:	f7fc f81d 	bl	800451c <HAL_TIM_Base_Init>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <MX_TIM2_Init+0x68>
	  {
	    Error_Handler();
 80084e8:	f001 fe5a 	bl	800a1a0 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80084ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80084f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084f6:	4619      	mov	r1, r3
 80084f8:	4827      	ldr	r0, [pc, #156]	; (8008598 <MX_TIM2_Init+0x114>)
 80084fa:	f7fc fa89 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <MX_TIM2_Init+0x84>
	  {
	    Error_Handler();
 8008504:	f001 fe4c 	bl	800a1a0 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008508:	4823      	ldr	r0, [pc, #140]	; (8008598 <MX_TIM2_Init+0x114>)
 800850a:	f7fc f856 	bl	80045ba <HAL_TIM_PWM_Init>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <MX_TIM2_Init+0x94>
	  {
	    Error_Handler();
 8008514:	f001 fe44 	bl	800a1a0 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008518:	2300      	movs	r3, #0
 800851a:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800851c:	2300      	movs	r3, #0
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008520:	f107 0320 	add.w	r3, r7, #32
 8008524:	4619      	mov	r1, r3
 8008526:	481c      	ldr	r0, [pc, #112]	; (8008598 <MX_TIM2_Init+0x114>)
 8008528:	f7fc fe1d 	bl	8005166 <HAL_TIMEx_MasterConfigSynchronization>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <MX_TIM2_Init+0xb2>
	  {
	    Error_Handler();
 8008532:	f001 fe35 	bl	800a1a0 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008536:	2360      	movs	r3, #96	; 0x60
 8008538:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008546:	1d3b      	adds	r3, r7, #4
 8008548:	2200      	movs	r2, #0
 800854a:	4619      	mov	r1, r3
 800854c:	4812      	ldr	r0, [pc, #72]	; (8008598 <MX_TIM2_Init+0x114>)
 800854e:	f7fc f999 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <MX_TIM2_Init+0xd8>
	  {
	    Error_Handler();
 8008558:	f001 fe22 	bl	800a1a0 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800855c:	1d3b      	adds	r3, r7, #4
 800855e:	2204      	movs	r2, #4
 8008560:	4619      	mov	r1, r3
 8008562:	480d      	ldr	r0, [pc, #52]	; (8008598 <MX_TIM2_Init+0x114>)
 8008564:	f7fc f98e 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <MX_TIM2_Init+0xee>
	  {
	    Error_Handler();
 800856e:	f001 fe17 	bl	800a1a0 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008572:	1d3b      	adds	r3, r7, #4
 8008574:	2208      	movs	r2, #8
 8008576:	4619      	mov	r1, r3
 8008578:	4807      	ldr	r0, [pc, #28]	; (8008598 <MX_TIM2_Init+0x114>)
 800857a:	f7fc f983 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <MX_TIM2_Init+0x104>
	  {
	    Error_Handler();
 8008584:	f001 fe0c 	bl	800a1a0 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM2_Init 2 */

	  /* USER CODE END TIM2_Init 2 */
	  HAL_TIM_MspPostInit(&htim2);
 8008588:	4803      	ldr	r0, [pc, #12]	; (8008598 <MX_TIM2_Init+0x114>)
 800858a:	f002 fd1f 	bl	800afcc <HAL_TIM_MspPostInit>


}
 800858e:	bf00      	nop
 8008590:	3738      	adds	r7, #56	; 0x38
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200047c4 	.word	0x200047c4
 800859c:	000f423f 	.word	0x000f423f

080085a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08a      	sub	sp, #40	; 0x28
 80085a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085a6:	f107 0320 	add.w	r3, r7, #32
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80085b0:	1d3b      	adds	r3, r7, #4
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	605a      	str	r2, [r3, #4]
 80085b8:	609a      	str	r2, [r3, #8]
 80085ba:	60da      	str	r2, [r3, #12]
 80085bc:	611a      	str	r2, [r3, #16]
 80085be:	615a      	str	r2, [r3, #20]
 80085c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80085c2:	4b27      	ldr	r3, [pc, #156]	; (8008660 <MX_TIM3_Init+0xc0>)
 80085c4:	4a27      	ldr	r2, [pc, #156]	; (8008664 <MX_TIM3_Init+0xc4>)
 80085c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80085c8:	4b25      	ldr	r3, [pc, #148]	; (8008660 <MX_TIM3_Init+0xc0>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085ce:	4b24      	ldr	r3, [pc, #144]	; (8008660 <MX_TIM3_Init+0xc0>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80085d4:	4b22      	ldr	r3, [pc, #136]	; (8008660 <MX_TIM3_Init+0xc0>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085da:	4b21      	ldr	r3, [pc, #132]	; (8008660 <MX_TIM3_Init+0xc0>)
 80085dc:	2200      	movs	r2, #0
 80085de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085e0:	4b1f      	ldr	r3, [pc, #124]	; (8008660 <MX_TIM3_Init+0xc0>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80085e6:	481e      	ldr	r0, [pc, #120]	; (8008660 <MX_TIM3_Init+0xc0>)
 80085e8:	f7fb ffe7 	bl	80045ba <HAL_TIM_PWM_Init>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80085f2:	f001 fdd5 	bl	800a1a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085f6:	2300      	movs	r3, #0
 80085f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80085fe:	f107 0320 	add.w	r3, r7, #32
 8008602:	4619      	mov	r1, r3
 8008604:	4816      	ldr	r0, [pc, #88]	; (8008660 <MX_TIM3_Init+0xc0>)
 8008606:	f7fc fdae 	bl	8005166 <HAL_TIMEx_MasterConfigSynchronization>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8008610:	f001 fdc6 	bl	800a1a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008614:	2360      	movs	r3, #96	; 0x60
 8008616:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008620:	2300      	movs	r3, #0
 8008622:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	2200      	movs	r2, #0
 8008628:	4619      	mov	r1, r3
 800862a:	480d      	ldr	r0, [pc, #52]	; (8008660 <MX_TIM3_Init+0xc0>)
 800862c:	f7fc f92a 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8008636:	f001 fdb3 	bl	800a1a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800863a:	1d3b      	adds	r3, r7, #4
 800863c:	2204      	movs	r2, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4807      	ldr	r0, [pc, #28]	; (8008660 <MX_TIM3_Init+0xc0>)
 8008642:	f7fc f91f 	bl	8004884 <HAL_TIM_PWM_ConfigChannel>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800864c:	f001 fda8 	bl	800a1a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008650:	4803      	ldr	r0, [pc, #12]	; (8008660 <MX_TIM3_Init+0xc0>)
 8008652:	f002 fcbb 	bl	800afcc <HAL_TIM_MspPostInit>

}
 8008656:	bf00      	nop
 8008658:	3728      	adds	r7, #40	; 0x28
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200041e0 	.word	0x200041e0
 8008664:	40000400 	.word	0x40000400

08008668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800866c:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 800866e:	4a12      	ldr	r2, [pc, #72]	; (80086b8 <MX_USART1_UART_Init+0x50>)
 8008670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008672:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 8008674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800867a:	4b0e      	ldr	r3, [pc, #56]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 800867c:	2200      	movs	r2, #0
 800867e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008680:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 8008682:	2200      	movs	r2, #0
 8008684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 8008688:	2200      	movs	r2, #0
 800868a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800868c:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 800868e:	220c      	movs	r2, #12
 8008690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008692:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 8008694:	2200      	movs	r2, #0
 8008696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 800869a:	2200      	movs	r2, #0
 800869c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800869e:	4805      	ldr	r0, [pc, #20]	; (80086b4 <MX_USART1_UART_Init+0x4c>)
 80086a0:	f7fc fe0c 	bl	80052bc <HAL_UART_Init>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80086aa:	f001 fd79 	bl	800a1a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20004250 	.word	0x20004250
 80086b8:	40011000 	.word	0x40011000

080086bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08a      	sub	sp, #40	; 0x28
 80086c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c2:	f107 0314 	add.w	r3, r7, #20
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	609a      	str	r2, [r3, #8]
 80086ce:	60da      	str	r2, [r3, #12]
 80086d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	4b34      	ldr	r3, [pc, #208]	; (80087a8 <MX_GPIO_Init+0xec>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	4a33      	ldr	r2, [pc, #204]	; (80087a8 <MX_GPIO_Init+0xec>)
 80086dc:	f043 0304 	orr.w	r3, r3, #4
 80086e0:	6313      	str	r3, [r2, #48]	; 0x30
 80086e2:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <MX_GPIO_Init+0xec>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	4b2d      	ldr	r3, [pc, #180]	; (80087a8 <MX_GPIO_Init+0xec>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <MX_GPIO_Init+0xec>)
 80086f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fc:	6313      	str	r3, [r2, #48]	; 0x30
 80086fe:	4b2a      	ldr	r3, [pc, #168]	; (80087a8 <MX_GPIO_Init+0xec>)
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800870a:	2300      	movs	r3, #0
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	4b26      	ldr	r3, [pc, #152]	; (80087a8 <MX_GPIO_Init+0xec>)
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	4a25      	ldr	r2, [pc, #148]	; (80087a8 <MX_GPIO_Init+0xec>)
 8008714:	f043 0301 	orr.w	r3, r3, #1
 8008718:	6313      	str	r3, [r2, #48]	; 0x30
 800871a:	4b23      	ldr	r3, [pc, #140]	; (80087a8 <MX_GPIO_Init+0xec>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	60bb      	str	r3, [r7, #8]
 8008724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008726:	2300      	movs	r3, #0
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	4b1f      	ldr	r3, [pc, #124]	; (80087a8 <MX_GPIO_Init+0xec>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <MX_GPIO_Init+0xec>)
 8008730:	f043 0302 	orr.w	r3, r3, #2
 8008734:	6313      	str	r3, [r2, #48]	; 0x30
 8008736:	4b1c      	ldr	r3, [pc, #112]	; (80087a8 <MX_GPIO_Init+0xec>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	607b      	str	r3, [r7, #4]
 8008740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8008742:	2200      	movs	r2, #0
 8008744:	f242 0130 	movw	r1, #8240	; 0x2030
 8008748:	4818      	ldr	r0, [pc, #96]	; (80087ac <MX_GPIO_Init+0xf0>)
 800874a:	f7f8 fc07 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800874e:	2200      	movs	r2, #0
 8008750:	2103      	movs	r1, #3
 8008752:	4817      	ldr	r0, [pc, #92]	; (80087b0 <MX_GPIO_Init+0xf4>)
 8008754:	f7f8 fc02 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_LED_Pin|LCD_DC_RS_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8008758:	2201      	movs	r2, #1
 800875a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800875e:	4813      	ldr	r0, [pc, #76]	; (80087ac <MX_GPIO_Init+0xf0>)
 8008760:	f7f8 fbfc 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 LCD_LED_Pin 
                           LCD_DC_RS_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|LCD_LED_Pin 
 8008764:	f242 33f0 	movw	r3, #9200	; 0x23f0
 8008768:	617b      	str	r3, [r7, #20]
                          |LCD_DC_RS_Pin|LCD_RESET_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800876a:	2301      	movs	r3, #1
 800876c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876e:	2300      	movs	r3, #0
 8008770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008772:	2300      	movs	r3, #0
 8008774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008776:	f107 0314 	add.w	r3, r7, #20
 800877a:	4619      	mov	r1, r3
 800877c:	480b      	ldr	r0, [pc, #44]	; (80087ac <MX_GPIO_Init+0xf0>)
 800877e:	f7f8 fa6b 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008782:	2303      	movs	r3, #3
 8008784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008786:	2301      	movs	r3, #1
 8008788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008792:	f107 0314 	add.w	r3, r7, #20
 8008796:	4619      	mov	r1, r3
 8008798:	4805      	ldr	r0, [pc, #20]	; (80087b0 <MX_GPIO_Init+0xf4>)
 800879a:	f7f8 fa5d 	bl	8000c58 <HAL_GPIO_Init>

}
 800879e:	bf00      	nop
 80087a0:	3728      	adds	r7, #40	; 0x28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40020800 	.word	0x40020800
 80087b0:	40020400 	.word	0x40020400

080087b4 <StartTask1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
    
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  PM25 = PM25 +1;
 80087bc:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <StartTask1+0x74>)
 80087be:	edd3 7a00 	vldr	s15, [r3]
 80087c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087ca:	4b17      	ldr	r3, [pc, #92]	; (8008828 <StartTask1+0x74>)
 80087cc:	edc3 7a00 	vstr	s15, [r3]
	  ret = sps30_read_measurement(&m);
 80087d0:	4816      	ldr	r0, [pc, #88]	; (800882c <StartTask1+0x78>)
 80087d2:	f002 f85c 	bl	800a88e <sps30_read_measurement>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	4b15      	ldr	r3, [pc, #84]	; (8008830 <StartTask1+0x7c>)
 80087dc:	801a      	strh	r2, [r3, #0]
		// PM25 = PM25;
					  //error
	 // } else {
	//	 PM25 = m.mc_2p5;
	 // }
	  err = svm_measure_iaq_blocking_read(&tvoc_ppb, &co2_ppm, &temperature, &humidity);
 80087de:	4b15      	ldr	r3, [pc, #84]	; (8008834 <StartTask1+0x80>)
 80087e0:	4a15      	ldr	r2, [pc, #84]	; (8008838 <StartTask1+0x84>)
 80087e2:	4916      	ldr	r1, [pc, #88]	; (800883c <StartTask1+0x88>)
 80087e4:	4816      	ldr	r0, [pc, #88]	; (8008840 <StartTask1+0x8c>)
 80087e6:	f002 fe1e 	bl	800b426 <svm_measure_iaq_blocking_read>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461a      	mov	r2, r3
 80087ee:	4b15      	ldr	r3, [pc, #84]	; (8008844 <StartTask1+0x90>)
 80087f0:	801a      	strh	r2, [r3, #0]

	  if (err == STATUS_OK) {
 80087f2:	4b14      	ldr	r3, [pc, #80]	; (8008844 <StartTask1+0x90>)
 80087f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00f      	beq.n	800881c <StartTask1+0x68>
			//lay thanh cong
	  } else {
			co2_ppm = co2_ppm;
 80087fc:	4b0f      	ldr	r3, [pc, #60]	; (800883c <StartTask1+0x88>)
 80087fe:	881a      	ldrh	r2, [r3, #0]
 8008800:	4b0e      	ldr	r3, [pc, #56]	; (800883c <StartTask1+0x88>)
 8008802:	801a      	strh	r2, [r3, #0]
			temperature = temperature;
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <StartTask1+0x84>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <StartTask1+0x84>)
 800880a:	6013      	str	r3, [r2, #0]
			humidity = humidity;
 800880c:	4b09      	ldr	r3, [pc, #36]	; (8008834 <StartTask1+0x80>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a08      	ldr	r2, [pc, #32]	; (8008834 <StartTask1+0x80>)
 8008812:	6013      	str	r3, [r2, #0]
			tvoc_ppb = tvoc_ppb;
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <StartTask1+0x8c>)
 8008816:	881a      	ldrh	r2, [r3, #0]
 8008818:	4b09      	ldr	r3, [pc, #36]	; (8008840 <StartTask1+0x8c>)
 800881a:	801a      	strh	r2, [r3, #0]
			//khong the doc tu cam bien
	  }
    osDelay(1000);
 800881c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008820:	f7fd fb79 	bl	8005f16 <osDelay>
	  PM25 = PM25 +1;
 8008824:	e7ca      	b.n	80087bc <StartTask1+0x8>
 8008826:	bf00      	nop
 8008828:	20004108 	.word	0x20004108
 800882c:	2000483c 	.word	0x2000483c
 8008830:	20004838 	.word	0x20004838
 8008834:	2000404c 	.word	0x2000404c
 8008838:	20004048 	.word	0x20004048
 800883c:	20000016 	.word	0x20000016
 8008840:	20000014 	.word	0x20000014
 8008844:	200044b8 	.word	0x200044b8

08008848 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	CheckUART();
 8008850:	f000 fda0 	bl	8009394 <CheckUART>
    osDelay(500);
 8008854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008858:	f7fd fb5d 	bl	8005f16 <osDelay>
	CheckUART();
 800885c:	e7f8      	b.n	8008850 <StartTask02+0x8>
	...

08008860 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af02      	add	r7, sp, #8
 8008866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if (PM25 <= 50 && FLAG==0){
 8008868:	4b86      	ldr	r3, [pc, #536]	; (8008a84 <StartTask03+0x224>)
 800886a:	edd3 7a00 	vldr	s15, [r3]
 800886e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8008a88 <StartTask03+0x228>
 8008872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887a:	d824      	bhi.n	80088c6 <StartTask03+0x66>
 800887c:	4b83      	ldr	r3, [pc, #524]	; (8008a8c <StartTask03+0x22c>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d120      	bne.n	80088c6 <StartTask03+0x66>
		  	tft_fill2(1,1,320,240,BLACK);
 8008884:	2300      	movs	r3, #0
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	23f0      	movs	r3, #240	; 0xf0
 800888a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800888e:	2101      	movs	r1, #1
 8008890:	2001      	movs	r0, #1
 8008892:	f003 fa7b 	bl	800bd8c <tft_fill2>
			FLAG=1;
 8008896:	4b7d      	ldr	r3, [pc, #500]	; (8008a8c <StartTask03+0x22c>)
 8008898:	2201      	movs	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 800889c:	4b7c      	ldr	r3, [pc, #496]	; (8008a90 <StartTask03+0x230>)
 800889e:	2200      	movs	r2, #0
 80088a0:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 80088a2:	4b7c      	ldr	r3, [pc, #496]	; (8008a94 <StartTask03+0x234>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 80088a8:	4b7b      	ldr	r3, [pc, #492]	; (8008a98 <StartTask03+0x238>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 80088ae:	4b7b      	ldr	r3, [pc, #492]	; (8008a9c <StartTask03+0x23c>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	701a      	strb	r2, [r3, #0]


			IAQcolor();
 80088b4:	f001 f992 	bl	8009bdc <IAQcolor>
			IAQform();
 80088b8:	f001 fbc2 	bl	800a040 <IAQform>
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80088bc:	4b78      	ldr	r3, [pc, #480]	; (8008aa0 <StartTask03+0x240>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2200      	movs	r2, #0
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24
 80088c4:	e0d8      	b.n	8008a78 <StartTask03+0x218>
		}
		else if(PM25 > 50 && PM25 <= 100 && FLAG1==0){
 80088c6:	4b6f      	ldr	r3, [pc, #444]	; (8008a84 <StartTask03+0x224>)
 80088c8:	edd3 7a00 	vldr	s15, [r3]
 80088cc:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8008a88 <StartTask03+0x228>
 80088d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	dd2e      	ble.n	8008938 <StartTask03+0xd8>
 80088da:	4b6a      	ldr	r3, [pc, #424]	; (8008a84 <StartTask03+0x224>)
 80088dc:	edd3 7a00 	vldr	s15, [r3]
 80088e0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8008aa4 <StartTask03+0x244>
 80088e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ec:	d824      	bhi.n	8008938 <StartTask03+0xd8>
 80088ee:	4b68      	ldr	r3, [pc, #416]	; (8008a90 <StartTask03+0x230>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d120      	bne.n	8008938 <StartTask03+0xd8>
			FLAG=0;
 80088f6:	4b65      	ldr	r3, [pc, #404]	; (8008a8c <StartTask03+0x22c>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	701a      	strb	r2, [r3, #0]
			FLAG1=1;
 80088fc:	4b64      	ldr	r3, [pc, #400]	; (8008a90 <StartTask03+0x230>)
 80088fe:	2201      	movs	r2, #1
 8008900:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 8008902:	4b64      	ldr	r3, [pc, #400]	; (8008a94 <StartTask03+0x234>)
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 8008908:	4b63      	ldr	r3, [pc, #396]	; (8008a98 <StartTask03+0x238>)
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 800890e:	4b63      	ldr	r3, [pc, #396]	; (8008a9c <StartTask03+0x23c>)
 8008910:	2200      	movs	r2, #0
 8008912:	701a      	strb	r2, [r3, #0]
			tft_fill2(1,1,320,240,BLACK);
 8008914:	2300      	movs	r3, #0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	23f0      	movs	r3, #240	; 0xf0
 800891a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800891e:	2101      	movs	r1, #1
 8008920:	2001      	movs	r0, #1
 8008922:	f003 fa33 	bl	800bd8c <tft_fill2>
			IAQcolor();
 8008926:	f001 f959 	bl	8009bdc <IAQcolor>
			IAQform();
 800892a:	f001 fb89 	bl	800a040 <IAQform>
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 800892e:	4b5c      	ldr	r3, [pc, #368]	; (8008aa0 <StartTask03+0x240>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2200      	movs	r2, #0
 8008934:	625a      	str	r2, [r3, #36]	; 0x24
 8008936:	e09f      	b.n	8008a78 <StartTask03+0x218>
		}
		else if(PM25 > 100 && PM25 <= 150 && FLAG2==0){
 8008938:	4b52      	ldr	r3, [pc, #328]	; (8008a84 <StartTask03+0x224>)
 800893a:	edd3 7a00 	vldr	s15, [r3]
 800893e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8008aa4 <StartTask03+0x244>
 8008942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894a:	dd2e      	ble.n	80089aa <StartTask03+0x14a>
 800894c:	4b4d      	ldr	r3, [pc, #308]	; (8008a84 <StartTask03+0x224>)
 800894e:	edd3 7a00 	vldr	s15, [r3]
 8008952:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008aa8 <StartTask03+0x248>
 8008956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800895a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895e:	d824      	bhi.n	80089aa <StartTask03+0x14a>
 8008960:	4b4c      	ldr	r3, [pc, #304]	; (8008a94 <StartTask03+0x234>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d120      	bne.n	80089aa <StartTask03+0x14a>
			FLAG=0;
 8008968:	4b48      	ldr	r3, [pc, #288]	; (8008a8c <StartTask03+0x22c>)
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 800896e:	4b48      	ldr	r3, [pc, #288]	; (8008a90 <StartTask03+0x230>)
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
			FLAG2=1;
 8008974:	4b47      	ldr	r3, [pc, #284]	; (8008a94 <StartTask03+0x234>)
 8008976:	2201      	movs	r2, #1
 8008978:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 800897a:	4b47      	ldr	r3, [pc, #284]	; (8008a98 <StartTask03+0x238>)
 800897c:	2200      	movs	r2, #0
 800897e:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 8008980:	4b46      	ldr	r3, [pc, #280]	; (8008a9c <StartTask03+0x23c>)
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
			tft_fill2(1,1,320,240,BLACK);
 8008986:	2300      	movs	r3, #0
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	23f0      	movs	r3, #240	; 0xf0
 800898c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008990:	2101      	movs	r1, #1
 8008992:	2001      	movs	r0, #1
 8008994:	f003 f9fa 	bl	800bd8c <tft_fill2>
			IAQcolor();
 8008998:	f001 f920 	bl	8009bdc <IAQcolor>
			IAQform();
 800899c:	f001 fb50 	bl	800a040 <IAQform>
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80089a0:	4b3f      	ldr	r3, [pc, #252]	; (8008aa0 <StartTask03+0x240>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2200      	movs	r2, #0
 80089a6:	625a      	str	r2, [r3, #36]	; 0x24
 80089a8:	e066      	b.n	8008a78 <StartTask03+0x218>
		}
		else if(PM25 > 150 && PM25 <= 200 && FLAG3==0){
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <StartTask03+0x224>)
 80089ac:	edd3 7a00 	vldr	s15, [r3]
 80089b0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8008aa8 <StartTask03+0x248>
 80089b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	dd2e      	ble.n	8008a1c <StartTask03+0x1bc>
 80089be:	4b31      	ldr	r3, [pc, #196]	; (8008a84 <StartTask03+0x224>)
 80089c0:	edd3 7a00 	vldr	s15, [r3]
 80089c4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8008aac <StartTask03+0x24c>
 80089c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d0:	d824      	bhi.n	8008a1c <StartTask03+0x1bc>
 80089d2:	4b31      	ldr	r3, [pc, #196]	; (8008a98 <StartTask03+0x238>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d120      	bne.n	8008a1c <StartTask03+0x1bc>
			FLAG=0;
 80089da:	4b2c      	ldr	r3, [pc, #176]	; (8008a8c <StartTask03+0x22c>)
 80089dc:	2200      	movs	r2, #0
 80089de:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 80089e0:	4b2b      	ldr	r3, [pc, #172]	; (8008a90 <StartTask03+0x230>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 80089e6:	4b2b      	ldr	r3, [pc, #172]	; (8008a94 <StartTask03+0x234>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]
			FLAG3=1;
 80089ec:	4b2a      	ldr	r3, [pc, #168]	; (8008a98 <StartTask03+0x238>)
 80089ee:	2201      	movs	r2, #1
 80089f0:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 80089f2:	4b2a      	ldr	r3, [pc, #168]	; (8008a9c <StartTask03+0x23c>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
			tft_fill2(1,1,320,240,BLACK);
 80089f8:	2300      	movs	r3, #0
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	23f0      	movs	r3, #240	; 0xf0
 80089fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a02:	2101      	movs	r1, #1
 8008a04:	2001      	movs	r0, #1
 8008a06:	f003 f9c1 	bl	800bd8c <tft_fill2>
			IAQcolor();
 8008a0a:	f001 f8e7 	bl	8009bdc <IAQcolor>
			IAQform();
 8008a0e:	f001 fb17 	bl	800a040 <IAQform>
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8008a12:	4b23      	ldr	r3, [pc, #140]	; (8008aa0 <StartTask03+0x240>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2200      	movs	r2, #0
 8008a18:	625a      	str	r2, [r3, #36]	; 0x24
 8008a1a:	e02d      	b.n	8008a78 <StartTask03+0x218>
		}
		else if(PM25 > 200 && FLAG4==0){
 8008a1c:	4b19      	ldr	r3, [pc, #100]	; (8008a84 <StartTask03+0x224>)
 8008a1e:	edd3 7a00 	vldr	s15, [r3]
 8008a22:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008aac <StartTask03+0x24c>
 8008a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2e:	dd23      	ble.n	8008a78 <StartTask03+0x218>
 8008a30:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <StartTask03+0x23c>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d11f      	bne.n	8008a78 <StartTask03+0x218>
			FLAG=0;
 8008a38:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <StartTask03+0x22c>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 8008a3e:	4b14      	ldr	r3, [pc, #80]	; (8008a90 <StartTask03+0x230>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 8008a44:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <StartTask03+0x234>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 8008a4a:	4b13      	ldr	r3, [pc, #76]	; (8008a98 <StartTask03+0x238>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	701a      	strb	r2, [r3, #0]
			FLAG4=1;
 8008a50:	4b12      	ldr	r3, [pc, #72]	; (8008a9c <StartTask03+0x23c>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
			tft_fill2(1,1,320,240,BLACK);
 8008a56:	2300      	movs	r3, #0
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	23f0      	movs	r3, #240	; 0xf0
 8008a5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a60:	2101      	movs	r1, #1
 8008a62:	2001      	movs	r0, #1
 8008a64:	f003 f992 	bl	800bd8c <tft_fill2>
			IAQcolor();
 8008a68:	f001 f8b8 	bl	8009bdc <IAQcolor>
			IAQform();
 8008a6c:	f001 fae8 	bl	800a040 <IAQform>
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8008a70:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <StartTask03+0x240>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2200      	movs	r2, #0
 8008a76:	625a      	str	r2, [r3, #36]	; 0x24
		}
    osDelay(1000);
 8008a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a7c:	f7fd fa4b 	bl	8005f16 <osDelay>
	  if (PM25 <= 50 && FLAG==0){
 8008a80:	e6f2      	b.n	8008868 <StartTask03+0x8>
 8008a82:	bf00      	nop
 8008a84:	20004108 	.word	0x20004108
 8008a88:	42480000 	.word	0x42480000
 8008a8c:	20004042 	.word	0x20004042
 8008a90:	20004043 	.word	0x20004043
 8008a94:	20004044 	.word	0x20004044
 8008a98:	20004045 	.word	0x20004045
 8008a9c:	20004046 	.word	0x20004046
 8008aa0:	200047c4 	.word	0x200047c4
 8008aa4:	42c80000 	.word	0x42c80000
 8008aa8:	43160000 	.word	0x43160000
 8008aac:	43480000 	.word	0x43480000

08008ab0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  FormInterface();
 8008ab8:	f001 f91e 	bl	8009cf8 <FormInterface>
	  Convertvalue();
 8008abc:	f000 f86e 	bl	8008b9c <Convertvalue>
	  //FrameUART();
	  sprintf(buffer5,"%d",tmpIntPM1);
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <StartTask04+0x28>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4905      	ldr	r1, [pc, #20]	; (8008adc <StartTask04+0x2c>)
 8008ac8:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <StartTask04+0x30>)
 8008aca:	f003 fd35 	bl	800c538 <siprintf>
      osDelay(1000);
 8008ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ad2:	f7fd fa20 	bl	8005f16 <osDelay>
	  FormInterface();
 8008ad6:	e7ef      	b.n	8008ab8 <StartTask04+0x8>
 8008ad8:	20004834 	.word	0x20004834
 8008adc:	0800cf5c 	.word	0x0800cf5c
 8008ae0:	200044bc 	.word	0x200044bc

08008ae4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000000);
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <StartTask05+0x10>)
 8008aee:	f7fd fa12 	bl	8005f16 <osDelay>
 8008af2:	e7fb      	b.n	8008aec <StartTask05+0x8>
 8008af4:	00989680 	.word	0x00989680

08008af8 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000000);
 8008b00:	4801      	ldr	r0, [pc, #4]	; (8008b08 <StartTask06+0x10>)
 8008b02:	f7fd fa08 	bl	8005f16 <osDelay>
 8008b06:	e7fb      	b.n	8008b00 <StartTask06+0x8>
 8008b08:	00989680 	.word	0x00989680

08008b0c <HAL_UART_RxCpltCallback>:
  /* USER CODE END StartTask06 */
}

/* USER CODE FOR UART*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART1)  //Xét UART nhận dữ liệu
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a1a      	ldr	r2, [pc, #104]	; (8008b84 <HAL_UART_RxCpltCallback+0x78>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d12d      	bne.n	8008b7a <HAL_UART_RxCpltCallback+0x6e>
        {
        if (Rx_indx==0 && Transfer_cplt==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_buffer trước khi nhận dữ liệu mới
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <HAL_UART_RxCpltCallback+0x7c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d110      	bne.n	8008b48 <HAL_UART_RxCpltCallback+0x3c>
 8008b26:	4b19      	ldr	r3, [pc, #100]	; (8008b8c <HAL_UART_RxCpltCallback+0x80>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10c      	bne.n	8008b48 <HAL_UART_RxCpltCallback+0x3c>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
 8008b32:	e006      	b.n	8008b42 <HAL_UART_RxCpltCallback+0x36>
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <HAL_UART_RxCpltCallback+0x84>)
 8008b38:	2100      	movs	r1, #0
 8008b3a:	54d1      	strb	r1, [r2, r3]
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	2b63      	cmp	r3, #99	; 0x63
 8008b46:	d9f5      	bls.n	8008b34 <HAL_UART_RxCpltCallback+0x28>

        if (Rx_data[0]!='\n') //Nếu nhận dữ liệu là khác dấu xuống dòng
 8008b48:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <HAL_UART_RxCpltCallback+0x88>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b0a      	cmp	r3, #10
 8008b4e:	d009      	beq.n	8008b64 <HAL_UART_RxCpltCallback+0x58>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //thêm dữ liệu vào Rx_Buffer
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <HAL_UART_RxCpltCallback+0x7c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	490c      	ldr	r1, [pc, #48]	; (8008b88 <HAL_UART_RxCpltCallback+0x7c>)
 8008b58:	600a      	str	r2, [r1, #0]
 8008b5a:	4a0e      	ldr	r2, [pc, #56]	; (8008b94 <HAL_UART_RxCpltCallback+0x88>)
 8008b5c:	7811      	ldrb	r1, [r2, #0]
 8008b5e:	4a0c      	ldr	r2, [pc, #48]	; (8008b90 <HAL_UART_RxCpltCallback+0x84>)
 8008b60:	54d1      	strb	r1, [r2, r3]
 8008b62:	e005      	b.n	8008b70 <HAL_UART_RxCpltCallback+0x64>
            }
        else            //nếu là dấu xuống dòng \n thì hoàn thành việc đọc 1 khung truyền
            {
            Rx_indx=0;
 8008b64:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <HAL_UART_RxCpltCallback+0x7c>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
            Transfer_cplt=1;//Cờ báo hiệu đã chuyển dữ liệu xong và tiến hành đọc dữ liệu
 8008b6a:	4b08      	ldr	r3, [pc, #32]	; (8008b8c <HAL_UART_RxCpltCallback+0x80>)
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	701a      	strb	r2, [r3, #0]
            }

        HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //Kích hoạt ngắt UART mỗi data nhận được
 8008b70:	2201      	movs	r2, #1
 8008b72:	4908      	ldr	r1, [pc, #32]	; (8008b94 <HAL_UART_RxCpltCallback+0x88>)
 8008b74:	4808      	ldr	r0, [pc, #32]	; (8008b98 <HAL_UART_RxCpltCallback+0x8c>)
 8008b76:	f7fc fc87 	bl	8005488 <HAL_UART_Receive_IT>
        }

}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40011000 	.word	0x40011000
 8008b88:	20004050 	.word	0x20004050
 8008b8c:	20004111 	.word	0x20004111
 8008b90:	20004518 	.word	0x20004518
 8008b94:	200041d0 	.word	0x200041d0
 8008b98:	20004250 	.word	0x20004250

08008b9c <Convertvalue>:

/* Hàm chuyển đổi giá trị của giá trị float PM2.5, nhiệt độ, độ ẩm để đưa vào khung truyền UART */
void Convertvalue(void){
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0

	//PM25 = 22.33;
	//PM25 = PM25 + 10;
	tmpIntPM1 = (int)PM25;
 8008ba2:	4b55      	ldr	r3, [pc, #340]	; (8008cf8 <Convertvalue+0x15c>)
 8008ba4:	edd3 7a00 	vldr	s15, [r3]
 8008ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bac:	ee17 2a90 	vmov	r2, s15
 8008bb0:	4b52      	ldr	r3, [pc, #328]	; (8008cfc <Convertvalue+0x160>)
 8008bb2:	601a      	str	r2, [r3, #0]
	float tmpFPM = PM25 - tmpIntPM1;
 8008bb4:	4b50      	ldr	r3, [pc, #320]	; (8008cf8 <Convertvalue+0x15c>)
 8008bb6:	ed93 7a00 	vldr	s14, [r3]
 8008bba:	4b50      	ldr	r3, [pc, #320]	; (8008cfc <Convertvalue+0x160>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bca:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpIntPM2 = trunc(tmpFPM * 100);
 8008bce:	edd7 7a03 	vldr	s15, [r7, #12]
 8008bd2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008d00 <Convertvalue+0x164>
 8008bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bda:	ee17 0a90 	vmov	r0, s15
 8008bde:	f7f7 fcbb 	bl	8000558 <__aeabi_f2d>
 8008be2:	4603      	mov	r3, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	ec44 3b10 	vmov	d0, r3, r4
 8008bea:	f004 f8ef 	bl	800cdcc <trunc>
 8008bee:	ec54 3b10 	vmov	r3, r4, d0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	f7f7 fd07 	bl	8000608 <__aeabi_d2iz>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	4b41      	ldr	r3, [pc, #260]	; (8008d04 <Convertvalue+0x168>)
 8008bfe:	601a      	str	r2, [r3, #0]
	//temperature = 9977;
	temp = (float)(temperature/1000.0f);
 8008c00:	4b41      	ldr	r3, [pc, #260]	; (8008d08 <Convertvalue+0x16c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c0c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8008d0c <Convertvalue+0x170>
 8008c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c14:	4b3e      	ldr	r3, [pc, #248]	; (8008d10 <Convertvalue+0x174>)
 8008c16:	edc3 7a00 	vstr	s15, [r3]
	tmpIntte1 = (int)temp;
 8008c1a:	4b3d      	ldr	r3, [pc, #244]	; (8008d10 <Convertvalue+0x174>)
 8008c1c:	edd3 7a00 	vldr	s15, [r3]
 8008c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c24:	ee17 2a90 	vmov	r2, s15
 8008c28:	4b3a      	ldr	r3, [pc, #232]	; (8008d14 <Convertvalue+0x178>)
 8008c2a:	601a      	str	r2, [r3, #0]
	float tmpT = temp - tmpIntte1;
 8008c2c:	4b38      	ldr	r3, [pc, #224]	; (8008d10 <Convertvalue+0x174>)
 8008c2e:	ed93 7a00 	vldr	s14, [r3]
 8008c32:	4b38      	ldr	r3, [pc, #224]	; (8008d14 <Convertvalue+0x178>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c42:	edc7 7a02 	vstr	s15, [r7, #8]
	tmpIntte2 = trunc(tmpT * 100);
 8008c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8008c4a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8008d00 <Convertvalue+0x164>
 8008c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c52:	ee17 0a90 	vmov	r0, s15
 8008c56:	f7f7 fc7f 	bl	8000558 <__aeabi_f2d>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	ec44 3b10 	vmov	d0, r3, r4
 8008c62:	f004 f8b3 	bl	800cdcc <trunc>
 8008c66:	ec54 3b10 	vmov	r3, r4, d0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f7f7 fccb 	bl	8000608 <__aeabi_d2iz>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b28      	ldr	r3, [pc, #160]	; (8008d18 <Convertvalue+0x17c>)
 8008c76:	601a      	str	r2, [r3, #0]
	//humidity = 9876;
	hum = (float)(humidity/1000.0f);
 8008c78:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <Convertvalue+0x180>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	ee07 3a90 	vmov	s15, r3
 8008c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c84:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008d0c <Convertvalue+0x170>
 8008c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c8c:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <Convertvalue+0x184>)
 8008c8e:	edc3 7a00 	vstr	s15, [r3]
	tmpInthu1 = (int) hum;
 8008c92:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <Convertvalue+0x184>)
 8008c94:	edd3 7a00 	vldr	s15, [r3]
 8008c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c9c:	ee17 2a90 	vmov	r2, s15
 8008ca0:	4b20      	ldr	r3, [pc, #128]	; (8008d24 <Convertvalue+0x188>)
 8008ca2:	601a      	str	r2, [r3, #0]
	float tmpH = hum - tmpInthu1;
 8008ca4:	4b1e      	ldr	r3, [pc, #120]	; (8008d20 <Convertvalue+0x184>)
 8008ca6:	ed93 7a00 	vldr	s14, [r3]
 8008caa:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <Convertvalue+0x188>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cba:	edc7 7a01 	vstr	s15, [r7, #4]
	tmpInthu2 = trunc(tmpH * 100);
 8008cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8008cc2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008d00 <Convertvalue+0x164>
 8008cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cca:	ee17 0a90 	vmov	r0, s15
 8008cce:	f7f7 fc43 	bl	8000558 <__aeabi_f2d>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	ec44 3b10 	vmov	d0, r3, r4
 8008cda:	f004 f877 	bl	800cdcc <trunc>
 8008cde:	ec54 3b10 	vmov	r3, r4, d0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	f7f7 fc8f 	bl	8000608 <__aeabi_d2iz>
 8008cea:	4602      	mov	r2, r0
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <Convertvalue+0x18c>)
 8008cee:	601a      	str	r2, [r3, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd90      	pop	{r4, r7, pc}
 8008cf8:	20004108 	.word	0x20004108
 8008cfc:	20004834 	.word	0x20004834
 8008d00:	42c80000 	.word	0x42c80000
 8008d04:	20004224 	.word	0x20004224
 8008d08:	20004048 	.word	0x20004048
 8008d0c:	447a0000 	.word	0x447a0000
 8008d10:	200041d4 	.word	0x200041d4
 8008d14:	20004220 	.word	0x20004220
 8008d18:	200044a8 	.word	0x200044a8
 8008d1c:	2000404c 	.word	0x2000404c
 8008d20:	20004104 	.word	0x20004104
 8008d24:	2000422c 	.word	0x2000422c
 8008d28:	200044d4 	.word	0x200044d4

08008d2c <FrameUART>:

/* Tạo Khung truyền với các giá trị lấy từ cảm biến và động cơ */
void FrameUART(void){
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
		itoa(tmpIntte1,(char*)tempe1,10);
 8008d30:	4bbc      	ldr	r3, [pc, #752]	; (8009024 <FrameUART+0x2f8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	220a      	movs	r2, #10
 8008d36:	49bc      	ldr	r1, [pc, #752]	; (8009028 <FrameUART+0x2fc>)
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f003 fbe7 	bl	800c50c <itoa>
		itoa(tmpIntte2,(char*)tempe2,10);
 8008d3e:	4bbb      	ldr	r3, [pc, #748]	; (800902c <FrameUART+0x300>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	220a      	movs	r2, #10
 8008d44:	49ba      	ldr	r1, [pc, #744]	; (8009030 <FrameUART+0x304>)
 8008d46:	4618      	mov	r0, r3
 8008d48:	f003 fbe0 	bl	800c50c <itoa>
		itoa(tmpInthu1,(char*)humi1,10);
 8008d4c:	4bb9      	ldr	r3, [pc, #740]	; (8009034 <FrameUART+0x308>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	220a      	movs	r2, #10
 8008d52:	49b9      	ldr	r1, [pc, #740]	; (8009038 <FrameUART+0x30c>)
 8008d54:	4618      	mov	r0, r3
 8008d56:	f003 fbd9 	bl	800c50c <itoa>
		itoa(tmpInthu2,(char*)humi2,10);
 8008d5a:	4bb8      	ldr	r3, [pc, #736]	; (800903c <FrameUART+0x310>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	220a      	movs	r2, #10
 8008d60:	49b7      	ldr	r1, [pc, #732]	; (8009040 <FrameUART+0x314>)
 8008d62:	4618      	mov	r0, r3
 8008d64:	f003 fbd2 	bl	800c50c <itoa>
		itoa(co2_ppm,(char*)CO2,10);
 8008d68:	4bb6      	ldr	r3, [pc, #728]	; (8009044 <FrameUART+0x318>)
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	220a      	movs	r2, #10
 8008d6e:	49b6      	ldr	r1, [pc, #728]	; (8009048 <FrameUART+0x31c>)
 8008d70:	4618      	mov	r0, r3
 8008d72:	f003 fbcb 	bl	800c50c <itoa>
		itoa(tvoc_ppb,(char*)VOC,10);
 8008d76:	4bb5      	ldr	r3, [pc, #724]	; (800904c <FrameUART+0x320>)
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	220a      	movs	r2, #10
 8008d7c:	49b4      	ldr	r1, [pc, #720]	; (8009050 <FrameUART+0x324>)
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f003 fbc4 	bl	800c50c <itoa>
		itoa(tmpIntPM1,(char*)PM251,10);
 8008d84:	4bb3      	ldr	r3, [pc, #716]	; (8009054 <FrameUART+0x328>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	220a      	movs	r2, #10
 8008d8a:	49b3      	ldr	r1, [pc, #716]	; (8009058 <FrameUART+0x32c>)
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f003 fbbd 	bl	800c50c <itoa>
		itoa(tmpIntPM2,(char*)PM252,10);
 8008d92:	4bb2      	ldr	r3, [pc, #712]	; (800905c <FrameUART+0x330>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	220a      	movs	r2, #10
 8008d98:	49b1      	ldr	r1, [pc, #708]	; (8009060 <FrameUART+0x334>)
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f003 fbb6 	bl	800c50c <itoa>

	   strcpy((char *) frame, (char *) "TE");
 8008da0:	4bb0      	ldr	r3, [pc, #704]	; (8009064 <FrameUART+0x338>)
 8008da2:	4ab1      	ldr	r2, [pc, #708]	; (8009068 <FrameUART+0x33c>)
 8008da4:	8811      	ldrh	r1, [r2, #0]
 8008da6:	7892      	ldrb	r2, [r2, #2]
 8008da8:	8019      	strh	r1, [r3, #0]
 8008daa:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame,(char *) tempe1);
 8008dac:	499e      	ldr	r1, [pc, #632]	; (8009028 <FrameUART+0x2fc>)
 8008dae:	48ad      	ldr	r0, [pc, #692]	; (8009064 <FrameUART+0x338>)
 8008db0:	f003 fbe2 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008db4:	48ab      	ldr	r0, [pc, #684]	; (8009064 <FrameUART+0x338>)
 8008db6:	f7f7 fa13 	bl	80001e0 <strlen>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4ba9      	ldr	r3, [pc, #676]	; (8009064 <FrameUART+0x338>)
 8008dc0:	4413      	add	r3, r2
 8008dc2:	49aa      	ldr	r1, [pc, #680]	; (800906c <FrameUART+0x340>)
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "A");
 8008dcc:	48a5      	ldr	r0, [pc, #660]	; (8009064 <FrameUART+0x338>)
 8008dce:	f7f7 fa07 	bl	80001e0 <strlen>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4ba3      	ldr	r3, [pc, #652]	; (8009064 <FrameUART+0x338>)
 8008dd8:	4413      	add	r3, r2
 8008dda:	49a5      	ldr	r1, [pc, #660]	; (8009070 <FrameUART+0x344>)
 8008ddc:	461a      	mov	r2, r3
 8008dde:	460b      	mov	r3, r1
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame,(char *) tempe2);
 8008de4:	4992      	ldr	r1, [pc, #584]	; (8009030 <FrameUART+0x304>)
 8008de6:	489f      	ldr	r0, [pc, #636]	; (8009064 <FrameUART+0x338>)
 8008de8:	f003 fbc6 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008dec:	489d      	ldr	r0, [pc, #628]	; (8009064 <FrameUART+0x338>)
 8008dee:	f7f7 f9f7 	bl	80001e0 <strlen>
 8008df2:	4603      	mov	r3, r0
 8008df4:	461a      	mov	r2, r3
 8008df6:	4b9b      	ldr	r3, [pc, #620]	; (8009064 <FrameUART+0x338>)
 8008df8:	4413      	add	r3, r2
 8008dfa:	499c      	ldr	r1, [pc, #624]	; (800906c <FrameUART+0x340>)
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	460b      	mov	r3, r1
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "HU");
 8008e04:	4897      	ldr	r0, [pc, #604]	; (8009064 <FrameUART+0x338>)
 8008e06:	f7f7 f9eb 	bl	80001e0 <strlen>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4b95      	ldr	r3, [pc, #596]	; (8009064 <FrameUART+0x338>)
 8008e10:	4413      	add	r3, r2
 8008e12:	4a98      	ldr	r2, [pc, #608]	; (8009074 <FrameUART+0x348>)
 8008e14:	8811      	ldrh	r1, [r2, #0]
 8008e16:	7892      	ldrb	r2, [r2, #2]
 8008e18:	8019      	strh	r1, [r3, #0]
 8008e1a:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) humi1 );
 8008e1c:	4986      	ldr	r1, [pc, #536]	; (8009038 <FrameUART+0x30c>)
 8008e1e:	4891      	ldr	r0, [pc, #580]	; (8009064 <FrameUART+0x338>)
 8008e20:	f003 fbaa 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008e24:	488f      	ldr	r0, [pc, #572]	; (8009064 <FrameUART+0x338>)
 8008e26:	f7f7 f9db 	bl	80001e0 <strlen>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4b8d      	ldr	r3, [pc, #564]	; (8009064 <FrameUART+0x338>)
 8008e30:	4413      	add	r3, r2
 8008e32:	498e      	ldr	r1, [pc, #568]	; (800906c <FrameUART+0x340>)
 8008e34:	461a      	mov	r2, r3
 8008e36:	460b      	mov	r3, r1
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "Q");
 8008e3c:	4889      	ldr	r0, [pc, #548]	; (8009064 <FrameUART+0x338>)
 8008e3e:	f7f7 f9cf 	bl	80001e0 <strlen>
 8008e42:	4603      	mov	r3, r0
 8008e44:	461a      	mov	r2, r3
 8008e46:	4b87      	ldr	r3, [pc, #540]	; (8009064 <FrameUART+0x338>)
 8008e48:	4413      	add	r3, r2
 8008e4a:	498b      	ldr	r1, [pc, #556]	; (8009078 <FrameUART+0x34c>)
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	460b      	mov	r3, r1
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) humi2 );
 8008e54:	497a      	ldr	r1, [pc, #488]	; (8009040 <FrameUART+0x314>)
 8008e56:	4883      	ldr	r0, [pc, #524]	; (8009064 <FrameUART+0x338>)
 8008e58:	f003 fb8e 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008e5c:	4881      	ldr	r0, [pc, #516]	; (8009064 <FrameUART+0x338>)
 8008e5e:	f7f7 f9bf 	bl	80001e0 <strlen>
 8008e62:	4603      	mov	r3, r0
 8008e64:	461a      	mov	r2, r3
 8008e66:	4b7f      	ldr	r3, [pc, #508]	; (8009064 <FrameUART+0x338>)
 8008e68:	4413      	add	r3, r2
 8008e6a:	4980      	ldr	r1, [pc, #512]	; (800906c <FrameUART+0x340>)
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	460b      	mov	r3, r1
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "CO");
 8008e74:	487b      	ldr	r0, [pc, #492]	; (8009064 <FrameUART+0x338>)
 8008e76:	f7f7 f9b3 	bl	80001e0 <strlen>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4b79      	ldr	r3, [pc, #484]	; (8009064 <FrameUART+0x338>)
 8008e80:	4413      	add	r3, r2
 8008e82:	4a7e      	ldr	r2, [pc, #504]	; (800907c <FrameUART+0x350>)
 8008e84:	8811      	ldrh	r1, [r2, #0]
 8008e86:	7892      	ldrb	r2, [r2, #2]
 8008e88:	8019      	strh	r1, [r3, #0]
 8008e8a:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) CO2 );
 8008e8c:	496e      	ldr	r1, [pc, #440]	; (8009048 <FrameUART+0x31c>)
 8008e8e:	4875      	ldr	r0, [pc, #468]	; (8009064 <FrameUART+0x338>)
 8008e90:	f003 fb72 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008e94:	4873      	ldr	r0, [pc, #460]	; (8009064 <FrameUART+0x338>)
 8008e96:	f7f7 f9a3 	bl	80001e0 <strlen>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4b71      	ldr	r3, [pc, #452]	; (8009064 <FrameUART+0x338>)
 8008ea0:	4413      	add	r3, r2
 8008ea2:	4972      	ldr	r1, [pc, #456]	; (800906c <FrameUART+0x340>)
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "VO");
 8008eac:	486d      	ldr	r0, [pc, #436]	; (8009064 <FrameUART+0x338>)
 8008eae:	f7f7 f997 	bl	80001e0 <strlen>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4b6b      	ldr	r3, [pc, #428]	; (8009064 <FrameUART+0x338>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	4a71      	ldr	r2, [pc, #452]	; (8009080 <FrameUART+0x354>)
 8008ebc:	8811      	ldrh	r1, [r2, #0]
 8008ebe:	7892      	ldrb	r2, [r2, #2]
 8008ec0:	8019      	strh	r1, [r3, #0]
 8008ec2:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) VOC );
 8008ec4:	4962      	ldr	r1, [pc, #392]	; (8009050 <FrameUART+0x324>)
 8008ec6:	4867      	ldr	r0, [pc, #412]	; (8009064 <FrameUART+0x338>)
 8008ec8:	f003 fb56 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008ecc:	4865      	ldr	r0, [pc, #404]	; (8009064 <FrameUART+0x338>)
 8008ece:	f7f7 f987 	bl	80001e0 <strlen>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4b63      	ldr	r3, [pc, #396]	; (8009064 <FrameUART+0x338>)
 8008ed8:	4413      	add	r3, r2
 8008eda:	4964      	ldr	r1, [pc, #400]	; (800906c <FrameUART+0x340>)
 8008edc:	461a      	mov	r2, r3
 8008ede:	460b      	mov	r3, r1
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "PM");
 8008ee4:	485f      	ldr	r0, [pc, #380]	; (8009064 <FrameUART+0x338>)
 8008ee6:	f7f7 f97b 	bl	80001e0 <strlen>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
 8008eee:	4b5d      	ldr	r3, [pc, #372]	; (8009064 <FrameUART+0x338>)
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4a64      	ldr	r2, [pc, #400]	; (8009084 <FrameUART+0x358>)
 8008ef4:	8811      	ldrh	r1, [r2, #0]
 8008ef6:	7892      	ldrb	r2, [r2, #2]
 8008ef8:	8019      	strh	r1, [r3, #0]
 8008efa:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) PM251 );
 8008efc:	4956      	ldr	r1, [pc, #344]	; (8009058 <FrameUART+0x32c>)
 8008efe:	4859      	ldr	r0, [pc, #356]	; (8009064 <FrameUART+0x338>)
 8008f00:	f003 fb3a 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008f04:	4857      	ldr	r0, [pc, #348]	; (8009064 <FrameUART+0x338>)
 8008f06:	f7f7 f96b 	bl	80001e0 <strlen>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b55      	ldr	r3, [pc, #340]	; (8009064 <FrameUART+0x338>)
 8008f10:	4413      	add	r3, r2
 8008f12:	4956      	ldr	r1, [pc, #344]	; (800906c <FrameUART+0x340>)
 8008f14:	461a      	mov	r2, r3
 8008f16:	460b      	mov	r3, r1
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "S");
 8008f1c:	4851      	ldr	r0, [pc, #324]	; (8009064 <FrameUART+0x338>)
 8008f1e:	f7f7 f95f 	bl	80001e0 <strlen>
 8008f22:	4603      	mov	r3, r0
 8008f24:	461a      	mov	r2, r3
 8008f26:	4b4f      	ldr	r3, [pc, #316]	; (8009064 <FrameUART+0x338>)
 8008f28:	4413      	add	r3, r2
 8008f2a:	4957      	ldr	r1, [pc, #348]	; (8009088 <FrameUART+0x35c>)
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	460b      	mov	r3, r1
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) PM252 );
 8008f34:	494a      	ldr	r1, [pc, #296]	; (8009060 <FrameUART+0x334>)
 8008f36:	484b      	ldr	r0, [pc, #300]	; (8009064 <FrameUART+0x338>)
 8008f38:	f003 fb1e 	bl	800c578 <strcat>
	   strcat((char *) frame, (char *) ":");
 8008f3c:	4849      	ldr	r0, [pc, #292]	; (8009064 <FrameUART+0x338>)
 8008f3e:	f7f7 f94f 	bl	80001e0 <strlen>
 8008f42:	4603      	mov	r3, r0
 8008f44:	461a      	mov	r2, r3
 8008f46:	4b47      	ldr	r3, [pc, #284]	; (8009064 <FrameUART+0x338>)
 8008f48:	4413      	add	r3, r2
 8008f4a:	4948      	ldr	r1, [pc, #288]	; (800906c <FrameUART+0x340>)
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	460b      	mov	r3, r1
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "PO");
 8008f54:	4843      	ldr	r0, [pc, #268]	; (8009064 <FrameUART+0x338>)
 8008f56:	f7f7 f943 	bl	80001e0 <strlen>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4b41      	ldr	r3, [pc, #260]	; (8009064 <FrameUART+0x338>)
 8008f60:	4413      	add	r3, r2
 8008f62:	4a4a      	ldr	r2, [pc, #296]	; (800908c <FrameUART+0x360>)
 8008f64:	8811      	ldrh	r1, [r2, #0]
 8008f66:	7892      	ldrb	r2, [r2, #2]
 8008f68:	8019      	strh	r1, [r3, #0]
 8008f6a:	709a      	strb	r2, [r3, #2]
	   if (power == 1)
 8008f6c:	4b48      	ldr	r3, [pc, #288]	; (8009090 <FrameUART+0x364>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d10c      	bne.n	8008f8e <FrameUART+0x262>
	   strcat((char *) frame, (char *) "1" );
 8008f74:	483b      	ldr	r0, [pc, #236]	; (8009064 <FrameUART+0x338>)
 8008f76:	f7f7 f933 	bl	80001e0 <strlen>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	4b39      	ldr	r3, [pc, #228]	; (8009064 <FrameUART+0x338>)
 8008f80:	4413      	add	r3, r2
 8008f82:	4944      	ldr	r1, [pc, #272]	; (8009094 <FrameUART+0x368>)
 8008f84:	461a      	mov	r2, r3
 8008f86:	460b      	mov	r3, r1
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	8013      	strh	r3, [r2, #0]
 8008f8c:	e00f      	b.n	8008fae <FrameUART+0x282>
	   else if (power == 0)
 8008f8e:	4b40      	ldr	r3, [pc, #256]	; (8009090 <FrameUART+0x364>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10b      	bne.n	8008fae <FrameUART+0x282>
	   strcat((char *) frame, (char *) "0" );
 8008f96:	4833      	ldr	r0, [pc, #204]	; (8009064 <FrameUART+0x338>)
 8008f98:	f7f7 f922 	bl	80001e0 <strlen>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	4b30      	ldr	r3, [pc, #192]	; (8009064 <FrameUART+0x338>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	493c      	ldr	r1, [pc, #240]	; (8009098 <FrameUART+0x36c>)
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	460b      	mov	r3, r1
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) ":");
 8008fae:	482d      	ldr	r0, [pc, #180]	; (8009064 <FrameUART+0x338>)
 8008fb0:	f7f7 f916 	bl	80001e0 <strlen>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	4b2a      	ldr	r3, [pc, #168]	; (8009064 <FrameUART+0x338>)
 8008fba:	4413      	add	r3, r2
 8008fbc:	492b      	ldr	r1, [pc, #172]	; (800906c <FrameUART+0x340>)
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "SP");
 8008fc6:	4827      	ldr	r0, [pc, #156]	; (8009064 <FrameUART+0x338>)
 8008fc8:	f7f7 f90a 	bl	80001e0 <strlen>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4b24      	ldr	r3, [pc, #144]	; (8009064 <FrameUART+0x338>)
 8008fd2:	4413      	add	r3, r2
 8008fd4:	4a31      	ldr	r2, [pc, #196]	; (800909c <FrameUART+0x370>)
 8008fd6:	8811      	ldrh	r1, [r2, #0]
 8008fd8:	7892      	ldrb	r2, [r2, #2]
 8008fda:	8019      	strh	r1, [r3, #0]
 8008fdc:	709a      	strb	r2, [r3, #2]
	   if(speed == 0)
 8008fde:	4b30      	ldr	r3, [pc, #192]	; (80090a0 <FrameUART+0x374>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10c      	bne.n	8009000 <FrameUART+0x2d4>
		   strcat((char *) frame, (char *) "0" );
 8008fe6:	481f      	ldr	r0, [pc, #124]	; (8009064 <FrameUART+0x338>)
 8008fe8:	f7f7 f8fa 	bl	80001e0 <strlen>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <FrameUART+0x338>)
 8008ff2:	4413      	add	r3, r2
 8008ff4:	4928      	ldr	r1, [pc, #160]	; (8009098 <FrameUART+0x36c>)
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	8013      	strh	r3, [r2, #0]
 8008ffe:	e072      	b.n	80090e6 <FrameUART+0x3ba>
	   else if(speed == 1)
 8009000:	4b27      	ldr	r3, [pc, #156]	; (80090a0 <FrameUART+0x374>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d14d      	bne.n	80090a4 <FrameUART+0x378>
		   strcat((char *) frame, (char *) "1" );
 8009008:	4816      	ldr	r0, [pc, #88]	; (8009064 <FrameUART+0x338>)
 800900a:	f7f7 f8e9 	bl	80001e0 <strlen>
 800900e:	4603      	mov	r3, r0
 8009010:	461a      	mov	r2, r3
 8009012:	4b14      	ldr	r3, [pc, #80]	; (8009064 <FrameUART+0x338>)
 8009014:	4413      	add	r3, r2
 8009016:	491f      	ldr	r1, [pc, #124]	; (8009094 <FrameUART+0x368>)
 8009018:	461a      	mov	r2, r3
 800901a:	460b      	mov	r3, r1
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	8013      	strh	r3, [r2, #0]
 8009020:	e061      	b.n	80090e6 <FrameUART+0x3ba>
 8009022:	bf00      	nop
 8009024:	20004220 	.word	0x20004220
 8009028:	2000405c 	.word	0x2000405c
 800902c:	200044a8 	.word	0x200044a8
 8009030:	20004064 	.word	0x20004064
 8009034:	2000422c 	.word	0x2000422c
 8009038:	2000406c 	.word	0x2000406c
 800903c:	200044d4 	.word	0x200044d4
 8009040:	20004074 	.word	0x20004074
 8009044:	20000016 	.word	0x20000016
 8009048:	2000407c 	.word	0x2000407c
 800904c:	20000014 	.word	0x20000014
 8009050:	20004084 	.word	0x20004084
 8009054:	20004834 	.word	0x20004834
 8009058:	2000408c 	.word	0x2000408c
 800905c:	20004224 	.word	0x20004224
 8009060:	20004094 	.word	0x20004094
 8009064:	20004558 	.word	0x20004558
 8009068:	0800cf60 	.word	0x0800cf60
 800906c:	0800cf64 	.word	0x0800cf64
 8009070:	0800cf68 	.word	0x0800cf68
 8009074:	0800cf6c 	.word	0x0800cf6c
 8009078:	0800cf70 	.word	0x0800cf70
 800907c:	0800cf74 	.word	0x0800cf74
 8009080:	0800cf78 	.word	0x0800cf78
 8009084:	0800cf7c 	.word	0x0800cf7c
 8009088:	0800cf80 	.word	0x0800cf80
 800908c:	0800cf84 	.word	0x0800cf84
 8009090:	20004174 	.word	0x20004174
 8009094:	0800cf88 	.word	0x0800cf88
 8009098:	0800cf8c 	.word	0x0800cf8c
 800909c:	0800cf90 	.word	0x0800cf90
 80090a0:	200045bc 	.word	0x200045bc
	   else if(speed == 2)
 80090a4:	4ba8      	ldr	r3, [pc, #672]	; (8009348 <FrameUART+0x61c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d10c      	bne.n	80090c6 <FrameUART+0x39a>
		   strcat((char *) frame, (char *) "2" );
 80090ac:	48a7      	ldr	r0, [pc, #668]	; (800934c <FrameUART+0x620>)
 80090ae:	f7f7 f897 	bl	80001e0 <strlen>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	4ba5      	ldr	r3, [pc, #660]	; (800934c <FrameUART+0x620>)
 80090b8:	4413      	add	r3, r2
 80090ba:	49a5      	ldr	r1, [pc, #660]	; (8009350 <FrameUART+0x624>)
 80090bc:	461a      	mov	r2, r3
 80090be:	460b      	mov	r3, r1
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	8013      	strh	r3, [r2, #0]
 80090c4:	e00f      	b.n	80090e6 <FrameUART+0x3ba>
	   else if(speed == 3)
 80090c6:	4ba0      	ldr	r3, [pc, #640]	; (8009348 <FrameUART+0x61c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d10b      	bne.n	80090e6 <FrameUART+0x3ba>
		   strcat((char *) frame, (char *) "3" );
 80090ce:	489f      	ldr	r0, [pc, #636]	; (800934c <FrameUART+0x620>)
 80090d0:	f7f7 f886 	bl	80001e0 <strlen>
 80090d4:	4603      	mov	r3, r0
 80090d6:	461a      	mov	r2, r3
 80090d8:	4b9c      	ldr	r3, [pc, #624]	; (800934c <FrameUART+0x620>)
 80090da:	4413      	add	r3, r2
 80090dc:	499d      	ldr	r1, [pc, #628]	; (8009354 <FrameUART+0x628>)
 80090de:	461a      	mov	r2, r3
 80090e0:	460b      	mov	r3, r1
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) ":");
 80090e6:	4899      	ldr	r0, [pc, #612]	; (800934c <FrameUART+0x620>)
 80090e8:	f7f7 f87a 	bl	80001e0 <strlen>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	4b96      	ldr	r3, [pc, #600]	; (800934c <FrameUART+0x620>)
 80090f2:	4413      	add	r3, r2
 80090f4:	4998      	ldr	r1, [pc, #608]	; (8009358 <FrameUART+0x62c>)
 80090f6:	461a      	mov	r2, r3
 80090f8:	460b      	mov	r3, r1
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "NIGH");
 80090fe:	4893      	ldr	r0, [pc, #588]	; (800934c <FrameUART+0x620>)
 8009100:	f7f7 f86e 	bl	80001e0 <strlen>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	4b90      	ldr	r3, [pc, #576]	; (800934c <FrameUART+0x620>)
 800910a:	4413      	add	r3, r2
 800910c:	4a93      	ldr	r2, [pc, #588]	; (800935c <FrameUART+0x630>)
 800910e:	6810      	ldr	r0, [r2, #0]
 8009110:	6018      	str	r0, [r3, #0]
 8009112:	7912      	ldrb	r2, [r2, #4]
 8009114:	711a      	strb	r2, [r3, #4]
	   if (nightmode ==0){
 8009116:	4b92      	ldr	r3, [pc, #584]	; (8009360 <FrameUART+0x634>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10c      	bne.n	8009138 <FrameUART+0x40c>
		   strcat((char *) frame, (char *) "0" );
 800911e:	488b      	ldr	r0, [pc, #556]	; (800934c <FrameUART+0x620>)
 8009120:	f7f7 f85e 	bl	80001e0 <strlen>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	4b88      	ldr	r3, [pc, #544]	; (800934c <FrameUART+0x620>)
 800912a:	4413      	add	r3, r2
 800912c:	498d      	ldr	r1, [pc, #564]	; (8009364 <FrameUART+0x638>)
 800912e:	461a      	mov	r2, r3
 8009130:	460b      	mov	r3, r1
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	8013      	strh	r3, [r2, #0]
 8009136:	e00f      	b.n	8009158 <FrameUART+0x42c>
	   }
	   else if (nightmode == 1){
 8009138:	4b89      	ldr	r3, [pc, #548]	; (8009360 <FrameUART+0x634>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10b      	bne.n	8009158 <FrameUART+0x42c>
		   strcat((char *) frame, (char *) "1" );
 8009140:	4882      	ldr	r0, [pc, #520]	; (800934c <FrameUART+0x620>)
 8009142:	f7f7 f84d 	bl	80001e0 <strlen>
 8009146:	4603      	mov	r3, r0
 8009148:	461a      	mov	r2, r3
 800914a:	4b80      	ldr	r3, [pc, #512]	; (800934c <FrameUART+0x620>)
 800914c:	4413      	add	r3, r2
 800914e:	4986      	ldr	r1, [pc, #536]	; (8009368 <FrameUART+0x63c>)
 8009150:	461a      	mov	r2, r3
 8009152:	460b      	mov	r3, r1
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	8013      	strh	r3, [r2, #0]
	   }
	   strcat((char *) frame, (char *) ":");
 8009158:	487c      	ldr	r0, [pc, #496]	; (800934c <FrameUART+0x620>)
 800915a:	f7f7 f841 	bl	80001e0 <strlen>
 800915e:	4603      	mov	r3, r0
 8009160:	461a      	mov	r2, r3
 8009162:	4b7a      	ldr	r3, [pc, #488]	; (800934c <FrameUART+0x620>)
 8009164:	4413      	add	r3, r2
 8009166:	497c      	ldr	r1, [pc, #496]	; (8009358 <FrameUART+0x62c>)
 8009168:	461a      	mov	r2, r3
 800916a:	460b      	mov	r3, r1
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "FILT");
 8009170:	4876      	ldr	r0, [pc, #472]	; (800934c <FrameUART+0x620>)
 8009172:	f7f7 f835 	bl	80001e0 <strlen>
 8009176:	4603      	mov	r3, r0
 8009178:	461a      	mov	r2, r3
 800917a:	4b74      	ldr	r3, [pc, #464]	; (800934c <FrameUART+0x620>)
 800917c:	4413      	add	r3, r2
 800917e:	4a7b      	ldr	r2, [pc, #492]	; (800936c <FrameUART+0x640>)
 8009180:	6810      	ldr	r0, [r2, #0]
 8009182:	6018      	str	r0, [r3, #0]
 8009184:	7912      	ldrb	r2, [r2, #4]
 8009186:	711a      	strb	r2, [r3, #4]
	   if (filmode ==0){
 8009188:	4b79      	ldr	r3, [pc, #484]	; (8009370 <FrameUART+0x644>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10c      	bne.n	80091aa <FrameUART+0x47e>
			strcat((char *) frame, (char *) "0" );
 8009190:	486e      	ldr	r0, [pc, #440]	; (800934c <FrameUART+0x620>)
 8009192:	f7f7 f825 	bl	80001e0 <strlen>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	4b6c      	ldr	r3, [pc, #432]	; (800934c <FrameUART+0x620>)
 800919c:	4413      	add	r3, r2
 800919e:	4971      	ldr	r1, [pc, #452]	; (8009364 <FrameUART+0x638>)
 80091a0:	461a      	mov	r2, r3
 80091a2:	460b      	mov	r3, r1
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	8013      	strh	r3, [r2, #0]
 80091a8:	e00f      	b.n	80091ca <FrameUART+0x49e>
		   }
	   else if (filmode == 1){
 80091aa:	4b71      	ldr	r3, [pc, #452]	; (8009370 <FrameUART+0x644>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d10b      	bne.n	80091ca <FrameUART+0x49e>
			strcat((char *) frame, (char *) "1" );
 80091b2:	4866      	ldr	r0, [pc, #408]	; (800934c <FrameUART+0x620>)
 80091b4:	f7f7 f814 	bl	80001e0 <strlen>
 80091b8:	4603      	mov	r3, r0
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b63      	ldr	r3, [pc, #396]	; (800934c <FrameUART+0x620>)
 80091be:	4413      	add	r3, r2
 80091c0:	4969      	ldr	r1, [pc, #420]	; (8009368 <FrameUART+0x63c>)
 80091c2:	461a      	mov	r2, r3
 80091c4:	460b      	mov	r3, r1
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	8013      	strh	r3, [r2, #0]
		   }
	   strcat((char *) frame, (char *) ":");
 80091ca:	4860      	ldr	r0, [pc, #384]	; (800934c <FrameUART+0x620>)
 80091cc:	f7f7 f808 	bl	80001e0 <strlen>
 80091d0:	4603      	mov	r3, r0
 80091d2:	461a      	mov	r2, r3
 80091d4:	4b5d      	ldr	r3, [pc, #372]	; (800934c <FrameUART+0x620>)
 80091d6:	4413      	add	r3, r2
 80091d8:	495f      	ldr	r1, [pc, #380]	; (8009358 <FrameUART+0x62c>)
 80091da:	461a      	mov	r2, r3
 80091dc:	460b      	mov	r3, r1
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "CTRL");
 80091e2:	485a      	ldr	r0, [pc, #360]	; (800934c <FrameUART+0x620>)
 80091e4:	f7f6 fffc 	bl	80001e0 <strlen>
 80091e8:	4603      	mov	r3, r0
 80091ea:	461a      	mov	r2, r3
 80091ec:	4b57      	ldr	r3, [pc, #348]	; (800934c <FrameUART+0x620>)
 80091ee:	4413      	add	r3, r2
 80091f0:	4a60      	ldr	r2, [pc, #384]	; (8009374 <FrameUART+0x648>)
 80091f2:	6810      	ldr	r0, [r2, #0]
 80091f4:	6018      	str	r0, [r3, #0]
 80091f6:	7912      	ldrb	r2, [r2, #4]
 80091f8:	711a      	strb	r2, [r3, #4]
	   if (ctrmode ==0){
 80091fa:	4b5f      	ldr	r3, [pc, #380]	; (8009378 <FrameUART+0x64c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10c      	bne.n	800921c <FrameUART+0x4f0>
			strcat((char *) frame, (char *) "0" );
 8009202:	4852      	ldr	r0, [pc, #328]	; (800934c <FrameUART+0x620>)
 8009204:	f7f6 ffec 	bl	80001e0 <strlen>
 8009208:	4603      	mov	r3, r0
 800920a:	461a      	mov	r2, r3
 800920c:	4b4f      	ldr	r3, [pc, #316]	; (800934c <FrameUART+0x620>)
 800920e:	4413      	add	r3, r2
 8009210:	4954      	ldr	r1, [pc, #336]	; (8009364 <FrameUART+0x638>)
 8009212:	461a      	mov	r2, r3
 8009214:	460b      	mov	r3, r1
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	8013      	strh	r3, [r2, #0]
 800921a:	e00f      	b.n	800923c <FrameUART+0x510>
		   }
	   else if (ctrmode == 1){
 800921c:	4b56      	ldr	r3, [pc, #344]	; (8009378 <FrameUART+0x64c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d10b      	bne.n	800923c <FrameUART+0x510>
			strcat((char *) frame, (char *) "1" );
 8009224:	4849      	ldr	r0, [pc, #292]	; (800934c <FrameUART+0x620>)
 8009226:	f7f6 ffdb 	bl	80001e0 <strlen>
 800922a:	4603      	mov	r3, r0
 800922c:	461a      	mov	r2, r3
 800922e:	4b47      	ldr	r3, [pc, #284]	; (800934c <FrameUART+0x620>)
 8009230:	4413      	add	r3, r2
 8009232:	494d      	ldr	r1, [pc, #308]	; (8009368 <FrameUART+0x63c>)
 8009234:	461a      	mov	r2, r3
 8009236:	460b      	mov	r3, r1
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	8013      	strh	r3, [r2, #0]
			   }
	   strcat((char *) frame, (char *) ":");
 800923c:	4843      	ldr	r0, [pc, #268]	; (800934c <FrameUART+0x620>)
 800923e:	f7f6 ffcf 	bl	80001e0 <strlen>
 8009242:	4603      	mov	r3, r0
 8009244:	461a      	mov	r2, r3
 8009246:	4b41      	ldr	r3, [pc, #260]	; (800934c <FrameUART+0x620>)
 8009248:	4413      	add	r3, r2
 800924a:	4943      	ldr	r1, [pc, #268]	; (8009358 <FrameUART+0x62c>)
 800924c:	461a      	mov	r2, r3
 800924e:	460b      	mov	r3, r1
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "UV");
 8009254:	483d      	ldr	r0, [pc, #244]	; (800934c <FrameUART+0x620>)
 8009256:	f7f6 ffc3 	bl	80001e0 <strlen>
 800925a:	4603      	mov	r3, r0
 800925c:	461a      	mov	r2, r3
 800925e:	4b3b      	ldr	r3, [pc, #236]	; (800934c <FrameUART+0x620>)
 8009260:	4413      	add	r3, r2
 8009262:	4a46      	ldr	r2, [pc, #280]	; (800937c <FrameUART+0x650>)
 8009264:	8811      	ldrh	r1, [r2, #0]
 8009266:	7892      	ldrb	r2, [r2, #2]
 8009268:	8019      	strh	r1, [r3, #0]
 800926a:	709a      	strb	r2, [r3, #2]
	   if (UVmode == 0){
 800926c:	4b44      	ldr	r3, [pc, #272]	; (8009380 <FrameUART+0x654>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10c      	bne.n	800928e <FrameUART+0x562>
			strcat((char *) frame, (char *) "0" );
 8009274:	4835      	ldr	r0, [pc, #212]	; (800934c <FrameUART+0x620>)
 8009276:	f7f6 ffb3 	bl	80001e0 <strlen>
 800927a:	4603      	mov	r3, r0
 800927c:	461a      	mov	r2, r3
 800927e:	4b33      	ldr	r3, [pc, #204]	; (800934c <FrameUART+0x620>)
 8009280:	4413      	add	r3, r2
 8009282:	4938      	ldr	r1, [pc, #224]	; (8009364 <FrameUART+0x638>)
 8009284:	461a      	mov	r2, r3
 8009286:	460b      	mov	r3, r1
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	8013      	strh	r3, [r2, #0]
 800928c:	e00f      	b.n	80092ae <FrameUART+0x582>
	   }
	   else if (UVmode == 1){
 800928e:	4b3c      	ldr	r3, [pc, #240]	; (8009380 <FrameUART+0x654>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d10b      	bne.n	80092ae <FrameUART+0x582>
			strcat((char *) frame, (char *) "1" );
 8009296:	482d      	ldr	r0, [pc, #180]	; (800934c <FrameUART+0x620>)
 8009298:	f7f6 ffa2 	bl	80001e0 <strlen>
 800929c:	4603      	mov	r3, r0
 800929e:	461a      	mov	r2, r3
 80092a0:	4b2a      	ldr	r3, [pc, #168]	; (800934c <FrameUART+0x620>)
 80092a2:	4413      	add	r3, r2
 80092a4:	4930      	ldr	r1, [pc, #192]	; (8009368 <FrameUART+0x63c>)
 80092a6:	461a      	mov	r2, r3
 80092a8:	460b      	mov	r3, r1
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	8013      	strh	r3, [r2, #0]
		}
	   strcat((char *) frame, (char *) ":");
 80092ae:	4827      	ldr	r0, [pc, #156]	; (800934c <FrameUART+0x620>)
 80092b0:	f7f6 ff96 	bl	80001e0 <strlen>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	4b24      	ldr	r3, [pc, #144]	; (800934c <FrameUART+0x620>)
 80092ba:	4413      	add	r3, r2
 80092bc:	4926      	ldr	r1, [pc, #152]	; (8009358 <FrameUART+0x62c>)
 80092be:	461a      	mov	r2, r3
 80092c0:	460b      	mov	r3, r1
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	8013      	strh	r3, [r2, #0]
	   	   strcat((char *) frame, (char *) "IAN");
 80092c6:	4821      	ldr	r0, [pc, #132]	; (800934c <FrameUART+0x620>)
 80092c8:	f7f6 ff8a 	bl	80001e0 <strlen>
 80092cc:	4603      	mov	r3, r0
 80092ce:	461a      	mov	r2, r3
 80092d0:	4b1e      	ldr	r3, [pc, #120]	; (800934c <FrameUART+0x620>)
 80092d2:	4413      	add	r3, r2
 80092d4:	4a2b      	ldr	r2, [pc, #172]	; (8009384 <FrameUART+0x658>)
 80092d6:	6810      	ldr	r0, [r2, #0]
 80092d8:	6018      	str	r0, [r3, #0]
	   	   if (ionval ==0){
 80092da:	4b2b      	ldr	r3, [pc, #172]	; (8009388 <FrameUART+0x65c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10c      	bne.n	80092fc <FrameUART+0x5d0>
	   			strcat((char *) frame, (char *) "0" );
 80092e2:	481a      	ldr	r0, [pc, #104]	; (800934c <FrameUART+0x620>)
 80092e4:	f7f6 ff7c 	bl	80001e0 <strlen>
 80092e8:	4603      	mov	r3, r0
 80092ea:	461a      	mov	r2, r3
 80092ec:	4b17      	ldr	r3, [pc, #92]	; (800934c <FrameUART+0x620>)
 80092ee:	4413      	add	r3, r2
 80092f0:	491c      	ldr	r1, [pc, #112]	; (8009364 <FrameUART+0x638>)
 80092f2:	461a      	mov	r2, r3
 80092f4:	460b      	mov	r3, r1
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	8013      	strh	r3, [r2, #0]
 80092fa:	e00f      	b.n	800931c <FrameUART+0x5f0>
		   }
	   	   else if (ionval == 1){
 80092fc:	4b22      	ldr	r3, [pc, #136]	; (8009388 <FrameUART+0x65c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d10b      	bne.n	800931c <FrameUART+0x5f0>
	   			strcat((char *) frame, (char *) "1" );
 8009304:	4811      	ldr	r0, [pc, #68]	; (800934c <FrameUART+0x620>)
 8009306:	f7f6 ff6b 	bl	80001e0 <strlen>
 800930a:	4603      	mov	r3, r0
 800930c:	461a      	mov	r2, r3
 800930e:	4b0f      	ldr	r3, [pc, #60]	; (800934c <FrameUART+0x620>)
 8009310:	4413      	add	r3, r2
 8009312:	4915      	ldr	r1, [pc, #84]	; (8009368 <FrameUART+0x63c>)
 8009314:	461a      	mov	r2, r3
 8009316:	460b      	mov	r3, r1
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	8013      	strh	r3, [r2, #0]
		   }
	   strcat((char *) frame, (char *) "\n");
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <FrameUART+0x620>)
 800931e:	f7f6 ff5f 	bl	80001e0 <strlen>
 8009322:	4603      	mov	r3, r0
 8009324:	461a      	mov	r2, r3
 8009326:	4b09      	ldr	r3, [pc, #36]	; (800934c <FrameUART+0x620>)
 8009328:	4413      	add	r3, r2
 800932a:	4918      	ldr	r1, [pc, #96]	; (800938c <FrameUART+0x660>)
 800932c:	461a      	mov	r2, r3
 800932e:	460b      	mov	r3, r1
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	8013      	strh	r3, [r2, #0]
	   length = strlen((char*)&frame);
 8009334:	4805      	ldr	r0, [pc, #20]	; (800934c <FrameUART+0x620>)
 8009336:	f7f6 ff53 	bl	80001e0 <strlen>
 800933a:	4603      	mov	r3, r0
 800933c:	461a      	mov	r2, r3
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <FrameUART+0x664>)
 8009340:	601a      	str	r2, [r3, #0]
}
 8009342:	bf00      	nop
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200045bc 	.word	0x200045bc
 800934c:	20004558 	.word	0x20004558
 8009350:	0800cf94 	.word	0x0800cf94
 8009354:	0800cf98 	.word	0x0800cf98
 8009358:	0800cf64 	.word	0x0800cf64
 800935c:	0800cf9c 	.word	0x0800cf9c
 8009360:	200044b0 	.word	0x200044b0
 8009364:	0800cf8c 	.word	0x0800cf8c
 8009368:	0800cf88 	.word	0x0800cf88
 800936c:	0800cfa4 	.word	0x0800cfa4
 8009370:	20004864 	.word	0x20004864
 8009374:	0800cfac 	.word	0x0800cfac
 8009378:	200041d8 	.word	0x200041d8
 800937c:	0800cfb4 	.word	0x0800cfb4
 8009380:	20004170 	.word	0x20004170
 8009384:	0800cfb8 	.word	0x0800cfb8
 8009388:	200044ac 	.word	0x200044ac
 800938c:	0800cfbc 	.word	0x0800cfbc
 8009390:	20004058 	.word	0x20004058

08009394 <CheckUART>:
void CheckUART(void){
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af02      	add	r7, sp, #8
	if(Transfer_cplt){
 800939a:	4bab      	ldr	r3, [pc, #684]	; (8009648 <CheckUART+0x2b4>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 83ee 	beq.w	8009b80 <CheckUART+0x7ec>

	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 80093a4:	2300      	movs	r3, #0
 80093a6:	607b      	str	r3, [r7, #4]
 80093a8:	e392      	b.n	8009ad0 <CheckUART+0x73c>
		  if(Rx_Buffer[i] =='h' && Rx_Buffer[i+1]=='i'){ // Nhận nút điều khiển động cơ hight từ App
 80093aa:	4aa8      	ldr	r2, [pc, #672]	; (800964c <CheckUART+0x2b8>)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4413      	add	r3, r2
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b68      	cmp	r3, #104	; 0x68
 80093b4:	d12b      	bne.n	800940e <CheckUART+0x7a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4aa4      	ldr	r2, [pc, #656]	; (800964c <CheckUART+0x2b8>)
 80093bc:	5cd3      	ldrb	r3, [r2, r3]
 80093be:	2b69      	cmp	r3, #105	; 0x69
 80093c0:	d125      	bne.n	800940e <CheckUART+0x7a>

			  speed = hight;
 80093c2:	4ba3      	ldr	r3, [pc, #652]	; (8009650 <CheckUART+0x2bc>)
 80093c4:	2203      	movs	r2, #3
 80093c6:	601a      	str	r2, [r3, #0]
//			  fan_1_run(hightspeed);
//			  fan_2_run(hightspeed);
			  fan_12_run(hightspeed);
 80093c8:	2000      	movs	r0, #0
 80093ca:	f7fe fd39 	bl	8007e40 <fan_12_run>
			  num = SPEED_HIGHT;
 80093ce:	4ba1      	ldr	r3, [pc, #644]	; (8009654 <CheckUART+0x2c0>)
 80093d0:	2203      	movs	r2, #3
 80093d2:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80093d4:	4ba0      	ldr	r3, [pc, #640]	; (8009658 <CheckUART+0x2c4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2200      	movs	r2, #0
 80093da:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 80093dc:	4b9f      	ldr	r3, [pc, #636]	; (800965c <CheckUART+0x2c8>)
 80093de:	2201      	movs	r2, #1
 80093e0:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 80093e2:	4b9f      	ldr	r3, [pc, #636]	; (8009660 <CheckUART+0x2cc>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 80093e8:	4b9e      	ldr	r3, [pc, #632]	; (8009664 <CheckUART+0x2d0>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 80093ee:	4b9e      	ldr	r3, [pc, #632]	; (8009668 <CheckUART+0x2d4>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 80093f4:	4b9d      	ldr	r3, [pc, #628]	; (800966c <CheckUART+0x2d8>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	701a      	strb	r2, [r3, #0]
			  tft_fill(0,0,320,240,BLACK);
 80093fa:	2300      	movs	r3, #0
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	23f0      	movs	r3, #240	; 0xf0
 8009400:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009404:	2100      	movs	r1, #0
 8009406:	2000      	movs	r0, #0
 8009408:	f002 fc7a 	bl	800bd00 <tft_fill>
		  if(Rx_Buffer[i] =='h' && Rx_Buffer[i+1]=='i'){ // Nhận nút điều khiển động cơ hight từ App
 800940c:	e06e      	b.n	80094ec <CheckUART+0x158>
			  // Set tốc độ động cơ PWM ở đây
		  }
		  else if(Rx_Buffer[i] =='l' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='w'){ // Nhận nút điều khiển động cơ low từ app
 800940e:	4a8f      	ldr	r2, [pc, #572]	; (800964c <CheckUART+0x2b8>)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4413      	add	r3, r2
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	2b6c      	cmp	r3, #108	; 0x6c
 8009418:	d131      	bne.n	800947e <CheckUART+0xea>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3301      	adds	r3, #1
 800941e:	4a8b      	ldr	r2, [pc, #556]	; (800964c <CheckUART+0x2b8>)
 8009420:	5cd3      	ldrb	r3, [r2, r3]
 8009422:	2b6f      	cmp	r3, #111	; 0x6f
 8009424:	d12b      	bne.n	800947e <CheckUART+0xea>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3302      	adds	r3, #2
 800942a:	4a88      	ldr	r2, [pc, #544]	; (800964c <CheckUART+0x2b8>)
 800942c:	5cd3      	ldrb	r3, [r2, r3]
 800942e:	2b77      	cmp	r3, #119	; 0x77
 8009430:	d125      	bne.n	800947e <CheckUART+0xea>


			  speed = low;
 8009432:	4b87      	ldr	r3, [pc, #540]	; (8009650 <CheckUART+0x2bc>)
 8009434:	2201      	movs	r2, #1
 8009436:	601a      	str	r2, [r3, #0]
//			  fan_1_run(lowspeed);
//			  fan_2_run(lowspeed);
			  fan_12_run(lowspeed);
 8009438:	2046      	movs	r0, #70	; 0x46
 800943a:	f7fe fd01 	bl	8007e40 <fan_12_run>
			  num = SPEED_LOW;
 800943e:	4b85      	ldr	r3, [pc, #532]	; (8009654 <CheckUART+0x2c0>)
 8009440:	2204      	movs	r2, #4
 8009442:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8009444:	4b84      	ldr	r3, [pc, #528]	; (8009658 <CheckUART+0x2c4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2200      	movs	r2, #0
 800944a:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 800944c:	4b83      	ldr	r3, [pc, #524]	; (800965c <CheckUART+0x2c8>)
 800944e:	2201      	movs	r2, #1
 8009450:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 8009452:	4b83      	ldr	r3, [pc, #524]	; (8009660 <CheckUART+0x2cc>)
 8009454:	2201      	movs	r2, #1
 8009456:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 8009458:	4b82      	ldr	r3, [pc, #520]	; (8009664 <CheckUART+0x2d0>)
 800945a:	2201      	movs	r2, #1
 800945c:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 800945e:	4b82      	ldr	r3, [pc, #520]	; (8009668 <CheckUART+0x2d4>)
 8009460:	2201      	movs	r2, #1
 8009462:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 8009464:	4b81      	ldr	r3, [pc, #516]	; (800966c <CheckUART+0x2d8>)
 8009466:	2201      	movs	r2, #1
 8009468:	701a      	strb	r2, [r3, #0]
			  tft_fill(0,0,320,240,BLACK);
 800946a:	2300      	movs	r3, #0
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	23f0      	movs	r3, #240	; 0xf0
 8009470:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009474:	2100      	movs	r1, #0
 8009476:	2000      	movs	r0, #0
 8009478:	f002 fc42 	bl	800bd00 <tft_fill>
		  else if(Rx_Buffer[i] =='l' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='w'){ // Nhận nút điều khiển động cơ low từ app
 800947c:	e036      	b.n	80094ec <CheckUART+0x158>
			 // Set tốc độ động cơ PWM ở đây
		 }
		  else if(Rx_Buffer[i] =='m' && Rx_Buffer[i+1]=='e'&& Rx_Buffer[i+2]=='d'){ // Nhận nút điều khiển động cơ med từ app
 800947e:	4a73      	ldr	r2, [pc, #460]	; (800964c <CheckUART+0x2b8>)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4413      	add	r3, r2
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b6d      	cmp	r3, #109	; 0x6d
 8009488:	d130      	bne.n	80094ec <CheckUART+0x158>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3301      	adds	r3, #1
 800948e:	4a6f      	ldr	r2, [pc, #444]	; (800964c <CheckUART+0x2b8>)
 8009490:	5cd3      	ldrb	r3, [r2, r3]
 8009492:	2b65      	cmp	r3, #101	; 0x65
 8009494:	d12a      	bne.n	80094ec <CheckUART+0x158>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3302      	adds	r3, #2
 800949a:	4a6c      	ldr	r2, [pc, #432]	; (800964c <CheckUART+0x2b8>)
 800949c:	5cd3      	ldrb	r3, [r2, r3]
 800949e:	2b64      	cmp	r3, #100	; 0x64
 80094a0:	d124      	bne.n	80094ec <CheckUART+0x158>

			  speed = med;
 80094a2:	4b6b      	ldr	r3, [pc, #428]	; (8009650 <CheckUART+0x2bc>)
 80094a4:	2202      	movs	r2, #2
 80094a6:	601a      	str	r2, [r3, #0]
//			  fan_1_run(medspeed);
//			  fan_2_run(medspeed);
			  fan_12_run(medspeed);
 80094a8:	2028      	movs	r0, #40	; 0x28
 80094aa:	f7fe fcc9 	bl	8007e40 <fan_12_run>
			  num = SPEED_MEDIUM;
 80094ae:	4b69      	ldr	r3, [pc, #420]	; (8009654 <CheckUART+0x2c0>)
 80094b0:	2205      	movs	r2, #5
 80094b2:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80094b4:	4b68      	ldr	r3, [pc, #416]	; (8009658 <CheckUART+0x2c4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2200      	movs	r2, #0
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 80094bc:	4b67      	ldr	r3, [pc, #412]	; (800965c <CheckUART+0x2c8>)
 80094be:	2201      	movs	r2, #1
 80094c0:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 80094c2:	4b67      	ldr	r3, [pc, #412]	; (8009660 <CheckUART+0x2cc>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 80094c8:	4b66      	ldr	r3, [pc, #408]	; (8009664 <CheckUART+0x2d0>)
 80094ca:	2201      	movs	r2, #1
 80094cc:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 80094ce:	4b66      	ldr	r3, [pc, #408]	; (8009668 <CheckUART+0x2d4>)
 80094d0:	2201      	movs	r2, #1
 80094d2:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 80094d4:	4b65      	ldr	r3, [pc, #404]	; (800966c <CheckUART+0x2d8>)
 80094d6:	2201      	movs	r2, #1
 80094d8:	701a      	strb	r2, [r3, #0]
			  tft_fill(0,0,320,240,BLACK);
 80094da:	2300      	movs	r3, #0
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	23f0      	movs	r3, #240	; 0xf0
 80094e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80094e4:	2100      	movs	r1, #0
 80094e6:	2000      	movs	r0, #0
 80094e8:	f002 fc0a 	bl	800bd00 <tft_fill>
			 // Set tốc độ động cơ PWM ở đây
		 }
	  //}
	 //for (int i =0; i<=strlen(Rx_Buffer); i++){
		 if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='N'){
 80094ec:	4a57      	ldr	r2, [pc, #348]	; (800964c <CheckUART+0x2b8>)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4413      	add	r3, r2
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b50      	cmp	r3, #80	; 0x50
 80094f6:	d134      	bne.n	8009562 <CheckUART+0x1ce>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3301      	adds	r3, #1
 80094fc:	4a53      	ldr	r2, [pc, #332]	; (800964c <CheckUART+0x2b8>)
 80094fe:	5cd3      	ldrb	r3, [r2, r3]
 8009500:	2b4f      	cmp	r3, #79	; 0x4f
 8009502:	d12e      	bne.n	8009562 <CheckUART+0x1ce>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3302      	adds	r3, #2
 8009508:	4a50      	ldr	r2, [pc, #320]	; (800964c <CheckUART+0x2b8>)
 800950a:	5cd3      	ldrb	r3, [r2, r3]
 800950c:	2b4e      	cmp	r3, #78	; 0x4e
 800950e:	d128      	bne.n	8009562 <CheckUART+0x1ce>

			 power = Power_On;
 8009510:	4b57      	ldr	r3, [pc, #348]	; (8009670 <CheckUART+0x2dc>)
 8009512:	2201      	movs	r2, #1
 8009514:	601a      	str	r2, [r3, #0]
			 speed = med;
 8009516:	4b4e      	ldr	r3, [pc, #312]	; (8009650 <CheckUART+0x2bc>)
 8009518:	2202      	movs	r2, #2
 800951a:	601a      	str	r2, [r3, #0]
//			 fan_1_run(medspeed);
//			 fan_2_run(medspeed);
			 fan_12_run(medspeed);
 800951c:	2028      	movs	r0, #40	; 0x28
 800951e:	f7fe fc8f 	bl	8007e40 <fan_12_run>
			 num = POWER_ON;
 8009522:	4b4c      	ldr	r3, [pc, #304]	; (8009654 <CheckUART+0x2c0>)
 8009524:	2201      	movs	r2, #1
 8009526:	801a      	strh	r2, [r3, #0]
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8009528:	4b4b      	ldr	r3, [pc, #300]	; (8009658 <CheckUART+0x2c4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2200      	movs	r2, #0
 800952e:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 8009530:	4b4a      	ldr	r3, [pc, #296]	; (800965c <CheckUART+0x2c8>)
 8009532:	2201      	movs	r2, #1
 8009534:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 8009536:	4b4a      	ldr	r3, [pc, #296]	; (8009660 <CheckUART+0x2cc>)
 8009538:	2201      	movs	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 800953c:	4b49      	ldr	r3, [pc, #292]	; (8009664 <CheckUART+0x2d0>)
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 8009542:	4b49      	ldr	r3, [pc, #292]	; (8009668 <CheckUART+0x2d4>)
 8009544:	2201      	movs	r2, #1
 8009546:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 8009548:	4b48      	ldr	r3, [pc, #288]	; (800966c <CheckUART+0x2d8>)
 800954a:	2201      	movs	r2, #1
 800954c:	701a      	strb	r2, [r3, #0]
			  tft_fill(0,0,320,240,BLACK);
 800954e:	2300      	movs	r3, #0
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	23f0      	movs	r3, #240	; 0xf0
 8009554:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009558:	2100      	movs	r1, #0
 800955a:	2000      	movs	r0, #0
 800955c:	f002 fbd0 	bl	800bd00 <tft_fill>
		 if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='N'){
 8009560:	e03a      	b.n	80095d8 <CheckUART+0x244>
			 // Set tốc độ động cơ PWM ở đây
			 // Set van khí ở đây
		 }
		 else if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='F'){
 8009562:	4a3a      	ldr	r2, [pc, #232]	; (800964c <CheckUART+0x2b8>)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4413      	add	r3, r2
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b50      	cmp	r3, #80	; 0x50
 800956c:	d134      	bne.n	80095d8 <CheckUART+0x244>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3301      	adds	r3, #1
 8009572:	4a36      	ldr	r2, [pc, #216]	; (800964c <CheckUART+0x2b8>)
 8009574:	5cd3      	ldrb	r3, [r2, r3]
 8009576:	2b4f      	cmp	r3, #79	; 0x4f
 8009578:	d12e      	bne.n	80095d8 <CheckUART+0x244>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3302      	adds	r3, #2
 800957e:	4a33      	ldr	r2, [pc, #204]	; (800964c <CheckUART+0x2b8>)
 8009580:	5cd3      	ldrb	r3, [r2, r3]
 8009582:	2b46      	cmp	r3, #70	; 0x46
 8009584:	d128      	bne.n	80095d8 <CheckUART+0x244>


			 power = Power_Off;
 8009586:	4b3a      	ldr	r3, [pc, #232]	; (8009670 <CheckUART+0x2dc>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
			 speed = Power_Off;
 800958c:	4b30      	ldr	r3, [pc, #192]	; (8009650 <CheckUART+0x2bc>)
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]
			 fan_1_stop();
 8009592:	f7fe fc31 	bl	8007df8 <fan_1_stop>
			 fan_2_stop();
 8009596:	f7fe fc41 	bl	8007e1c <fan_2_stop>
			 num = POWER_OFF;
 800959a:	4b2e      	ldr	r3, [pc, #184]	; (8009654 <CheckUART+0x2c0>)
 800959c:	2202      	movs	r2, #2
 800959e:	801a      	strh	r2, [r3, #0]
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80095a0:	4b2d      	ldr	r3, [pc, #180]	; (8009658 <CheckUART+0x2c4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2200      	movs	r2, #0
 80095a6:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 80095a8:	4b2c      	ldr	r3, [pc, #176]	; (800965c <CheckUART+0x2c8>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 80095ae:	4b2c      	ldr	r3, [pc, #176]	; (8009660 <CheckUART+0x2cc>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 80095b4:	4b2b      	ldr	r3, [pc, #172]	; (8009664 <CheckUART+0x2d0>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 80095ba:	4b2b      	ldr	r3, [pc, #172]	; (8009668 <CheckUART+0x2d4>)
 80095bc:	2201      	movs	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 80095c0:	4b2a      	ldr	r3, [pc, #168]	; (800966c <CheckUART+0x2d8>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	701a      	strb	r2, [r3, #0]
			  tft_fill(0,0,320,240,BLACK);
 80095c6:	2300      	movs	r3, #0
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	23f0      	movs	r3, #240	; 0xf0
 80095cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80095d0:	2100      	movs	r1, #0
 80095d2:	2000      	movs	r0, #0
 80095d4:	f002 fb94 	bl	800bd00 <tft_fill>
			 //Tắt động cơ và đóng van khí ở đây
		 }
	// }
	// for (int i =0; i<=strlen(Rx_Buffer); i++){
	 		 if(Rx_Buffer[i] =='n' && Rx_Buffer[i+1]=='i'&& Rx_Buffer[i+2]=='g'){
 80095d8:	4a1c      	ldr	r2, [pc, #112]	; (800964c <CheckUART+0x2b8>)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b6e      	cmp	r3, #110	; 0x6e
 80095e2:	d149      	bne.n	8009678 <CheckUART+0x2e4>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3301      	adds	r3, #1
 80095e8:	4a18      	ldr	r2, [pc, #96]	; (800964c <CheckUART+0x2b8>)
 80095ea:	5cd3      	ldrb	r3, [r2, r3]
 80095ec:	2b69      	cmp	r3, #105	; 0x69
 80095ee:	d143      	bne.n	8009678 <CheckUART+0x2e4>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3302      	adds	r3, #2
 80095f4:	4a15      	ldr	r2, [pc, #84]	; (800964c <CheckUART+0x2b8>)
 80095f6:	5cd3      	ldrb	r3, [r2, r3]
 80095f8:	2b67      	cmp	r3, #103	; 0x67
 80095fa:	d13d      	bne.n	8009678 <CheckUART+0x2e4>

	 			 nightmode = Nightmode_On;
 80095fc:	4b1d      	ldr	r3, [pc, #116]	; (8009674 <CheckUART+0x2e0>)
 80095fe:	2201      	movs	r2, #1
 8009600:	601a      	str	r2, [r3, #0]
//	 			 fan_1_run(lowspeed);
//	 			 fan_2_run(lowspeed);
	 			 fan_12_run(lowspeed);
 8009602:	2046      	movs	r0, #70	; 0x46
 8009604:	f7fe fc1c 	bl	8007e40 <fan_12_run>
	 			 num = NIGHT_ON;
 8009608:	4b12      	ldr	r3, [pc, #72]	; (8009654 <CheckUART+0x2c0>)
 800960a:	2206      	movs	r2, #6
 800960c:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 800960e:	4b12      	ldr	r3, [pc, #72]	; (8009658 <CheckUART+0x2c4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2200      	movs	r2, #0
 8009614:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 8009616:	4b11      	ldr	r3, [pc, #68]	; (800965c <CheckUART+0x2c8>)
 8009618:	2201      	movs	r2, #1
 800961a:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 800961c:	4b10      	ldr	r3, [pc, #64]	; (8009660 <CheckUART+0x2cc>)
 800961e:	2201      	movs	r2, #1
 8009620:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 8009622:	4b10      	ldr	r3, [pc, #64]	; (8009664 <CheckUART+0x2d0>)
 8009624:	2201      	movs	r2, #1
 8009626:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8009628:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <CheckUART+0x2d4>)
 800962a:	2201      	movs	r2, #1
 800962c:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 800962e:	4b0f      	ldr	r3, [pc, #60]	; (800966c <CheckUART+0x2d8>)
 8009630:	2201      	movs	r2, #1
 8009632:	701a      	strb	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 8009634:	2300      	movs	r3, #0
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	23f0      	movs	r3, #240	; 0xf0
 800963a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800963e:	2100      	movs	r1, #0
 8009640:	2000      	movs	r0, #0
 8009642:	f002 fb5d 	bl	800bd00 <tft_fill>
	 		 if(Rx_Buffer[i] =='n' && Rx_Buffer[i+1]=='i'&& Rx_Buffer[i+2]=='g'){
 8009646:	e04e      	b.n	80096e6 <CheckUART+0x352>
 8009648:	20004111 	.word	0x20004111
 800964c:	20004518 	.word	0x20004518
 8009650:	200045bc 	.word	0x200045bc
 8009654:	20004040 	.word	0x20004040
 8009658:	200047c4 	.word	0x200047c4
 800965c:	20004042 	.word	0x20004042
 8009660:	20004043 	.word	0x20004043
 8009664:	20004044 	.word	0x20004044
 8009668:	20004045 	.word	0x20004045
 800966c:	20004046 	.word	0x20004046
 8009670:	20004174 	.word	0x20004174
 8009674:	200044b0 	.word	0x200044b0
	 		 }
	 		 else if(Rx_Buffer[i] =='d' && Rx_Buffer[i+1]=='a'&& Rx_Buffer[i+2]=='y'){
 8009678:	4aa8      	ldr	r2, [pc, #672]	; (800991c <CheckUART+0x588>)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4413      	add	r3, r2
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b64      	cmp	r3, #100	; 0x64
 8009682:	d130      	bne.n	80096e6 <CheckUART+0x352>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3301      	adds	r3, #1
 8009688:	4aa4      	ldr	r2, [pc, #656]	; (800991c <CheckUART+0x588>)
 800968a:	5cd3      	ldrb	r3, [r2, r3]
 800968c:	2b61      	cmp	r3, #97	; 0x61
 800968e:	d12a      	bne.n	80096e6 <CheckUART+0x352>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3302      	adds	r3, #2
 8009694:	4aa1      	ldr	r2, [pc, #644]	; (800991c <CheckUART+0x588>)
 8009696:	5cd3      	ldrb	r3, [r2, r3]
 8009698:	2b79      	cmp	r3, #121	; 0x79
 800969a:	d124      	bne.n	80096e6 <CheckUART+0x352>

	 			nightmode = Nightmode_Off;
 800969c:	4ba0      	ldr	r3, [pc, #640]	; (8009920 <CheckUART+0x58c>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
//	 			fan_1_run(medspeed);
//	 			fan_2_run(medspeed);
	 			fan_12_run(medspeed);
 80096a2:	2028      	movs	r0, #40	; 0x28
 80096a4:	f7fe fbcc 	bl	8007e40 <fan_12_run>
	 			num = NIGHT_OFF;
 80096a8:	4b9e      	ldr	r3, [pc, #632]	; (8009924 <CheckUART+0x590>)
 80096aa:	2207      	movs	r2, #7
 80096ac:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80096ae:	4b9e      	ldr	r3, [pc, #632]	; (8009928 <CheckUART+0x594>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2200      	movs	r2, #0
 80096b4:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 80096b6:	4b9d      	ldr	r3, [pc, #628]	; (800992c <CheckUART+0x598>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 80096bc:	4b9c      	ldr	r3, [pc, #624]	; (8009930 <CheckUART+0x59c>)
 80096be:	2201      	movs	r2, #1
 80096c0:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 80096c2:	4b9c      	ldr	r3, [pc, #624]	; (8009934 <CheckUART+0x5a0>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 80096c8:	4b9b      	ldr	r3, [pc, #620]	; (8009938 <CheckUART+0x5a4>)
 80096ca:	2201      	movs	r2, #1
 80096cc:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 80096ce:	4b9b      	ldr	r3, [pc, #620]	; (800993c <CheckUART+0x5a8>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	701a      	strb	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 80096d4:	2300      	movs	r3, #0
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	23f0      	movs	r3, #240	; 0xf0
 80096da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80096de:	2100      	movs	r1, #0
 80096e0:	2000      	movs	r0, #0
 80096e2:	f002 fb0d 	bl	800bd00 <tft_fill>
	 		 }
	 	//}
	 	//for (int i =0; i<=strlen(Rx_Buffer); i++){
	 		if(Rx_Buffer[i] =='f' && Rx_Buffer[i+1]=='r'&& Rx_Buffer[i+2]=='e'){
 80096e6:	4a8d      	ldr	r2, [pc, #564]	; (800991c <CheckUART+0x588>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4413      	add	r3, r2
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b66      	cmp	r3, #102	; 0x66
 80096f0:	d131      	bne.n	8009756 <CheckUART+0x3c2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3301      	adds	r3, #1
 80096f6:	4a89      	ldr	r2, [pc, #548]	; (800991c <CheckUART+0x588>)
 80096f8:	5cd3      	ldrb	r3, [r2, r3]
 80096fa:	2b72      	cmp	r3, #114	; 0x72
 80096fc:	d12b      	bne.n	8009756 <CheckUART+0x3c2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3302      	adds	r3, #2
 8009702:	4a86      	ldr	r2, [pc, #536]	; (800991c <CheckUART+0x588>)
 8009704:	5cd3      	ldrb	r3, [r2, r3]
 8009706:	2b65      	cmp	r3, #101	; 0x65
 8009708:	d125      	bne.n	8009756 <CheckUART+0x3c2>

	 			filmode = Fresh_Air;
 800970a:	4b8d      	ldr	r3, [pc, #564]	; (8009940 <CheckUART+0x5ac>)
 800970c:	2201      	movs	r2, #1
 800970e:	601a      	str	r2, [r3, #0]
	 			num = FRESH_AIR;
 8009710:	4b84      	ldr	r3, [pc, #528]	; (8009924 <CheckUART+0x590>)
 8009712:	2208      	movs	r2, #8
 8009714:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8009716:	4b84      	ldr	r3, [pc, #528]	; (8009928 <CheckUART+0x594>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 800971e:	4b83      	ldr	r3, [pc, #524]	; (800992c <CheckUART+0x598>)
 8009720:	2201      	movs	r2, #1
 8009722:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 8009724:	4b82      	ldr	r3, [pc, #520]	; (8009930 <CheckUART+0x59c>)
 8009726:	2201      	movs	r2, #1
 8009728:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 800972a:	4b82      	ldr	r3, [pc, #520]	; (8009934 <CheckUART+0x5a0>)
 800972c:	2201      	movs	r2, #1
 800972e:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8009730:	4b81      	ldr	r3, [pc, #516]	; (8009938 <CheckUART+0x5a4>)
 8009732:	2201      	movs	r2, #1
 8009734:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 8009736:	4b81      	ldr	r3, [pc, #516]	; (800993c <CheckUART+0x5a8>)
 8009738:	2201      	movs	r2, #1
 800973a:	701a      	strb	r2, [r3, #0]
				  Vanst = 1;
 800973c:	4b81      	ldr	r3, [pc, #516]	; (8009944 <CheckUART+0x5b0>)
 800973e:	2201      	movs	r2, #1
 8009740:	601a      	str	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 8009742:	2300      	movs	r3, #0
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	23f0      	movs	r3, #240	; 0xf0
 8009748:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800974c:	2100      	movs	r1, #0
 800974e:	2000      	movs	r0, #0
 8009750:	f002 fad6 	bl	800bd00 <tft_fill>
 8009754:	e036      	b.n	80097c4 <CheckUART+0x430>

	 			//đk van mở van
	 		 }
	 		else if(Rx_Buffer[i] =='i' && Rx_Buffer[i+1]=='n'&& Rx_Buffer[i+2]=='d'){
 8009756:	4a71      	ldr	r2, [pc, #452]	; (800991c <CheckUART+0x588>)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b69      	cmp	r3, #105	; 0x69
 8009760:	d130      	bne.n	80097c4 <CheckUART+0x430>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	3301      	adds	r3, #1
 8009766:	4a6d      	ldr	r2, [pc, #436]	; (800991c <CheckUART+0x588>)
 8009768:	5cd3      	ldrb	r3, [r2, r3]
 800976a:	2b6e      	cmp	r3, #110	; 0x6e
 800976c:	d12a      	bne.n	80097c4 <CheckUART+0x430>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3302      	adds	r3, #2
 8009772:	4a6a      	ldr	r2, [pc, #424]	; (800991c <CheckUART+0x588>)
 8009774:	5cd3      	ldrb	r3, [r2, r3]
 8009776:	2b64      	cmp	r3, #100	; 0x64
 8009778:	d124      	bne.n	80097c4 <CheckUART+0x430>

	 			filmode = Indoor;
 800977a:	4b71      	ldr	r3, [pc, #452]	; (8009940 <CheckUART+0x5ac>)
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]
	 			num = INDOOR;
 8009780:	4b68      	ldr	r3, [pc, #416]	; (8009924 <CheckUART+0x590>)
 8009782:	2209      	movs	r2, #9
 8009784:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8009786:	4b68      	ldr	r3, [pc, #416]	; (8009928 <CheckUART+0x594>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 800978e:	4b67      	ldr	r3, [pc, #412]	; (800992c <CheckUART+0x598>)
 8009790:	2201      	movs	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 8009794:	4b66      	ldr	r3, [pc, #408]	; (8009930 <CheckUART+0x59c>)
 8009796:	2201      	movs	r2, #1
 8009798:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 800979a:	4b66      	ldr	r3, [pc, #408]	; (8009934 <CheckUART+0x5a0>)
 800979c:	2201      	movs	r2, #1
 800979e:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 80097a0:	4b65      	ldr	r3, [pc, #404]	; (8009938 <CheckUART+0x5a4>)
 80097a2:	2201      	movs	r2, #1
 80097a4:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 80097a6:	4b65      	ldr	r3, [pc, #404]	; (800993c <CheckUART+0x5a8>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	701a      	strb	r2, [r3, #0]
				  Vanst = 0;
 80097ac:	4b65      	ldr	r3, [pc, #404]	; (8009944 <CheckUART+0x5b0>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 80097b2:	2300      	movs	r3, #0
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	23f0      	movs	r3, #240	; 0xf0
 80097b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80097bc:	2100      	movs	r1, #0
 80097be:	2000      	movs	r0, #0
 80097c0:	f002 fa9e 	bl	800bd00 <tft_fill>
	 			//đk van đóng
	 		}
	 	//}
	 	//for (int i =0; i<=strlen(Rx_Buffer); i++){ // chế độ auto
	 		if(Rx_Buffer[i] =='m' && Rx_Buffer[i+1]=='a'&& Rx_Buffer[i+2]=='n'){
 80097c4:	4a55      	ldr	r2, [pc, #340]	; (800991c <CheckUART+0x588>)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4413      	add	r3, r2
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b6d      	cmp	r3, #109	; 0x6d
 80097ce:	d12e      	bne.n	800982e <CheckUART+0x49a>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3301      	adds	r3, #1
 80097d4:	4a51      	ldr	r2, [pc, #324]	; (800991c <CheckUART+0x588>)
 80097d6:	5cd3      	ldrb	r3, [r2, r3]
 80097d8:	2b61      	cmp	r3, #97	; 0x61
 80097da:	d128      	bne.n	800982e <CheckUART+0x49a>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3302      	adds	r3, #2
 80097e0:	4a4e      	ldr	r2, [pc, #312]	; (800991c <CheckUART+0x588>)
 80097e2:	5cd3      	ldrb	r3, [r2, r3]
 80097e4:	2b6e      	cmp	r3, #110	; 0x6e
 80097e6:	d122      	bne.n	800982e <CheckUART+0x49a>

	 			ctrmode = Manual;
 80097e8:	4b57      	ldr	r3, [pc, #348]	; (8009948 <CheckUART+0x5b4>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
	 			num = MANUAL;
 80097ee:	4b4d      	ldr	r3, [pc, #308]	; (8009924 <CheckUART+0x590>)
 80097f0:	220a      	movs	r2, #10
 80097f2:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80097f4:	4b4c      	ldr	r3, [pc, #304]	; (8009928 <CheckUART+0x594>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 80097fc:	4b4b      	ldr	r3, [pc, #300]	; (800992c <CheckUART+0x598>)
 80097fe:	2201      	movs	r2, #1
 8009800:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 8009802:	4b4b      	ldr	r3, [pc, #300]	; (8009930 <CheckUART+0x59c>)
 8009804:	2201      	movs	r2, #1
 8009806:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 8009808:	4b4a      	ldr	r3, [pc, #296]	; (8009934 <CheckUART+0x5a0>)
 800980a:	2201      	movs	r2, #1
 800980c:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 800980e:	4b4a      	ldr	r3, [pc, #296]	; (8009938 <CheckUART+0x5a4>)
 8009810:	2201      	movs	r2, #1
 8009812:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 8009814:	4b49      	ldr	r3, [pc, #292]	; (800993c <CheckUART+0x5a8>)
 8009816:	2201      	movs	r2, #1
 8009818:	701a      	strb	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 800981a:	2300      	movs	r3, #0
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	23f0      	movs	r3, #240	; 0xf0
 8009820:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009824:	2100      	movs	r1, #0
 8009826:	2000      	movs	r0, #0
 8009828:	f002 fa6a 	bl	800bd00 <tft_fill>
 800982c:	e033      	b.n	8009896 <CheckUART+0x502>
	 		}
	 		else if(Rx_Buffer[i] =='a' && Rx_Buffer[i+1]=='u'&& Rx_Buffer[i+2]=='t'){ // chế độ manual
 800982e:	4a3b      	ldr	r2, [pc, #236]	; (800991c <CheckUART+0x588>)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4413      	add	r3, r2
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b61      	cmp	r3, #97	; 0x61
 8009838:	d12d      	bne.n	8009896 <CheckUART+0x502>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3301      	adds	r3, #1
 800983e:	4a37      	ldr	r2, [pc, #220]	; (800991c <CheckUART+0x588>)
 8009840:	5cd3      	ldrb	r3, [r2, r3]
 8009842:	2b75      	cmp	r3, #117	; 0x75
 8009844:	d127      	bne.n	8009896 <CheckUART+0x502>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3302      	adds	r3, #2
 800984a:	4a34      	ldr	r2, [pc, #208]	; (800991c <CheckUART+0x588>)
 800984c:	5cd3      	ldrb	r3, [r2, r3]
 800984e:	2b74      	cmp	r3, #116	; 0x74
 8009850:	d121      	bne.n	8009896 <CheckUART+0x502>

	 			ctrmode = Auto;
 8009852:	4b3d      	ldr	r3, [pc, #244]	; (8009948 <CheckUART+0x5b4>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
	 			num = AUTO;
 8009858:	4b32      	ldr	r3, [pc, #200]	; (8009924 <CheckUART+0x590>)
 800985a:	220b      	movs	r2, #11
 800985c:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 800985e:	4b32      	ldr	r3, [pc, #200]	; (8009928 <CheckUART+0x594>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 8009866:	4b31      	ldr	r3, [pc, #196]	; (800992c <CheckUART+0x598>)
 8009868:	2201      	movs	r2, #1
 800986a:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 800986c:	4b30      	ldr	r3, [pc, #192]	; (8009930 <CheckUART+0x59c>)
 800986e:	2201      	movs	r2, #1
 8009870:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 8009872:	4b30      	ldr	r3, [pc, #192]	; (8009934 <CheckUART+0x5a0>)
 8009874:	2201      	movs	r2, #1
 8009876:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8009878:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <CheckUART+0x5a4>)
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 800987e:	4b2f      	ldr	r3, [pc, #188]	; (800993c <CheckUART+0x5a8>)
 8009880:	2201      	movs	r2, #1
 8009882:	701a      	strb	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 8009884:	2300      	movs	r3, #0
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	23f0      	movs	r3, #240	; 0xf0
 800988a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800988e:	2100      	movs	r1, #0
 8009890:	2000      	movs	r0, #0
 8009892:	f002 fa35 	bl	800bd00 <tft_fill>
	 		}

	  // UV ION
	  	  if(Rx_Buffer[i] =='n' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='n'){
 8009896:	4a21      	ldr	r2, [pc, #132]	; (800991c <CheckUART+0x588>)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4413      	add	r3, r2
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b6e      	cmp	r3, #110	; 0x6e
 80098a0:	d15c      	bne.n	800995c <CheckUART+0x5c8>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3301      	adds	r3, #1
 80098a6:	4a1d      	ldr	r2, [pc, #116]	; (800991c <CheckUART+0x588>)
 80098a8:	5cd3      	ldrb	r3, [r2, r3]
 80098aa:	2b6f      	cmp	r3, #111	; 0x6f
 80098ac:	d156      	bne.n	800995c <CheckUART+0x5c8>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	3302      	adds	r3, #2
 80098b2:	4a1a      	ldr	r2, [pc, #104]	; (800991c <CheckUART+0x588>)
 80098b4:	5cd3      	ldrb	r3, [r2, r3]
 80098b6:	2b6e      	cmp	r3, #110	; 0x6e
 80098b8:	d150      	bne.n	800995c <CheckUART+0x5c8>

				IONmode = 1;
 80098ba:	4b24      	ldr	r3, [pc, #144]	; (800994c <CheckUART+0x5b8>)
 80098bc:	2201      	movs	r2, #1
 80098be:	601a      	str	r2, [r3, #0]
				ionval = 1;
 80098c0:	4b23      	ldr	r3, [pc, #140]	; (8009950 <CheckUART+0x5bc>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	601a      	str	r2, [r3, #0]
				num = IONON;
 80098c6:	4b17      	ldr	r3, [pc, #92]	; (8009924 <CheckUART+0x590>)
 80098c8:	220c      	movs	r2, #12
 80098ca:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,GPIO_PIN_SET);
 80098cc:	2201      	movs	r2, #1
 80098ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80098d2:	4820      	ldr	r0, [pc, #128]	; (8009954 <CheckUART+0x5c0>)
 80098d4:	f7f7 fb42 	bl	8000f5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 80098d8:	2201      	movs	r2, #1
 80098da:	2101      	movs	r1, #1
 80098dc:	481e      	ldr	r0, [pc, #120]	; (8009958 <CheckUART+0x5c4>)
 80098de:	f7f7 fb3d 	bl	8000f5c <HAL_GPIO_WritePin>
				 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80098e2:	4b11      	ldr	r3, [pc, #68]	; (8009928 <CheckUART+0x594>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	625a      	str	r2, [r3, #36]	; 0x24
				  FLAG=1;
 80098ea:	4b10      	ldr	r3, [pc, #64]	; (800992c <CheckUART+0x598>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 80098f0:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <CheckUART+0x59c>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <CheckUART+0x5a0>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 80098fc:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <CheckUART+0x5a4>)
 80098fe:	2201      	movs	r2, #1
 8009900:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 8009902:	4b0e      	ldr	r3, [pc, #56]	; (800993c <CheckUART+0x5a8>)
 8009904:	2201      	movs	r2, #1
 8009906:	701a      	strb	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 8009908:	2300      	movs	r3, #0
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	23f0      	movs	r3, #240	; 0xf0
 800990e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009912:	2100      	movs	r1, #0
 8009914:	2000      	movs	r0, #0
 8009916:	f002 f9f3 	bl	800bd00 <tft_fill>
 800991a:	e061      	b.n	80099e0 <CheckUART+0x64c>
 800991c:	20004518 	.word	0x20004518
 8009920:	200044b0 	.word	0x200044b0
 8009924:	20004040 	.word	0x20004040
 8009928:	200047c4 	.word	0x200047c4
 800992c:	20004042 	.word	0x20004042
 8009930:	20004043 	.word	0x20004043
 8009934:	20004044 	.word	0x20004044
 8009938:	20004045 	.word	0x20004045
 800993c:	20004046 	.word	0x20004046
 8009940:	20004864 	.word	0x20004864
 8009944:	2000409c 	.word	0x2000409c
 8009948:	200041d8 	.word	0x200041d8
 800994c:	20004540 	.word	0x20004540
 8009950:	200044ac 	.word	0x200044ac
 8009954:	40020800 	.word	0x40020800
 8009958:	40020000 	.word	0x40020000
	  	 		}
	  	 		else if(Rx_Buffer[i] =='n' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='f'){ // chế độ ION
 800995c:	4a8a      	ldr	r2, [pc, #552]	; (8009b88 <CheckUART+0x7f4>)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4413      	add	r3, r2
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b6e      	cmp	r3, #110	; 0x6e
 8009966:	d13b      	bne.n	80099e0 <CheckUART+0x64c>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3301      	adds	r3, #1
 800996c:	4a86      	ldr	r2, [pc, #536]	; (8009b88 <CheckUART+0x7f4>)
 800996e:	5cd3      	ldrb	r3, [r2, r3]
 8009970:	2b6f      	cmp	r3, #111	; 0x6f
 8009972:	d135      	bne.n	80099e0 <CheckUART+0x64c>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3302      	adds	r3, #2
 8009978:	4a83      	ldr	r2, [pc, #524]	; (8009b88 <CheckUART+0x7f4>)
 800997a:	5cd3      	ldrb	r3, [r2, r3]
 800997c:	2b66      	cmp	r3, #102	; 0x66
 800997e:	d12f      	bne.n	80099e0 <CheckUART+0x64c>

	  	 			IONmode = 0;
 8009980:	4b82      	ldr	r3, [pc, #520]	; (8009b8c <CheckUART+0x7f8>)
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
	  	 			ionval = 0;
 8009986:	4b82      	ldr	r3, [pc, #520]	; (8009b90 <CheckUART+0x7fc>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
	  	 			num = IONOFF;
 800998c:	4b81      	ldr	r3, [pc, #516]	; (8009b94 <CheckUART+0x800>)
 800998e:	220d      	movs	r2, #13
 8009990:	801a      	strh	r2, [r3, #0]
	  	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,GPIO_PIN_RESET);
 8009992:	2200      	movs	r2, #0
 8009994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009998:	487f      	ldr	r0, [pc, #508]	; (8009b98 <CheckUART+0x804>)
 800999a:	f7f7 fadf 	bl	8000f5c <HAL_GPIO_WritePin>
	  	 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 800999e:	2200      	movs	r2, #0
 80099a0:	2101      	movs	r1, #1
 80099a2:	487e      	ldr	r0, [pc, #504]	; (8009b9c <CheckUART+0x808>)
 80099a4:	f7f7 fada 	bl	8000f5c <HAL_GPIO_WritePin>
	  	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80099a8:	4b7d      	ldr	r3, [pc, #500]	; (8009ba0 <CheckUART+0x80c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2200      	movs	r2, #0
 80099ae:	625a      	str	r2, [r3, #36]	; 0x24
	  	 			  FLAG=1;
 80099b0:	4b7c      	ldr	r3, [pc, #496]	; (8009ba4 <CheckUART+0x810>)
 80099b2:	2201      	movs	r2, #1
 80099b4:	701a      	strb	r2, [r3, #0]
	  				  FLAG1=1;
 80099b6:	4b7c      	ldr	r3, [pc, #496]	; (8009ba8 <CheckUART+0x814>)
 80099b8:	2201      	movs	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]
	  				  FLAG2=1;
 80099bc:	4b7b      	ldr	r3, [pc, #492]	; (8009bac <CheckUART+0x818>)
 80099be:	2201      	movs	r2, #1
 80099c0:	701a      	strb	r2, [r3, #0]
	  				  FLAG3=1;
 80099c2:	4b7b      	ldr	r3, [pc, #492]	; (8009bb0 <CheckUART+0x81c>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	701a      	strb	r2, [r3, #0]
	  				  FLAG4=1;
 80099c8:	4b7a      	ldr	r3, [pc, #488]	; (8009bb4 <CheckUART+0x820>)
 80099ca:	2201      	movs	r2, #1
 80099cc:	701a      	strb	r2, [r3, #0]
	  				  tft_fill(0,0,320,240,BLACK);
 80099ce:	2300      	movs	r3, #0
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	23f0      	movs	r3, #240	; 0xf0
 80099d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80099d8:	2100      	movs	r1, #0
 80099da:	2000      	movs	r0, #0
 80099dc:	f002 f990 	bl	800bd00 <tft_fill>
	  	 		}
	  	 if(Rx_Buffer[i] =='v' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='n'){
 80099e0:	4a69      	ldr	r2, [pc, #420]	; (8009b88 <CheckUART+0x7f4>)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4413      	add	r3, r2
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b76      	cmp	r3, #118	; 0x76
 80099ea:	d134      	bne.n	8009a56 <CheckUART+0x6c2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3301      	adds	r3, #1
 80099f0:	4a65      	ldr	r2, [pc, #404]	; (8009b88 <CheckUART+0x7f4>)
 80099f2:	5cd3      	ldrb	r3, [r2, r3]
 80099f4:	2b6f      	cmp	r3, #111	; 0x6f
 80099f6:	d12e      	bne.n	8009a56 <CheckUART+0x6c2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3302      	adds	r3, #2
 80099fc:	4a62      	ldr	r2, [pc, #392]	; (8009b88 <CheckUART+0x7f4>)
 80099fe:	5cd3      	ldrb	r3, [r2, r3]
 8009a00:	2b6e      	cmp	r3, #110	; 0x6e
 8009a02:	d128      	bne.n	8009a56 <CheckUART+0x6c2>

	  		 	 	UVmode = UVon;
 8009a04:	4b6c      	ldr	r3, [pc, #432]	; (8009bb8 <CheckUART+0x824>)
 8009a06:	2201      	movs	r2, #1
 8009a08:	601a      	str	r2, [r3, #0]
					num = UVON;
 8009a0a:	4b62      	ldr	r3, [pc, #392]	; (8009b94 <CheckUART+0x800>)
 8009a0c:	220e      	movs	r2, #14
 8009a0e:	801a      	strh	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,GPIO_PIN_SET);
 8009a10:	2201      	movs	r2, #1
 8009a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a16:	4860      	ldr	r0, [pc, #384]	; (8009b98 <CheckUART+0x804>)
 8009a18:	f7f7 faa0 	bl	8000f5c <HAL_GPIO_WritePin>
					 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8009a1c:	4b60      	ldr	r3, [pc, #384]	; (8009ba0 <CheckUART+0x80c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2200      	movs	r2, #0
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24
					  FLAG=1;
 8009a24:	4b5f      	ldr	r3, [pc, #380]	; (8009ba4 <CheckUART+0x810>)
 8009a26:	2201      	movs	r2, #1
 8009a28:	701a      	strb	r2, [r3, #0]
					  FLAG1=1;
 8009a2a:	4b5f      	ldr	r3, [pc, #380]	; (8009ba8 <CheckUART+0x814>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	701a      	strb	r2, [r3, #0]
					  FLAG2=1;
 8009a30:	4b5e      	ldr	r3, [pc, #376]	; (8009bac <CheckUART+0x818>)
 8009a32:	2201      	movs	r2, #1
 8009a34:	701a      	strb	r2, [r3, #0]
					  FLAG3=1;
 8009a36:	4b5e      	ldr	r3, [pc, #376]	; (8009bb0 <CheckUART+0x81c>)
 8009a38:	2201      	movs	r2, #1
 8009a3a:	701a      	strb	r2, [r3, #0]
					  FLAG4=1;
 8009a3c:	4b5d      	ldr	r3, [pc, #372]	; (8009bb4 <CheckUART+0x820>)
 8009a3e:	2201      	movs	r2, #1
 8009a40:	701a      	strb	r2, [r3, #0]
					  tft_fill(0,0,320,240,BLACK);
 8009a42:	2300      	movs	r3, #0
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	23f0      	movs	r3, #240	; 0xf0
 8009a48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f002 f956 	bl	800bd00 <tft_fill>
 8009a54:	e039      	b.n	8009aca <CheckUART+0x736>
	  		  	 		}
			else if(Rx_Buffer[i] =='v' && Rx_Buffer[i+1]=='f'&& Rx_Buffer[i+2]=='f'){ // chế độ UV
 8009a56:	4a4c      	ldr	r2, [pc, #304]	; (8009b88 <CheckUART+0x7f4>)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b76      	cmp	r3, #118	; 0x76
 8009a60:	d133      	bne.n	8009aca <CheckUART+0x736>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3301      	adds	r3, #1
 8009a66:	4a48      	ldr	r2, [pc, #288]	; (8009b88 <CheckUART+0x7f4>)
 8009a68:	5cd3      	ldrb	r3, [r2, r3]
 8009a6a:	2b66      	cmp	r3, #102	; 0x66
 8009a6c:	d12d      	bne.n	8009aca <CheckUART+0x736>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3302      	adds	r3, #2
 8009a72:	4a45      	ldr	r2, [pc, #276]	; (8009b88 <CheckUART+0x7f4>)
 8009a74:	5cd3      	ldrb	r3, [r2, r3]
 8009a76:	2b66      	cmp	r3, #102	; 0x66
 8009a78:	d127      	bne.n	8009aca <CheckUART+0x736>

				UVmode = UVoff;
 8009a7a:	4b4f      	ldr	r3, [pc, #316]	; (8009bb8 <CheckUART+0x824>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
				num = UVOFF;
 8009a80:	4b44      	ldr	r3, [pc, #272]	; (8009b94 <CheckUART+0x800>)
 8009a82:	220f      	movs	r2, #15
 8009a84:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11,GPIO_PIN_RESET);
 8009a86:	2200      	movs	r2, #0
 8009a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a8c:	4842      	ldr	r0, [pc, #264]	; (8009b98 <CheckUART+0x804>)
 8009a8e:	f7f7 fa65 	bl	8000f5c <HAL_GPIO_WritePin>
				 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8009a92:	4b43      	ldr	r3, [pc, #268]	; (8009ba0 <CheckUART+0x80c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2200      	movs	r2, #0
 8009a98:	625a      	str	r2, [r3, #36]	; 0x24
				  FLAG=1;
 8009a9a:	4b42      	ldr	r3, [pc, #264]	; (8009ba4 <CheckUART+0x810>)
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 8009aa0:	4b41      	ldr	r3, [pc, #260]	; (8009ba8 <CheckUART+0x814>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 8009aa6:	4b41      	ldr	r3, [pc, #260]	; (8009bac <CheckUART+0x818>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8009aac:	4b40      	ldr	r3, [pc, #256]	; (8009bb0 <CheckUART+0x81c>)
 8009aae:	2201      	movs	r2, #1
 8009ab0:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 8009ab2:	4b40      	ldr	r3, [pc, #256]	; (8009bb4 <CheckUART+0x820>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	701a      	strb	r2, [r3, #0]
				  tft_fill(0,0,320,240,BLACK);
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	23f0      	movs	r3, #240	; 0xf0
 8009abe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	f002 f91b 	bl	800bd00 <tft_fill>
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3301      	adds	r3, #1
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	482d      	ldr	r0, [pc, #180]	; (8009b88 <CheckUART+0x7f4>)
 8009ad2:	f7f6 fb85 	bl	80001e0 <strlen>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	f4bf ac65 	bcs.w	80093aa <CheckUART+0x16>
			}
	  	 }
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	e03e      	b.n	8009b64 <CheckUART+0x7d0>
		  if(Rx_Buffer[i] =='s' && Rx_Buffer[i+1]=='t'&& Rx_Buffer[i+2]=='a'){
 8009ae6:	4a28      	ldr	r2, [pc, #160]	; (8009b88 <CheckUART+0x7f4>)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	4413      	add	r3, r2
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b73      	cmp	r3, #115	; 0x73
 8009af0:	d135      	bne.n	8009b5e <CheckUART+0x7ca>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	4a24      	ldr	r2, [pc, #144]	; (8009b88 <CheckUART+0x7f4>)
 8009af8:	5cd3      	ldrb	r3, [r2, r3]
 8009afa:	2b74      	cmp	r3, #116	; 0x74
 8009afc:	d12f      	bne.n	8009b5e <CheckUART+0x7ca>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	3302      	adds	r3, #2
 8009b02:	4a21      	ldr	r2, [pc, #132]	; (8009b88 <CheckUART+0x7f4>)
 8009b04:	5cd3      	ldrb	r3, [r2, r3]
 8009b06:	2b61      	cmp	r3, #97	; 0x61
 8009b08:	d129      	bne.n	8009b5e <CheckUART+0x7ca>
			//	 PM25 = PM25;
							  //error
			 // } else {
			//	 PM25 = m.mc_2p5;
			//  }
			  err = svm_measure_iaq_blocking_read(&tvoc_ppb, &co2_ppm, &temperature, &humidity);
 8009b0a:	4b2c      	ldr	r3, [pc, #176]	; (8009bbc <CheckUART+0x828>)
 8009b0c:	4a2c      	ldr	r2, [pc, #176]	; (8009bc0 <CheckUART+0x82c>)
 8009b0e:	492d      	ldr	r1, [pc, #180]	; (8009bc4 <CheckUART+0x830>)
 8009b10:	482d      	ldr	r0, [pc, #180]	; (8009bc8 <CheckUART+0x834>)
 8009b12:	f001 fc88 	bl	800b426 <svm_measure_iaq_blocking_read>
 8009b16:	4603      	mov	r3, r0
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4b2c      	ldr	r3, [pc, #176]	; (8009bcc <CheckUART+0x838>)
 8009b1c:	801a      	strh	r2, [r3, #0]

			  if (err == STATUS_OK) {
 8009b1e:	4b2b      	ldr	r3, [pc, #172]	; (8009bcc <CheckUART+0x838>)
 8009b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00f      	beq.n	8009b48 <CheckUART+0x7b4>
					//lay thanh cong
			  } else {
					co2_ppm = co2_ppm;
 8009b28:	4b26      	ldr	r3, [pc, #152]	; (8009bc4 <CheckUART+0x830>)
 8009b2a:	881a      	ldrh	r2, [r3, #0]
 8009b2c:	4b25      	ldr	r3, [pc, #148]	; (8009bc4 <CheckUART+0x830>)
 8009b2e:	801a      	strh	r2, [r3, #0]
					temperature = temperature;
 8009b30:	4b23      	ldr	r3, [pc, #140]	; (8009bc0 <CheckUART+0x82c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a22      	ldr	r2, [pc, #136]	; (8009bc0 <CheckUART+0x82c>)
 8009b36:	6013      	str	r3, [r2, #0]
					humidity = humidity;
 8009b38:	4b20      	ldr	r3, [pc, #128]	; (8009bbc <CheckUART+0x828>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a1f      	ldr	r2, [pc, #124]	; (8009bbc <CheckUART+0x828>)
 8009b3e:	6013      	str	r3, [r2, #0]
					tvoc_ppb = tvoc_ppb;
 8009b40:	4b21      	ldr	r3, [pc, #132]	; (8009bc8 <CheckUART+0x834>)
 8009b42:	881a      	ldrh	r2, [r3, #0]
 8009b44:	4b20      	ldr	r3, [pc, #128]	; (8009bc8 <CheckUART+0x834>)
 8009b46:	801a      	strh	r2, [r3, #0]
					//khong the doc tu cam bien
			  }

			  Convertvalue();
 8009b48:	f7ff f828 	bl	8008b9c <Convertvalue>
			  FrameUART();
 8009b4c:	f7ff f8ee 	bl	8008d2c <FrameUART>
			  HAL_UART_Transmit(&huart1, (char *) &frame, sizeof(frame), HAL_MAX_DELAY);
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295
 8009b54:	2264      	movs	r2, #100	; 0x64
 8009b56:	491e      	ldr	r1, [pc, #120]	; (8009bd0 <CheckUART+0x83c>)
 8009b58:	481e      	ldr	r0, [pc, #120]	; (8009bd4 <CheckUART+0x840>)
 8009b5a:	f7fb fbfc 	bl	8005356 <HAL_UART_Transmit>
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	3301      	adds	r3, #1
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	4808      	ldr	r0, [pc, #32]	; (8009b88 <CheckUART+0x7f4>)
 8009b66:	f7f6 fb3b 	bl	80001e0 <strlen>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d2b9      	bcs.n	8009ae6 <CheckUART+0x752>
		   }
	  }

	  Transfer_cplt = 0;
 8009b72:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <CheckUART+0x844>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(400);
 8009b78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009b7c:	f7f6 ff2e 	bl	80009dc <HAL_Delay>
  }
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20004518 	.word	0x20004518
 8009b8c:	20004540 	.word	0x20004540
 8009b90:	200044ac 	.word	0x200044ac
 8009b94:	20004040 	.word	0x20004040
 8009b98:	40020800 	.word	0x40020800
 8009b9c:	40020000 	.word	0x40020000
 8009ba0:	200047c4 	.word	0x200047c4
 8009ba4:	20004042 	.word	0x20004042
 8009ba8:	20004043 	.word	0x20004043
 8009bac:	20004044 	.word	0x20004044
 8009bb0:	20004045 	.word	0x20004045
 8009bb4:	20004046 	.word	0x20004046
 8009bb8:	20004170 	.word	0x20004170
 8009bbc:	2000404c 	.word	0x2000404c
 8009bc0:	20004048 	.word	0x20004048
 8009bc4:	20000016 	.word	0x20000016
 8009bc8:	20000014 	.word	0x20000014
 8009bcc:	200044b8 	.word	0x200044b8
 8009bd0:	20004558 	.word	0x20004558
 8009bd4:	20004250 	.word	0x20004250
 8009bd8:	20004111 	.word	0x20004111

08009bdc <IAQcolor>:
void IAQcolor(void){
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0

	if (PM25 <= 50){
 8009be0:	4b3e      	ldr	r3, [pc, #248]	; (8009cdc <IAQcolor+0x100>)
 8009be2:	edd3 7a00 	vldr	s15, [r3]
 8009be6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8009ce0 <IAQcolor+0x104>
 8009bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf2:	d807      	bhi.n	8009c04 <IAQcolor+0x28>
		BACK_COLOR=BLACK;
 8009bf4:	4b3b      	ldr	r3, [pc, #236]	; (8009ce4 <IAQcolor+0x108>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=GREEN;
 8009bfa:	4b3b      	ldr	r3, [pc, #236]	; (8009ce8 <IAQcolor+0x10c>)
 8009bfc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8009c00:	801a      	strh	r2, [r3, #0]
	else if (PM25 > 200 ){
		BACK_COLOR=BLACK;
		POINT_COLOR=VIOLET;
	}

}
 8009c02:	e066      	b.n	8009cd2 <IAQcolor+0xf6>
	else if (PM25 > 50 && PM25 <= 100){
 8009c04:	4b35      	ldr	r3, [pc, #212]	; (8009cdc <IAQcolor+0x100>)
 8009c06:	edd3 7a00 	vldr	s15, [r3]
 8009c0a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8009ce0 <IAQcolor+0x104>
 8009c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	dd11      	ble.n	8009c3c <IAQcolor+0x60>
 8009c18:	4b30      	ldr	r3, [pc, #192]	; (8009cdc <IAQcolor+0x100>)
 8009c1a:	edd3 7a00 	vldr	s15, [r3]
 8009c1e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8009cec <IAQcolor+0x110>
 8009c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2a:	d807      	bhi.n	8009c3c <IAQcolor+0x60>
		BACK_COLOR=BLACK;
 8009c2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ce4 <IAQcolor+0x108>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=YELLOW;
 8009c32:	4b2d      	ldr	r3, [pc, #180]	; (8009ce8 <IAQcolor+0x10c>)
 8009c34:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8009c38:	801a      	strh	r2, [r3, #0]
 8009c3a:	e04a      	b.n	8009cd2 <IAQcolor+0xf6>
	else if (PM25 > 100 && PM25 <= 150){
 8009c3c:	4b27      	ldr	r3, [pc, #156]	; (8009cdc <IAQcolor+0x100>)
 8009c3e:	edd3 7a00 	vldr	s15, [r3]
 8009c42:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009cec <IAQcolor+0x110>
 8009c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4e:	dd11      	ble.n	8009c74 <IAQcolor+0x98>
 8009c50:	4b22      	ldr	r3, [pc, #136]	; (8009cdc <IAQcolor+0x100>)
 8009c52:	edd3 7a00 	vldr	s15, [r3]
 8009c56:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009cf0 <IAQcolor+0x114>
 8009c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c62:	d807      	bhi.n	8009c74 <IAQcolor+0x98>
		BACK_COLOR=BLACK;
 8009c64:	4b1f      	ldr	r3, [pc, #124]	; (8009ce4 <IAQcolor+0x108>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=ORANGE;
 8009c6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ce8 <IAQcolor+0x10c>)
 8009c6c:	f64e 32e3 	movw	r2, #60387	; 0xebe3
 8009c70:	801a      	strh	r2, [r3, #0]
 8009c72:	e02e      	b.n	8009cd2 <IAQcolor+0xf6>
	else if (PM25 > 150 && PM25 <= 200){
 8009c74:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <IAQcolor+0x100>)
 8009c76:	edd3 7a00 	vldr	s15, [r3]
 8009c7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009cf0 <IAQcolor+0x114>
 8009c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c86:	dd11      	ble.n	8009cac <IAQcolor+0xd0>
 8009c88:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <IAQcolor+0x100>)
 8009c8a:	edd3 7a00 	vldr	s15, [r3]
 8009c8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009cf4 <IAQcolor+0x118>
 8009c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9a:	d807      	bhi.n	8009cac <IAQcolor+0xd0>
		BACK_COLOR=BLACK;
 8009c9c:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <IAQcolor+0x108>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=RED;
 8009ca2:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <IAQcolor+0x10c>)
 8009ca4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009ca8:	801a      	strh	r2, [r3, #0]
 8009caa:	e012      	b.n	8009cd2 <IAQcolor+0xf6>
	else if (PM25 > 200 ){
 8009cac:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <IAQcolor+0x100>)
 8009cae:	edd3 7a00 	vldr	s15, [r3]
 8009cb2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009cf4 <IAQcolor+0x118>
 8009cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cbe:	dc00      	bgt.n	8009cc2 <IAQcolor+0xe6>
}
 8009cc0:	e007      	b.n	8009cd2 <IAQcolor+0xf6>
		BACK_COLOR=BLACK;
 8009cc2:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <IAQcolor+0x108>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=VIOLET;
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <IAQcolor+0x10c>)
 8009cca:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8009cce:	801a      	strh	r2, [r3, #0]
}
 8009cd0:	e7ff      	b.n	8009cd2 <IAQcolor+0xf6>
 8009cd2:	bf00      	nop
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	20004108 	.word	0x20004108
 8009ce0:	42480000 	.word	0x42480000
 8009ce4:	200048a8 	.word	0x200048a8
 8009ce8:	200048aa 	.word	0x200048aa
 8009cec:	42c80000 	.word	0x42c80000
 8009cf0:	43160000 	.word	0x43160000
 8009cf4:	43480000 	.word	0x43480000

08009cf8 <FormInterface>:

void FormInterface(void) {
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0


	 if (num == OFFALL /*&& FLAG == 1*/){
 8009cfc:	4bac      	ldr	r3, [pc, #688]	; (8009fb0 <FormInterface+0x2b8>)
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d141      	bne.n	8009d88 <FormInterface+0x90>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8009d04:	4bab      	ldr	r3, [pc, #684]	; (8009fb4 <FormInterface+0x2bc>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	625a      	str	r2, [r3, #36]	; 0x24
			IAQcolor();
 8009d0c:	f7ff ff66 	bl	8009bdc <IAQcolor>

			if (PM25 <= 9){
 8009d10:	4ba9      	ldr	r3, [pc, #676]	; (8009fb8 <FormInterface+0x2c0>)
 8009d12:	edd3 7a00 	vldr	s15, [r3]
 8009d16:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8009d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d22:	d803      	bhi.n	8009d2c <FormInterface+0x34>
				cursor = 110;
 8009d24:	4ba5      	ldr	r3, [pc, #660]	; (8009fbc <FormInterface+0x2c4>)
 8009d26:	226e      	movs	r2, #110	; 0x6e
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e024      	b.n	8009d76 <FormInterface+0x7e>
			}
			else if (PM25 >= 10 && PM25 <100){
 8009d2c:	4ba2      	ldr	r3, [pc, #648]	; (8009fb8 <FormInterface+0x2c0>)
 8009d2e:	edd3 7a00 	vldr	s15, [r3]
 8009d32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	db0d      	blt.n	8009d5c <FormInterface+0x64>
 8009d40:	4b9d      	ldr	r3, [pc, #628]	; (8009fb8 <FormInterface+0x2c0>)
 8009d42:	edd3 7a00 	vldr	s15, [r3]
 8009d46:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8009fc0 <FormInterface+0x2c8>
 8009d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d52:	d503      	bpl.n	8009d5c <FormInterface+0x64>
				cursor = 100;
 8009d54:	4b99      	ldr	r3, [pc, #612]	; (8009fbc <FormInterface+0x2c4>)
 8009d56:	2264      	movs	r2, #100	; 0x64
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	e00c      	b.n	8009d76 <FormInterface+0x7e>
			}
			else if (PM25 > 100){
 8009d5c:	4b96      	ldr	r3, [pc, #600]	; (8009fb8 <FormInterface+0x2c0>)
 8009d5e:	edd3 7a00 	vldr	s15, [r3]
 8009d62:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8009fc0 <FormInterface+0x2c8>
 8009d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	dd02      	ble.n	8009d76 <FormInterface+0x7e>
				cursor = 90;
 8009d70:	4b92      	ldr	r3, [pc, #584]	; (8009fbc <FormInterface+0x2c4>)
 8009d72:	225a      	movs	r2, #90	; 0x5a
 8009d74:	601a      	str	r2, [r3, #0]
			}
			tft_puts18x32(160,cursor,(int8_t*)buffer5,TFT_STRING_MODE_BACKGROUND);
 8009d76:	4b91      	ldr	r3, [pc, #580]	; (8009fbc <FormInterface+0x2c4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	b299      	uxth	r1, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4a91      	ldr	r2, [pc, #580]	; (8009fc4 <FormInterface+0x2cc>)
 8009d80:	20a0      	movs	r0, #160	; 0xa0
 8009d82:	f001 fdb1 	bl	800b8e8 <tft_puts18x32>
			  BACK_COLOR=BLACK;
			  POINT_COLOR=RED;
			  tft_puts14x24(220,3,(int8_t*)"UV: OFF    ",TFT_STRING_MODE_BACKGROUND);
		 }

}
 8009d86:	e150      	b.n	800a02a <FormInterface+0x332>
		 else if (num == POWER_ON){
 8009d88:	4b89      	ldr	r3, [pc, #548]	; (8009fb0 <FormInterface+0x2b8>)
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d113      	bne.n	8009db8 <FormInterface+0xc0>
			  BACK_COLOR=BLACK;
 8009d90:	4b8d      	ldr	r3, [pc, #564]	; (8009fc8 <FormInterface+0x2d0>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009d96:	4b8d      	ldr	r3, [pc, #564]	; (8009fcc <FormInterface+0x2d4>)
 8009d98:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009d9c:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8009d9e:	2300      	movs	r3, #0
 8009da0:	4a8b      	ldr	r2, [pc, #556]	; (8009fd0 <FormInterface+0x2d8>)
 8009da2:	2103      	movs	r1, #3
 8009da4:	20c8      	movs	r0, #200	; 0xc8
 8009da6:	f001 fd61 	bl	800b86c <tft_puts14x24>
			  tft_puts14x24(240,3,(int8_t*)"SPEED: MEDIUM      ",TFT_STRING_MODE_BACKGROUND);
 8009daa:	2300      	movs	r3, #0
 8009dac:	4a89      	ldr	r2, [pc, #548]	; (8009fd4 <FormInterface+0x2dc>)
 8009dae:	2103      	movs	r1, #3
 8009db0:	20f0      	movs	r0, #240	; 0xf0
 8009db2:	f001 fd5b 	bl	800b86c <tft_puts14x24>
}
 8009db6:	e138      	b.n	800a02a <FormInterface+0x332>
		  else if (num == POWER_OFF){
 8009db8:	4b7d      	ldr	r3, [pc, #500]	; (8009fb0 <FormInterface+0x2b8>)
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d10d      	bne.n	8009ddc <FormInterface+0xe4>
			  BACK_COLOR=BLACK;
 8009dc0:	4b81      	ldr	r3, [pc, #516]	; (8009fc8 <FormInterface+0x2d0>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009dc6:	4b81      	ldr	r3, [pc, #516]	; (8009fcc <FormInterface+0x2d4>)
 8009dc8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009dcc:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: OFF      ",TFT_STRING_MODE_BACKGROUND);
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4a81      	ldr	r2, [pc, #516]	; (8009fd8 <FormInterface+0x2e0>)
 8009dd2:	2103      	movs	r1, #3
 8009dd4:	20c8      	movs	r0, #200	; 0xc8
 8009dd6:	f001 fd49 	bl	800b86c <tft_puts14x24>
}
 8009dda:	e126      	b.n	800a02a <FormInterface+0x332>
		  else if (num == SPEED_HIGHT){
 8009ddc:	4b74      	ldr	r3, [pc, #464]	; (8009fb0 <FormInterface+0x2b8>)
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d113      	bne.n	8009e0c <FormInterface+0x114>
			  BACK_COLOR=BLACK;
 8009de4:	4b78      	ldr	r3, [pc, #480]	; (8009fc8 <FormInterface+0x2d0>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009dea:	4b78      	ldr	r3, [pc, #480]	; (8009fcc <FormInterface+0x2d4>)
 8009dec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009df0:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8009df2:	2300      	movs	r3, #0
 8009df4:	4a76      	ldr	r2, [pc, #472]	; (8009fd0 <FormInterface+0x2d8>)
 8009df6:	2103      	movs	r1, #3
 8009df8:	20c8      	movs	r0, #200	; 0xc8
 8009dfa:	f001 fd37 	bl	800b86c <tft_puts14x24>
			  tft_puts14x24(240,3,(int8_t*)"SPEED: HIGH      ",TFT_STRING_MODE_BACKGROUND);
 8009dfe:	2300      	movs	r3, #0
 8009e00:	4a76      	ldr	r2, [pc, #472]	; (8009fdc <FormInterface+0x2e4>)
 8009e02:	2103      	movs	r1, #3
 8009e04:	20f0      	movs	r0, #240	; 0xf0
 8009e06:	f001 fd31 	bl	800b86c <tft_puts14x24>
}
 8009e0a:	e10e      	b.n	800a02a <FormInterface+0x332>
		  else if (num == SPEED_MEDIUM){
 8009e0c:	4b68      	ldr	r3, [pc, #416]	; (8009fb0 <FormInterface+0x2b8>)
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	2b05      	cmp	r3, #5
 8009e12:	d113      	bne.n	8009e3c <FormInterface+0x144>
			  BACK_COLOR=BLACK;
 8009e14:	4b6c      	ldr	r3, [pc, #432]	; (8009fc8 <FormInterface+0x2d0>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009e1a:	4b6c      	ldr	r3, [pc, #432]	; (8009fcc <FormInterface+0x2d4>)
 8009e1c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009e20:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8009e22:	2300      	movs	r3, #0
 8009e24:	4a6a      	ldr	r2, [pc, #424]	; (8009fd0 <FormInterface+0x2d8>)
 8009e26:	2103      	movs	r1, #3
 8009e28:	20c8      	movs	r0, #200	; 0xc8
 8009e2a:	f001 fd1f 	bl	800b86c <tft_puts14x24>
			  tft_puts14x24(240,3,(int8_t*)"SPEED: MEDIUM      ",TFT_STRING_MODE_BACKGROUND);
 8009e2e:	2300      	movs	r3, #0
 8009e30:	4a68      	ldr	r2, [pc, #416]	; (8009fd4 <FormInterface+0x2dc>)
 8009e32:	2103      	movs	r1, #3
 8009e34:	20f0      	movs	r0, #240	; 0xf0
 8009e36:	f001 fd19 	bl	800b86c <tft_puts14x24>
}
 8009e3a:	e0f6      	b.n	800a02a <FormInterface+0x332>
		  else if (num == SPEED_LOW){
 8009e3c:	4b5c      	ldr	r3, [pc, #368]	; (8009fb0 <FormInterface+0x2b8>)
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d113      	bne.n	8009e6c <FormInterface+0x174>
			  BACK_COLOR=BLACK;
 8009e44:	4b60      	ldr	r3, [pc, #384]	; (8009fc8 <FormInterface+0x2d0>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009e4a:	4b60      	ldr	r3, [pc, #384]	; (8009fcc <FormInterface+0x2d4>)
 8009e4c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009e50:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8009e52:	2300      	movs	r3, #0
 8009e54:	4a5e      	ldr	r2, [pc, #376]	; (8009fd0 <FormInterface+0x2d8>)
 8009e56:	2103      	movs	r1, #3
 8009e58:	20c8      	movs	r0, #200	; 0xc8
 8009e5a:	f001 fd07 	bl	800b86c <tft_puts14x24>
			  tft_puts14x24(240,3,(int8_t*)"SPEED: LOW      ",TFT_STRING_MODE_BACKGROUND);
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4a5f      	ldr	r2, [pc, #380]	; (8009fe0 <FormInterface+0x2e8>)
 8009e62:	2103      	movs	r1, #3
 8009e64:	20f0      	movs	r0, #240	; 0xf0
 8009e66:	f001 fd01 	bl	800b86c <tft_puts14x24>
}
 8009e6a:	e0de      	b.n	800a02a <FormInterface+0x332>
		  else if (num == NIGHT_ON){
 8009e6c:	4b50      	ldr	r3, [pc, #320]	; (8009fb0 <FormInterface+0x2b8>)
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	2b06      	cmp	r3, #6
 8009e72:	d10d      	bne.n	8009e90 <FormInterface+0x198>
			  BACK_COLOR=BLACK;
 8009e74:	4b54      	ldr	r3, [pc, #336]	; (8009fc8 <FormInterface+0x2d0>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009e7a:	4b54      	ldr	r3, [pc, #336]	; (8009fcc <FormInterface+0x2d4>)
 8009e7c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009e80:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"NIGHT_MODE: ON     ",TFT_STRING_MODE_BACKGROUND);
 8009e82:	2300      	movs	r3, #0
 8009e84:	4a57      	ldr	r2, [pc, #348]	; (8009fe4 <FormInterface+0x2ec>)
 8009e86:	2103      	movs	r1, #3
 8009e88:	20dc      	movs	r0, #220	; 0xdc
 8009e8a:	f001 fcef 	bl	800b86c <tft_puts14x24>
}
 8009e8e:	e0cc      	b.n	800a02a <FormInterface+0x332>
		  else if (num == NIGHT_OFF){
 8009e90:	4b47      	ldr	r3, [pc, #284]	; (8009fb0 <FormInterface+0x2b8>)
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	d10d      	bne.n	8009eb4 <FormInterface+0x1bc>
			  BACK_COLOR=BLACK;
 8009e98:	4b4b      	ldr	r3, [pc, #300]	; (8009fc8 <FormInterface+0x2d0>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009e9e:	4b4b      	ldr	r3, [pc, #300]	; (8009fcc <FormInterface+0x2d4>)
 8009ea0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009ea4:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"NIGHT_MODE: OFF     ",TFT_STRING_MODE_BACKGROUND);
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4a4f      	ldr	r2, [pc, #316]	; (8009fe8 <FormInterface+0x2f0>)
 8009eaa:	2103      	movs	r1, #3
 8009eac:	20dc      	movs	r0, #220	; 0xdc
 8009eae:	f001 fcdd 	bl	800b86c <tft_puts14x24>
}
 8009eb2:	e0ba      	b.n	800a02a <FormInterface+0x332>
		  else if (num == FRESH_AIR){
 8009eb4:	4b3e      	ldr	r3, [pc, #248]	; (8009fb0 <FormInterface+0x2b8>)
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d10d      	bne.n	8009ed8 <FormInterface+0x1e0>
			  BACK_COLOR=BLACK;
 8009ebc:	4b42      	ldr	r3, [pc, #264]	; (8009fc8 <FormInterface+0x2d0>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009ec2:	4b42      	ldr	r3, [pc, #264]	; (8009fcc <FormInterface+0x2d4>)
 8009ec4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009ec8:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"FILTER: Fresh air     ",TFT_STRING_MODE_BACKGROUND);
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4a47      	ldr	r2, [pc, #284]	; (8009fec <FormInterface+0x2f4>)
 8009ece:	2103      	movs	r1, #3
 8009ed0:	20dc      	movs	r0, #220	; 0xdc
 8009ed2:	f001 fccb 	bl	800b86c <tft_puts14x24>
}
 8009ed6:	e0a8      	b.n	800a02a <FormInterface+0x332>
		  else if (num == INDOOR){
 8009ed8:	4b35      	ldr	r3, [pc, #212]	; (8009fb0 <FormInterface+0x2b8>)
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	2b09      	cmp	r3, #9
 8009ede:	d10d      	bne.n	8009efc <FormInterface+0x204>
			  BACK_COLOR=BLACK;
 8009ee0:	4b39      	ldr	r3, [pc, #228]	; (8009fc8 <FormInterface+0x2d0>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009ee6:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <FormInterface+0x2d4>)
 8009ee8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009eec:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"FILTER: Indoor    ",TFT_STRING_MODE_BACKGROUND);
 8009eee:	2300      	movs	r3, #0
 8009ef0:	4a3f      	ldr	r2, [pc, #252]	; (8009ff0 <FormInterface+0x2f8>)
 8009ef2:	2103      	movs	r1, #3
 8009ef4:	20dc      	movs	r0, #220	; 0xdc
 8009ef6:	f001 fcb9 	bl	800b86c <tft_puts14x24>
}
 8009efa:	e096      	b.n	800a02a <FormInterface+0x332>
		  else if (num == MANUAL){
 8009efc:	4b2c      	ldr	r3, [pc, #176]	; (8009fb0 <FormInterface+0x2b8>)
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	2b0a      	cmp	r3, #10
 8009f02:	d10d      	bne.n	8009f20 <FormInterface+0x228>
			  BACK_COLOR=BLACK;
 8009f04:	4b30      	ldr	r3, [pc, #192]	; (8009fc8 <FormInterface+0x2d0>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009f0a:	4b30      	ldr	r3, [pc, #192]	; (8009fcc <FormInterface+0x2d4>)
 8009f0c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009f10:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"CONTROL: Manual    ",TFT_STRING_MODE_BACKGROUND);
 8009f12:	2300      	movs	r3, #0
 8009f14:	4a37      	ldr	r2, [pc, #220]	; (8009ff4 <FormInterface+0x2fc>)
 8009f16:	2103      	movs	r1, #3
 8009f18:	20dc      	movs	r0, #220	; 0xdc
 8009f1a:	f001 fca7 	bl	800b86c <tft_puts14x24>
}
 8009f1e:	e084      	b.n	800a02a <FormInterface+0x332>
		  else if (num == AUTO){
 8009f20:	4b23      	ldr	r3, [pc, #140]	; (8009fb0 <FormInterface+0x2b8>)
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	2b0b      	cmp	r3, #11
 8009f26:	d10d      	bne.n	8009f44 <FormInterface+0x24c>
			  BACK_COLOR=BLACK;
 8009f28:	4b27      	ldr	r3, [pc, #156]	; (8009fc8 <FormInterface+0x2d0>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009f2e:	4b27      	ldr	r3, [pc, #156]	; (8009fcc <FormInterface+0x2d4>)
 8009f30:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009f34:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"CONTROL: Auto    ",TFT_STRING_MODE_BACKGROUND);
 8009f36:	2300      	movs	r3, #0
 8009f38:	4a2f      	ldr	r2, [pc, #188]	; (8009ff8 <FormInterface+0x300>)
 8009f3a:	2103      	movs	r1, #3
 8009f3c:	20dc      	movs	r0, #220	; 0xdc
 8009f3e:	f001 fc95 	bl	800b86c <tft_puts14x24>
}
 8009f42:	e072      	b.n	800a02a <FormInterface+0x332>
		  else if (num == IONON){
 8009f44:	4b1a      	ldr	r3, [pc, #104]	; (8009fb0 <FormInterface+0x2b8>)
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	2b0c      	cmp	r3, #12
 8009f4a:	d10d      	bne.n	8009f68 <FormInterface+0x270>
			  BACK_COLOR=BLACK;
 8009f4c:	4b1e      	ldr	r3, [pc, #120]	; (8009fc8 <FormInterface+0x2d0>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009f52:	4b1e      	ldr	r3, [pc, #120]	; (8009fcc <FormInterface+0x2d4>)
 8009f54:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009f58:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"ION: On    ",TFT_STRING_MODE_BACKGROUND);
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	4a27      	ldr	r2, [pc, #156]	; (8009ffc <FormInterface+0x304>)
 8009f5e:	2103      	movs	r1, #3
 8009f60:	20dc      	movs	r0, #220	; 0xdc
 8009f62:	f001 fc83 	bl	800b86c <tft_puts14x24>
}
 8009f66:	e060      	b.n	800a02a <FormInterface+0x332>
		  else if (num == IONOFF){
 8009f68:	4b11      	ldr	r3, [pc, #68]	; (8009fb0 <FormInterface+0x2b8>)
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	2b0d      	cmp	r3, #13
 8009f6e:	d10d      	bne.n	8009f8c <FormInterface+0x294>
			  BACK_COLOR=BLACK;
 8009f70:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <FormInterface+0x2d0>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009f76:	4b15      	ldr	r3, [pc, #84]	; (8009fcc <FormInterface+0x2d4>)
 8009f78:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009f7c:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"ION: Off    ",TFT_STRING_MODE_BACKGROUND);
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4a1f      	ldr	r2, [pc, #124]	; (800a000 <FormInterface+0x308>)
 8009f82:	2103      	movs	r1, #3
 8009f84:	20dc      	movs	r0, #220	; 0xdc
 8009f86:	f001 fc71 	bl	800b86c <tft_puts14x24>
}
 8009f8a:	e04e      	b.n	800a02a <FormInterface+0x332>
		  else if (num == UVON){
 8009f8c:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <FormInterface+0x2b8>)
 8009f8e:	881b      	ldrh	r3, [r3, #0]
 8009f90:	2b0e      	cmp	r3, #14
 8009f92:	d139      	bne.n	800a008 <FormInterface+0x310>
			  BACK_COLOR=BLACK;
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <FormInterface+0x2d0>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8009f9a:	4b0c      	ldr	r3, [pc, #48]	; (8009fcc <FormInterface+0x2d4>)
 8009f9c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8009fa0:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"UV: ON    ",TFT_STRING_MODE_BACKGROUND);
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	4a17      	ldr	r2, [pc, #92]	; (800a004 <FormInterface+0x30c>)
 8009fa6:	2103      	movs	r1, #3
 8009fa8:	20dc      	movs	r0, #220	; 0xdc
 8009faa:	f001 fc5f 	bl	800b86c <tft_puts14x24>
}
 8009fae:	e03c      	b.n	800a02a <FormInterface+0x332>
 8009fb0:	20004040 	.word	0x20004040
 8009fb4:	200047c4 	.word	0x200047c4
 8009fb8:	20004108 	.word	0x20004108
 8009fbc:	20004054 	.word	0x20004054
 8009fc0:	42c80000 	.word	0x42c80000
 8009fc4:	200044bc 	.word	0x200044bc
 8009fc8:	200048a8 	.word	0x200048a8
 8009fcc:	200048aa 	.word	0x200048aa
 8009fd0:	0800cfc0 	.word	0x0800cfc0
 8009fd4:	0800cfd0 	.word	0x0800cfd0
 8009fd8:	0800cfe4 	.word	0x0800cfe4
 8009fdc:	0800cff8 	.word	0x0800cff8
 8009fe0:	0800d00c 	.word	0x0800d00c
 8009fe4:	0800d020 	.word	0x0800d020
 8009fe8:	0800d034 	.word	0x0800d034
 8009fec:	0800d04c 	.word	0x0800d04c
 8009ff0:	0800d064 	.word	0x0800d064
 8009ff4:	0800d078 	.word	0x0800d078
 8009ff8:	0800d08c 	.word	0x0800d08c
 8009ffc:	0800d0a0 	.word	0x0800d0a0
 800a000:	0800d0ac 	.word	0x0800d0ac
 800a004:	0800d0bc 	.word	0x0800d0bc
		  else if (num == UVOFF){
 800a008:	4b09      	ldr	r3, [pc, #36]	; (800a030 <FormInterface+0x338>)
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	2b0f      	cmp	r3, #15
 800a00e:	d10c      	bne.n	800a02a <FormInterface+0x332>
			  BACK_COLOR=BLACK;
 800a010:	4b08      	ldr	r3, [pc, #32]	; (800a034 <FormInterface+0x33c>)
 800a012:	2200      	movs	r2, #0
 800a014:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 800a016:	4b08      	ldr	r3, [pc, #32]	; (800a038 <FormInterface+0x340>)
 800a018:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800a01c:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"UV: OFF    ",TFT_STRING_MODE_BACKGROUND);
 800a01e:	2300      	movs	r3, #0
 800a020:	4a06      	ldr	r2, [pc, #24]	; (800a03c <FormInterface+0x344>)
 800a022:	2103      	movs	r1, #3
 800a024:	20dc      	movs	r0, #220	; 0xdc
 800a026:	f001 fc21 	bl	800b86c <tft_puts14x24>
}
 800a02a:	bf00      	nop
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20004040 	.word	0x20004040
 800a034:	200048a8 	.word	0x200048a8
 800a038:	200048aa 	.word	0x200048aa
 800a03c:	0800d0c8 	.word	0x0800d0c8

0800a040 <IAQform>:

void IAQform(void){
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af02      	add	r7, sp, #8

	 	tft_fill(0,0,320,240,BLACK);
 800a046:	2300      	movs	r3, #0
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	23f0      	movs	r3, #240	; 0xf0
 800a04c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a050:	2100      	movs	r1, #0
 800a052:	2000      	movs	r0, #0
 800a054:	f001 fe54 	bl	800bd00 <tft_fill>
		draw_arc2(150,119,87);
 800a058:	2257      	movs	r2, #87	; 0x57
 800a05a:	2177      	movs	r1, #119	; 0x77
 800a05c:	2096      	movs	r0, #150	; 0x96
 800a05e:	f001 fd87 	bl	800bb70 <draw_arc2>
		draw_arc2(150,119,88);
 800a062:	2258      	movs	r2, #88	; 0x58
 800a064:	2177      	movs	r1, #119	; 0x77
 800a066:	2096      	movs	r0, #150	; 0x96
 800a068:	f001 fd82 	bl	800bb70 <draw_arc2>
		draw_arc2(150,119,89);
 800a06c:	2259      	movs	r2, #89	; 0x59
 800a06e:	2177      	movs	r1, #119	; 0x77
 800a070:	2096      	movs	r0, #150	; 0x96
 800a072:	f001 fd7d 	bl	800bb70 <draw_arc2>
		draw_arc2(150,119,90);
 800a076:	225a      	movs	r2, #90	; 0x5a
 800a078:	2177      	movs	r1, #119	; 0x77
 800a07a:	2096      	movs	r0, #150	; 0x96
 800a07c:	f001 fd78 	bl	800bb70 <draw_arc2>
		//HAL_Delay(200);
		draw_arc(150,119,87);
 800a080:	2257      	movs	r2, #87	; 0x57
 800a082:	2177      	movs	r1, #119	; 0x77
 800a084:	2096      	movs	r0, #150	; 0x96
 800a086:	f001 fcab 	bl	800b9e0 <draw_arc>
		draw_arc(150,119,88);
 800a08a:	2258      	movs	r2, #88	; 0x58
 800a08c:	2177      	movs	r1, #119	; 0x77
 800a08e:	2096      	movs	r0, #150	; 0x96
 800a090:	f001 fca6 	bl	800b9e0 <draw_arc>
		draw_arc(150,119,89);
 800a094:	2259      	movs	r2, #89	; 0x59
 800a096:	2177      	movs	r1, #119	; 0x77
 800a098:	2096      	movs	r0, #150	; 0x96
 800a09a:	f001 fca1 	bl	800b9e0 <draw_arc>
		draw_arc(150,119,90);
 800a09e:	225a      	movs	r2, #90	; 0x5a
 800a0a0:	2177      	movs	r1, #119	; 0x77
 800a0a2:	2096      	movs	r0, #150	; 0x96
 800a0a4:	f001 fc9c 	bl	800b9e0 <draw_arc>
		//HAL_Delay(200);
		draw_arc3(150,119,87);
 800a0a8:	2257      	movs	r2, #87	; 0x57
 800a0aa:	2177      	movs	r1, #119	; 0x77
 800a0ac:	2096      	movs	r0, #150	; 0x96
 800a0ae:	f001 fdc3 	bl	800bc38 <draw_arc3>
		draw_arc3(150,119,88);
 800a0b2:	2258      	movs	r2, #88	; 0x58
 800a0b4:	2177      	movs	r1, #119	; 0x77
 800a0b6:	2096      	movs	r0, #150	; 0x96
 800a0b8:	f001 fdbe 	bl	800bc38 <draw_arc3>
		draw_arc3(150,119,89);
 800a0bc:	2259      	movs	r2, #89	; 0x59
 800a0be:	2177      	movs	r1, #119	; 0x77
 800a0c0:	2096      	movs	r0, #150	; 0x96
 800a0c2:	f001 fdb9 	bl	800bc38 <draw_arc3>
		draw_arc3(150,119,90);
 800a0c6:	225a      	movs	r2, #90	; 0x5a
 800a0c8:	2177      	movs	r1, #119	; 0x77
 800a0ca:	2096      	movs	r0, #150	; 0x96
 800a0cc:	f001 fdb4 	bl	800bc38 <draw_arc3>
		//HAL_Delay(200);
		draw_arc1(150,119,87);
 800a0d0:	2257      	movs	r2, #87	; 0x57
 800a0d2:	2177      	movs	r1, #119	; 0x77
 800a0d4:	2096      	movs	r0, #150	; 0x96
 800a0d6:	f001 fce7 	bl	800baa8 <draw_arc1>
		draw_arc1(150,119,88);
 800a0da:	2258      	movs	r2, #88	; 0x58
 800a0dc:	2177      	movs	r1, #119	; 0x77
 800a0de:	2096      	movs	r0, #150	; 0x96
 800a0e0:	f001 fce2 	bl	800baa8 <draw_arc1>
		draw_arc1(150,119,89);
 800a0e4:	2259      	movs	r2, #89	; 0x59
 800a0e6:	2177      	movs	r1, #119	; 0x77
 800a0e8:	2096      	movs	r0, #150	; 0x96
 800a0ea:	f001 fcdd 	bl	800baa8 <draw_arc1>
		draw_arc1(150,119,90);
 800a0ee:	225a      	movs	r2, #90	; 0x5a
 800a0f0:	2177      	movs	r1, #119	; 0x77
 800a0f2:	2096      	movs	r0, #150	; 0x96
 800a0f4:	f001 fcd8 	bl	800baa8 <draw_arc1>
	 // tft_draw_circle(150,119,90);
	  //tft_draw_circle(150,119,91);
	  //tft_draw_circle(150,119,92);


	  tft_puts26x48(100,80,(int8_t*)"IAQ",TFT_STRING_MODE_NO_BACKGROUND);
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4a0c      	ldr	r2, [pc, #48]	; (800a12c <IAQform+0xec>)
 800a0fc:	2150      	movs	r1, #80	; 0x50
 800a0fe:	2064      	movs	r0, #100	; 0x64
 800a100:	f001 fc30 	bl	800b964 <tft_puts26x48>
	  tft_puts26x48(100,81,(int8_t*)"IAQ",TFT_STRING_MODE_NO_BACKGROUND);
 800a104:	2301      	movs	r3, #1
 800a106:	4a09      	ldr	r2, [pc, #36]	; (800a12c <IAQform+0xec>)
 800a108:	2151      	movs	r1, #81	; 0x51
 800a10a:	2064      	movs	r0, #100	; 0x64
 800a10c:	f001 fc2a 	bl	800b964 <tft_puts26x48>

	  POINT_COLOR=GBLUE;
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <IAQform+0xf0>)
 800a112:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a116:	801a      	strh	r2, [r3, #0]
	  tft_puts8x16(17,3,(int8_t*)"VIETTEL HIGH TECHNOLOGY",TFT_STRING_MODE_NO_BACKGROUND);
 800a118:	2301      	movs	r3, #1
 800a11a:	4a06      	ldr	r2, [pc, #24]	; (800a134 <IAQform+0xf4>)
 800a11c:	2103      	movs	r1, #3
 800a11e:	2011      	movs	r0, #17
 800a120:	f001 fb56 	bl	800b7d0 <tft_puts8x16>
}
 800a124:	bf00      	nop
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	0800d0d4 	.word	0x0800d0d4
 800a130:	200048aa 	.word	0x200048aa
 800a134:	0800d0d8 	.word	0x0800d0d8

0800a138 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a0f      	ldr	r2, [pc, #60]	; (800a184 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d101      	bne.n	800a14e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a14a:	f7f6 fc27 	bl	800099c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a156:	d111      	bne.n	800a17c <HAL_TIM_PeriodElapsedCallback+0x44>
  	{
  		num=0;
 800a158:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	801a      	strh	r2, [r3, #0]
  		FLAG=0;
 800a15e:	4b0b      	ldr	r3, [pc, #44]	; (800a18c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800a160:	2200      	movs	r2, #0
 800a162:	701a      	strb	r2, [r3, #0]
  		FLAG1=0;
 800a164:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
  		FLAG2=0;
 800a16a:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	701a      	strb	r2, [r3, #0]
  		FLAG3=0;
 800a170:	4b09      	ldr	r3, [pc, #36]	; (800a198 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
  		FLAG4=0;
 800a176:	4b09      	ldr	r3, [pc, #36]	; (800a19c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800a178:	2200      	movs	r2, #0
 800a17a:	701a      	strb	r2, [r3, #0]

  	}

  /* USER CODE END Callback 1 */
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	40000800 	.word	0x40000800
 800a188:	20004040 	.word	0x20004040
 800a18c:	20004042 	.word	0x20004042
 800a190:	20004043 	.word	0x20004043
 800a194:	20004044 	.word	0x20004044
 800a198:	20004045 	.word	0x20004045
 800a19c:	20004046 	.word	0x20004046

0800a1a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint8_t sensirion_common_generate_crc(uint8_t *data, uint16_t count) {
 800a1ae:	b480      	push	{r7}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800a1ba:	23ff      	movs	r3, #255	; 0xff
 800a1bc:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a1be:	2300      	movs	r3, #0
 800a1c0:	81fb      	strh	r3, [r7, #14]
 800a1c2:	e021      	b.n	800a208 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800a1c4:	89fb      	ldrh	r3, [r7, #14]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	781a      	ldrb	r2, [r3, #0]
 800a1cc:	7b7b      	ldrb	r3, [r7, #13]
 800a1ce:	4053      	eors	r3, r2
 800a1d0:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a1d2:	2308      	movs	r3, #8
 800a1d4:	733b      	strb	r3, [r7, #12]
 800a1d6:	e011      	b.n	800a1fc <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800a1d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	da07      	bge.n	800a1f0 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800a1e0:	7b7b      	ldrb	r3, [r7, #13]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	b25b      	sxtb	r3, r3
 800a1e6:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800a1ea:	b25b      	sxtb	r3, r3
 800a1ec:	737b      	strb	r3, [r7, #13]
 800a1ee:	e002      	b.n	800a1f6 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 800a1f0:	7b7b      	ldrb	r3, [r7, #13]
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a1f6:	7b3b      	ldrb	r3, [r7, #12]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	733b      	strb	r3, [r7, #12]
 800a1fc:	7b3b      	ldrb	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1ea      	bne.n	800a1d8 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a202:	89fb      	ldrh	r3, [r7, #14]
 800a204:	3301      	adds	r3, #1
 800a206:	81fb      	strh	r3, [r7, #14]
 800a208:	89fa      	ldrh	r2, [r7, #14]
 800a20a:	887b      	ldrh	r3, [r7, #2]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d3d9      	bcc.n	800a1c4 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 800a210:	7b7b      	ldrb	r3, [r7, #13]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(uint8_t *data, uint16_t count,
                                  uint8_t checksum) {
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	807b      	strh	r3, [r7, #2]
 800a22a:	4613      	mov	r3, r2
 800a22c:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 800a22e:	887b      	ldrh	r3, [r7, #2]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff ffbb 	bl	800a1ae <sensirion_common_generate_crc>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	787b      	ldrb	r3, [r7, #1]
 800a23e:	4293      	cmp	r3, r2
 800a240:	d002      	beq.n	800a248 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 800a242:	f04f 33ff 	mov.w	r3, #4294967295
 800a246:	e000      	b.n	800a24a <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t *buf, uint16_t cmd,
                                     const uint16_t *args, uint8_t num_args) {
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	461a      	mov	r2, r3
 800a25e:	460b      	mov	r3, r1
 800a260:	817b      	strh	r3, [r7, #10]
 800a262:	4613      	mov	r3, r2
 800a264:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 800a26a:	897b      	ldrh	r3, [r7, #10]
 800a26c:	0a1b      	lsrs	r3, r3, #8
 800a26e:	b29a      	uxth	r2, r3
 800a270:	8abb      	ldrh	r3, [r7, #20]
 800a272:	1c59      	adds	r1, r3, #1
 800a274:	82b9      	strh	r1, [r7, #20]
 800a276:	4619      	mov	r1, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	440b      	add	r3, r1
 800a27c:	b2d2      	uxtb	r2, r2
 800a27e:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 800a280:	8abb      	ldrh	r3, [r7, #20]
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	82ba      	strh	r2, [r7, #20]
 800a286:	461a      	mov	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	897a      	ldrh	r2, [r7, #10]
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]
 800a296:	e030      	b.n	800a2fa <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4413      	add	r3, r2
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	0a1b      	lsrs	r3, r3, #8
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	8abb      	ldrh	r3, [r7, #20]
 800a2a8:	1c59      	adds	r1, r3, #1
 800a2aa:	82b9      	strh	r1, [r7, #20]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	440b      	add	r3, r1
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	4413      	add	r3, r2
 800a2be:	881a      	ldrh	r2, [r3, #0]
 800a2c0:	8abb      	ldrh	r3, [r7, #20]
 800a2c2:	1c59      	adds	r1, r3, #1
 800a2c4:	82b9      	strh	r1, [r7, #20]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	440b      	add	r3, r1
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t *)&buf[idx - 2],
 800a2d0:	8abb      	ldrh	r3, [r7, #20]
 800a2d2:	3b02      	subs	r3, #2
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	2102      	movs	r1, #2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff ff67 	bl	800a1ae <sensirion_common_generate_crc>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 800a2e4:	8abb      	ldrh	r3, [r7, #20]
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	82ba      	strh	r2, [r7, #20]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	7cfa      	ldrb	r2, [r7, #19]
 800a2f2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	75fb      	strb	r3, [r7, #23]
 800a2fa:	7dfa      	ldrb	r2, [r7, #23]
 800a2fc:	7a7b      	ldrb	r3, [r7, #9]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d3ca      	bcc.n	800a298 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 800a302:	8abb      	ldrh	r3, [r7, #20]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t *data,
                                          uint16_t num_words) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b096      	sub	sp, #88	; 0x58
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
 800a318:	4613      	mov	r3, r2
 800a31a:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 800a31c:	88bb      	ldrh	r3, [r7, #4]
 800a31e:	461a      	mov	r2, r3
 800a320:	0052      	lsls	r2, r2, #1
 800a322:	4413      	add	r3, r2
 800a324:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t *const buf8 = (uint8_t *)word_buf;
 800a328:	f107 0308 	add.w	r3, r7, #8
 800a32c:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800a32e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f958 	bl	800a5ec <sensirion_i2c_read>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != STATUS_OK)
 800a342:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 800a34a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a34e:	e047      	b.n	800a3e0 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800a350:	2300      	movs	r3, #0
 800a352:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a356:	2300      	movs	r3, #0
 800a358:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a35c:	e039      	b.n	800a3d2 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800a35e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a364:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800a366:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a36a:	3302      	adds	r3, #2
 800a36c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a36e:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	2102      	movs	r1, #2
 800a376:	f7ff ff52 	bl	800a21e <sensirion_common_check_crc>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != STATUS_OK)
 800a380:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 800a388:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a38c:	e028      	b.n	800a3e0 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 800a38e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a394:	441a      	add	r2, r3
 800a396:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a39a:	1c59      	adds	r1, r3, #1
 800a39c:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	440b      	add	r3, r1
 800a3a6:	7812      	ldrb	r2, [r2, #0]
 800a3a8:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 800a3aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3b2:	441a      	add	r2, r3
 800a3b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a3b8:	1c59      	adds	r1, r3, #1
 800a3ba:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 800a3be:	4619      	mov	r1, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	440b      	add	r3, r1
 800a3c4:	7812      	ldrb	r2, [r2, #0]
 800a3c6:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800a3c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a3cc:	3303      	adds	r3, #3
 800a3ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a3d2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a3d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d3bf      	bcc.n	800a35e <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return STATUS_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3758      	adds	r7, #88	; 0x58
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t *data_words,
                                 uint16_t num_words) {
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	71fb      	strb	r3, [r7, #7]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t *)data_words,
 800a3f8:	88ba      	ldrh	r2, [r7, #4]
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff ff84 	bl	800a30c <sensirion_i2c_read_words_as_bytes>
 800a404:	4603      	mov	r3, r0
 800a406:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != STATUS_OK)
 800a408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <sensirion_i2c_read_words+0x2e>
        return ret;
 800a410:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a414:	e022      	b.n	800a45c <sensirion_i2c_read_words+0x74>

    for (i = 0; i < num_words; ++i)
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]
 800a41a:	e019      	b.n	800a450 <sensirion_i2c_read_words+0x68>
        data_words[i] = be16_to_cpu(data_words[i]);
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	4413      	add	r3, r2
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	021b      	lsls	r3, r3, #8
 800a428:	b21a      	sxth	r2, r3
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	440b      	add	r3, r1
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	0a1b      	lsrs	r3, r3, #8
 800a436:	b29b      	uxth	r3, r3
 800a438:	b21b      	sxth	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b219      	sxth	r1, r3
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	4413      	add	r3, r2
 800a446:	b28a      	uxth	r2, r1
 800a448:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i)
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	3301      	adds	r3, #1
 800a44e:	73fb      	strb	r3, [r7, #15]
 800a450:	7bfb      	ldrb	r3, [r7, #15]
 800a452:	b29b      	uxth	r3, r3
 800a454:	88ba      	ldrh	r2, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d8e0      	bhi.n	800a41c <sensirion_i2c_read_words+0x34>

    return STATUS_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	460a      	mov	r2, r1
 800a46e:	71fb      	strb	r3, [r7, #7]
 800a470:	4613      	mov	r3, r2
 800a472:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 800a474:	88b9      	ldrh	r1, [r7, #4]
 800a476:	f107 000c 	add.w	r0, r7, #12
 800a47a:	2300      	movs	r3, #0
 800a47c:	2200      	movs	r2, #0
 800a47e:	f7ff fee8 	bl	800a252 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 800a482:	f107 010c 	add.w	r1, r7, #12
 800a486:	79fb      	ldrb	r3, [r7, #7]
 800a488:	2202      	movs	r2, #2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 f8ca 	bl	800a624 <sensirion_i2c_write>
 800a490:	4603      	mov	r3, r0
 800a492:	b21b      	sxth	r3, r3
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t *data_words,
                                          uint16_t num_words) {
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08e      	sub	sp, #56	; 0x38
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60ba      	str	r2, [r7, #8]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	81bb      	strh	r3, [r7, #12]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	89b9      	ldrh	r1, [r7, #12]
 800a4b8:	f107 0014 	add.w	r0, r7, #20
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	f7ff fec8 	bl	800a252 <sensirion_fill_cmd_send_buf>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	86fb      	strh	r3, [r7, #54]	; 0x36
    return sensirion_i2c_write(address, buf, buf_size);
 800a4c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a4c8:	f107 0114 	add.w	r1, r7, #20
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 f8a8 	bl	800a624 <sensirion_i2c_write>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	b21b      	sxth	r3, r3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3738      	adds	r7, #56	; 0x38
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t *data_words,
                                       uint16_t num_words) {
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60ba      	str	r2, [r7, #8]
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 800a4f2:	89b9      	ldrh	r1, [r7, #12]
 800a4f4:	f107 0014 	add.w	r0, r7, #20
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f7ff fea9 	bl	800a252 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 800a500:	f107 0114 	add.w	r1, r7, #20
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	2202      	movs	r2, #2
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 f88b 	bl	800a624 <sensirion_i2c_write>
 800a50e:	4603      	mov	r3, r0
 800a510:	82fb      	strh	r3, [r7, #22]
    if (ret != STATUS_OK)
 800a512:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 800a51a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a51e:	e00c      	b.n	800a53a <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 800a526:	68b8      	ldr	r0, [r7, #8]
 800a528:	f000 f898 	bl	800a65c <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 800a52c:	8c3a      	ldrh	r2, [r7, #32]
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff ff58 	bl	800a3e8 <sensirion_i2c_read_words>
 800a538:	4603      	mov	r3, r0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <sensirion_i2c_read_cmd>:

int16_t sensirion_i2c_read_cmd(uint8_t address, uint16_t cmd,
                               uint16_t *data_words, uint16_t num_words) {
 800a542:	b580      	push	{r7, lr}
 800a544:	b086      	sub	sp, #24
 800a546:	af02      	add	r7, sp, #8
 800a548:	60ba      	str	r2, [r7, #8]
 800a54a:	461a      	mov	r2, r3
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]
 800a550:	460b      	mov	r3, r1
 800a552:	81bb      	strh	r3, [r7, #12]
 800a554:	4613      	mov	r3, r2
 800a556:	80fb      	strh	r3, [r7, #6]
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
 800a558:	89b9      	ldrh	r1, [r7, #12]
 800a55a:	7bf8      	ldrb	r0, [r7, #15]
 800a55c:	88fb      	ldrh	r3, [r7, #6]
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2200      	movs	r2, #0
 800a564:	f7ff ffbc 	bl	800a4e0 <sensirion_i2c_delayed_read_cmd>
 800a568:	4603      	mov	r3, r0
                                          num_words);
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 800a57a:	4b18      	ldr	r3, [pc, #96]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a57c:	4a18      	ldr	r2, [pc, #96]	; (800a5e0 <sensirion_i2c_init+0x6c>)
 800a57e:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 800a580:	4b16      	ldr	r3, [pc, #88]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a582:	4a18      	ldr	r2, [pc, #96]	; (800a5e4 <sensirion_i2c_init+0x70>)
 800a584:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a586:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a588:	2200      	movs	r2, #0
 800a58a:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800a58c:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a58e:	2200      	movs	r2, #0
 800a590:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a592:	4b12      	ldr	r3, [pc, #72]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a594:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a598:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a59a:	4b10      	ldr	r3, [pc, #64]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800a5a0:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
    //__HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	4b0c      	ldr	r3, [pc, #48]	; (800a5e8 <sensirion_i2c_init+0x74>)
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	4a0b      	ldr	r2, [pc, #44]	; (800a5e8 <sensirion_i2c_init+0x74>)
 800a5bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5c0:	6413      	str	r3, [r2, #64]	; 0x40
 800a5c2:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <sensirion_i2c_init+0x74>)
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5ca:	607b      	str	r3, [r7, #4]
 800a5cc:	687b      	ldr	r3, [r7, #4]
    HAL_I2C_Init(&hi2c1);
 800a5ce:	4803      	ldr	r0, [pc, #12]	; (800a5dc <sensirion_i2c_init+0x68>)
 800a5d0:	f7f6 fcde 	bl	8000f90 <HAL_I2C_Init>
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	200040a0 	.word	0x200040a0
 800a5e0:	40005400 	.word	0x40005400
 800a5e4:	000186a0 	.word	0x000186a0
 800a5e8:	40023800 	.word	0x40023800

0800a5ec <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t *data, uint16_t count) {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af02      	add	r7, sp, #8
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	6039      	str	r1, [r7, #0]
 800a5f6:	71fb      	strb	r3, [r7, #7]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 800a5fc:	79fb      	ldrb	r3, [r7, #7]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	b299      	uxth	r1, r3
 800a604:	88ba      	ldrh	r2, [r7, #4]
 800a606:	2364      	movs	r3, #100	; 0x64
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	4613      	mov	r3, r2
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	4804      	ldr	r0, [pc, #16]	; (800a620 <sensirion_i2c_read+0x34>)
 800a610:	f7f6 fee4 	bl	80013dc <HAL_I2C_Master_Receive>
 800a614:	4603      	mov	r3, r0
 800a616:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	200040a0 	.word	0x200040a0

0800a624 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t *data,
                           uint16_t count) {
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af02      	add	r7, sp, #8
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
 800a630:	4613      	mov	r3, r2
 800a632:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	b29b      	uxth	r3, r3
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	b299      	uxth	r1, r3
 800a63c:	88ba      	ldrh	r2, [r7, #4]
 800a63e:	2364      	movs	r3, #100	; 0x64
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	4613      	mov	r3, r2
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	4804      	ldr	r0, [pc, #16]	; (800a658 <sensirion_i2c_write+0x34>)
 800a648:	f7f6 fdca 	bl	80011e0 <HAL_I2C_Master_Transmit>
 800a64c:	4603      	mov	r3, r0
 800a64e:	b25b      	sxtb	r3, r3
                                           (uint8_t *)data, count, 100);
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	200040a0 	.word	0x200040a0

0800a65c <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a12      	ldr	r2, [pc, #72]	; (800a6b0 <sensirion_sleep_usec+0x54>)
 800a668:	fba2 2303 	umull	r2, r3, r2, r3
 800a66c:	099b      	lsrs	r3, r3, #6
 800a66e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	4b0f      	ldr	r3, [pc, #60]	; (800a6b0 <sensirion_sleep_usec+0x54>)
 800a674:	fba3 1302 	umull	r1, r3, r3, r2
 800a678:	099b      	lsrs	r3, r3, #6
 800a67a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a67e:	fb01 f303 	mul.w	r3, r1, r3
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <sensirion_sleep_usec+0x32>
        msec++;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3301      	adds	r3, #1
 800a68c:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 800a68e:	f7f6 f9c7 	bl	8000a20 <HAL_GetHalVersion>
 800a692:	4602      	mov	r2, r0
 800a694:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <sensirion_sleep_usec+0x58>)
 800a696:	429a      	cmp	r2, r3
 800a698:	d802      	bhi.n	800a6a0 <sensirion_sleep_usec+0x44>
        msec++;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f7f6 f99b 	bl	80009dc <HAL_Delay>
}
 800a6a6:	bf00      	nop
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	10624dd3 	.word	0x10624dd3
 800a6b4:	010100ff 	.word	0x010100ff

0800a6b8 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 800a6bc:	2358      	movs	r3, #88	; 0x58
 800a6be:	f242 0108 	movw	r1, #8200	; 0x2008
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fece 	bl	800a464 <sensirion_i2c_write_cmd>
 800a6c8:	4603      	mov	r3, r0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm) {
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 800a6d8:	2058      	movs	r0, #88	; 0x58
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	2202      	movs	r2, #2
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f7ff fe81 	bl	800a3e8 <sensirion_i2c_read_words>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 800a6ea:	897a      	ldrh	r2, [r7, #10]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 800a6f0:	893a      	ldrh	r2, [r7, #8]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	801a      	strh	r2, [r3, #0]

    return ret;
 800a6f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t *tvoc_ppb,
                                        uint16_t *co2_eq_ppm) {
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 800a70c:	f7ff ffd4 	bl	800a6b8 <sgp30_measure_iaq>
 800a710:	4603      	mov	r3, r0
 800a712:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 800a714:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 800a71c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a720:	e008      	b.n	800a734 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 800a722:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800a726:	f7ff ff99 	bl	800a65c <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ffce 	bl	800a6ce <sgp30_read_iaq>
 800a732:	4603      	mov	r3, r0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <sgp30_set_absolute_humidity>:
    sensirion_sleep_usec(SGP30_CMD_SET_TVOC_BASELINE_DURATION_US);

    return ret;
}

int16_t sgp30_set_absolute_humidity(uint32_t absolute_humidity) {
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t ah_scaled;

    if (absolute_humidity > 256000)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
 800a74a:	d902      	bls.n	800a752 <sgp30_set_absolute_humidity+0x16>
        return STATUS_FAIL;
 800a74c:	f04f 33ff 	mov.w	r3, #4294967295
 800a750:	e017      	b.n	800a782 <sgp30_set_absolute_humidity+0x46>

    /* ah_scaled = (absolute_humidity / 1000) * 256 */
    ah_scaled = (uint16_t)((absolute_humidity * 16777) >> 16);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f244 1289 	movw	r2, #16777	; 0x4189
 800a758:	fb02 f303 	mul.w	r3, r2, r3
 800a75c:	0c1b      	lsrs	r3, r3, #16
 800a75e:	b29b      	uxth	r3, r3
 800a760:	81bb      	strh	r3, [r7, #12]

    ret = sensirion_i2c_write_cmd_with_args(
 800a762:	2058      	movs	r0, #88	; 0x58
 800a764:	f107 020c 	add.w	r2, r7, #12
 800a768:	2301      	movs	r3, #1
 800a76a:	f242 0161 	movw	r1, #8289	; 0x2061
 800a76e:	f7ff fe95 	bl	800a49c <sensirion_i2c_write_cmd_with_args>
 800a772:	4603      	mov	r3, r0
 800a774:	81fb      	strh	r3, [r7, #14]
        SGP30_I2C_ADDRESS, SGP30_CMD_SET_ABSOLUTE_HUMIDITY, &ah_scaled,
        SENSIRION_NUM_WORDS(ah_scaled));

    sensirion_sleep_usec(SGP30_CMD_SET_ABSOLUTE_HUMIDITY_DURATION_US);
 800a776:	f242 7010 	movw	r0, #10000	; 0x2710
 800a77a:	f7ff ff6f 	bl	800a65c <sensirion_sleep_usec>

    return ret;
 800a77e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 800a790:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 800a792:	f242 0103 	movw	r1, #8195	; 0x2003
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff fe64 	bl	800a464 <sensirion_i2c_write_cmd>
 800a79c:	4603      	mov	r3, r0
 800a79e:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 800a7a0:	f242 7010 	movw	r0, #10000	; 0x2710
 800a7a4:	f7ff ff5a 	bl	800a65c <sensirion_sleep_usec>
    return ret;
 800a7a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <shtc1_measure_blocking_read>:

int16_t shtc1_wake_up(void) {
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, SHTC3_CMD_WAKEUP);
}

int16_t shtc1_measure_blocking_read(int32_t *temperature, int32_t *humidity) {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = shtc1_measure();
 800a7be:	f000 f817 	bl	800a7f0 <shtc1_measure>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	81fb      	strh	r3, [r7, #14]
    if (ret)
 800a7c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <shtc1_measure_blocking_read+0x20>
        return ret;
 800a7ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a7d2:	e008      	b.n	800a7e6 <shtc1_measure_blocking_read+0x32>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
    sensirion_sleep_usec(SHTC1_MEASUREMENT_DURATION_USEC);
 800a7d4:	f44f 5061 	mov.w	r0, #14400	; 0x3840
 800a7d8:	f7ff ff40 	bl	800a65c <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
    return shtc1_read(temperature, humidity);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f814 	bl	800a80c <shtc1_read>
 800a7e4:	4603      	mov	r3, r0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
	...

0800a7f0 <shtc1_measure>:

int16_t shtc1_measure(void) {
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, shtc1_cmd_measure);
 800a7f4:	2270      	movs	r2, #112	; 0x70
 800a7f6:	4b04      	ldr	r3, [pc, #16]	; (800a808 <shtc1_measure+0x18>)
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	f7ff fe31 	bl	800a464 <sensirion_i2c_write_cmd>
 800a802:	4603      	mov	r3, r0
}
 800a804:	4618      	mov	r0, r3
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20000018 	.word	0x20000018

0800a80c <shtc1_read>:

int16_t shtc1_read(int32_t *temperature, int32_t *humidity) {
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHTC1_ADDRESS, words,
 800a816:	2070      	movs	r0, #112	; 0x70
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	2202      	movs	r2, #2
 800a81e:	4619      	mov	r1, r3
 800a820:	f7ff fde2 	bl	800a3e8 <sensirion_i2c_read_words>
 800a824:	4603      	mov	r3, r0
 800a826:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = 100 * S_RH / 2^16
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 800a828:	893b      	ldrh	r3, [r7, #8]
 800a82a:	461a      	mov	r2, r3
 800a82c:	f245 5373 	movw	r3, #21875	; 0x5573
 800a830:	fb03 f302 	mul.w	r3, r3, r2
 800a834:	135b      	asrs	r3, r3, #13
 800a836:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 800a83a:	3bc8      	subs	r3, #200	; 0xc8
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	6013      	str	r3, [r2, #0]
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
 800a840:	897b      	ldrh	r3, [r7, #10]
 800a842:	461a      	mov	r2, r3
 800a844:	f243 03d4 	movw	r3, #12500	; 0x30d4
 800a848:	fb03 f302 	mul.w	r3, r3, r2
 800a84c:	135a      	asrs	r2, r3, #13
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	601a      	str	r2, [r3, #0]

    return ret;
 800a852:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <sps30_start_measurement>:
    }

    return 0;
}

int16_t sps30_start_measurement() {
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
    const uint16_t arg = SPS_CMD_START_MEASUREMENT_ARG;
 800a864:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a868:	80bb      	strh	r3, [r7, #4]

    int16_t ret = sensirion_i2c_write_cmd_with_args(
 800a86a:	1d3a      	adds	r2, r7, #4
 800a86c:	2301      	movs	r3, #1
 800a86e:	2110      	movs	r1, #16
 800a870:	2069      	movs	r0, #105	; 0x69
 800a872:	f7ff fe13 	bl	800a49c <sensirion_i2c_write_cmd_with_args>
 800a876:	4603      	mov	r3, r0
 800a878:	80fb      	strh	r3, [r7, #6]
        SPS30_I2C_ADDRESS, SPS_CMD_START_MEASUREMENT, &arg,
        SENSIRION_NUM_WORDS(arg));

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
 800a87a:	f242 7010 	movw	r0, #10000	; 0x2710
 800a87e:	f7ff feed 	bl	800a65c <sensirion_sleep_usec>

    return ret;
 800a882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <sps30_read_measurement>:
int16_t sps30_read_data_ready(uint16_t *data_ready) {
    return sensirion_i2c_read_cmd(SPS30_I2C_ADDRESS, SPS_CMD_GET_DATA_READY,
                                  data_ready, SENSIRION_NUM_WORDS(*data_ready));
}

int16_t sps30_read_measurement(struct sps30_measurement *measurement) {
 800a88e:	b580      	push	{r7, lr}
 800a890:	b090      	sub	sp, #64	; 0x40
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
        uint16_t u16_value[2];
        uint32_t u32_value;
        float32_t f32_value;
    } val, data[10];

    ret = sensirion_i2c_read_cmd(SPS30_I2C_ADDRESS, SPS_CMD_READ_MEASUREMENT,
 800a896:	f107 0208 	add.w	r2, r7, #8
 800a89a:	2314      	movs	r3, #20
 800a89c:	f44f 7140 	mov.w	r1, #768	; 0x300
 800a8a0:	2069      	movs	r0, #105	; 0x69
 800a8a2:	f7ff fe4e 	bl	800a542 <sensirion_i2c_read_cmd>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
                                 data->u16_value, SENSIRION_NUM_WORDS(data));
    if (ret != STATUS_OK)
 800a8aa:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <sps30_read_measurement+0x2a>
        return ret;
 800a8b2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800a8b6:	e22d      	b.n	800ad14 <sps30_read_measurement+0x486>

    SENSIRION_WORDS_TO_BYTES(data->u16_value, SENSIRION_NUM_WORDS(data));
 800a8b8:	f107 0308 	add.w	r3, r7, #8
 800a8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8be:	2314      	movs	r3, #20
 800a8c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a8c6:	e019      	b.n	800a8fc <sps30_read_measurement+0x6e>
 800a8c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ce:	4413      	add	r3, r2
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	021b      	lsls	r3, r3, #8
 800a8d4:	b21a      	sxth	r2, r3
 800a8d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8dc:	440b      	add	r3, r1
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	0a1b      	lsrs	r3, r3, #8
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	b21b      	sxth	r3, r3
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	b219      	sxth	r1, r3
 800a8ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f0:	4413      	add	r3, r2
 800a8f2:	b28a      	uxth	r2, r1
 800a8f4:	801a      	strh	r2, [r3, #0]
 800a8f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a8fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a8fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a900:	429a      	cmp	r2, r3
 800a902:	d3e1      	bcc.n	800a8c8 <sps30_read_measurement+0x3a>

    idx = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800a908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a910:	4413      	add	r3, r2
 800a912:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a916:	b29b      	uxth	r3, r3
 800a918:	021a      	lsls	r2, r3, #8
 800a91a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a922:	440b      	add	r3, r1
 800a924:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	4313      	orrs	r3, r2
 800a930:	041a      	lsls	r2, r3, #16
 800a932:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a93a:	440b      	add	r3, r1
 800a93c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a940:	0c1b      	lsrs	r3, r3, #16
 800a942:	b29b      	uxth	r3, r3
 800a944:	0219      	lsls	r1, r3, #8
 800a946:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a94e:	4403      	add	r3, r0
 800a950:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a954:	0c1b      	lsrs	r3, r3, #16
 800a956:	b29b      	uxth	r3, r3
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	430b      	orrs	r3, r1
 800a95e:	b29b      	uxth	r3, r3
 800a960:	4313      	orrs	r3, r2
 800a962:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_1p0 = val.f32_value;
 800a964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	601a      	str	r2, [r3, #0]
    ++idx;
 800a96a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a96c:	3301      	adds	r3, #1
 800a96e:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800a970:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a978:	4413      	add	r3, r2
 800a97a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a97e:	b29b      	uxth	r3, r3
 800a980:	021a      	lsls	r2, r3, #8
 800a982:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a98a:	440b      	add	r3, r1
 800a98c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a990:	b29b      	uxth	r3, r3
 800a992:	0a1b      	lsrs	r3, r3, #8
 800a994:	b29b      	uxth	r3, r3
 800a996:	4313      	orrs	r3, r2
 800a998:	041a      	lsls	r2, r3, #16
 800a99a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a9a2:	440b      	add	r3, r1
 800a9a4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a9a8:	0c1b      	lsrs	r3, r3, #16
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	0219      	lsls	r1, r3, #8
 800a9ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800a9b6:	4403      	add	r3, r0
 800a9b8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a9bc:	0c1b      	lsrs	r3, r3, #16
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	0a1b      	lsrs	r3, r3, #8
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	430b      	orrs	r3, r1
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_2p5 = val.f32_value;
 800a9cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	605a      	str	r2, [r3, #4]
    ++idx;
 800a9d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800a9d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	021a      	lsls	r2, r3, #8
 800a9ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a9f2:	440b      	add	r3, r1
 800a9f4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	0a1b      	lsrs	r3, r3, #8
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	041a      	lsls	r2, r3, #16
 800aa02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aa0a:	440b      	add	r3, r1
 800aa0c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aa10:	0c1b      	lsrs	r3, r3, #16
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	0219      	lsls	r1, r3, #8
 800aa16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800aa1e:	4403      	add	r3, r0
 800aa20:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aa24:	0c1b      	lsrs	r3, r3, #16
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	0a1b      	lsrs	r3, r3, #8
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	4313      	orrs	r3, r2
 800aa32:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_4p0 = val.f32_value;
 800aa34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	609a      	str	r2, [r3, #8]
    ++idx;
 800aa3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800aa40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800aa48:	4413      	add	r3, r2
 800aa4a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	021a      	lsls	r2, r3, #8
 800aa52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aa5a:	440b      	add	r3, r1
 800aa5c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	4313      	orrs	r3, r2
 800aa68:	041a      	lsls	r2, r3, #16
 800aa6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aa72:	440b      	add	r3, r1
 800aa74:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aa78:	0c1b      	lsrs	r3, r3, #16
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	0219      	lsls	r1, r3, #8
 800aa7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800aa86:	4403      	add	r3, r0
 800aa88:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aa8c:	0c1b      	lsrs	r3, r3, #16
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	0a1b      	lsrs	r3, r3, #8
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	430b      	orrs	r3, r1
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_10p0 = val.f32_value;
 800aa9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	60da      	str	r2, [r3, #12]
    ++idx;
 800aaa2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800aaa8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800aab0:	4413      	add	r3, r2
 800aab2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	021a      	lsls	r2, r3, #8
 800aaba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aac2:	440b      	add	r3, r1
 800aac4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	0a1b      	lsrs	r3, r3, #8
 800aacc:	b29b      	uxth	r3, r3
 800aace:	4313      	orrs	r3, r2
 800aad0:	041a      	lsls	r2, r3, #16
 800aad2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800aada:	440b      	add	r3, r1
 800aadc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aae0:	0c1b      	lsrs	r3, r3, #16
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	0219      	lsls	r1, r3, #8
 800aae6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800aaee:	4403      	add	r3, r0
 800aaf0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800aaf4:	0c1b      	lsrs	r3, r3, #16
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	0a1b      	lsrs	r3, r3, #8
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	430b      	orrs	r3, r1
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	4313      	orrs	r3, r2
 800ab02:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_0p5 = val.f32_value;
 800ab04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	611a      	str	r2, [r3, #16]
    ++idx;
 800ab0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800ab10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ab18:	4413      	add	r3, r2
 800ab1a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	021a      	lsls	r2, r3, #8
 800ab22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab2a:	440b      	add	r3, r1
 800ab2c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	0a1b      	lsrs	r3, r3, #8
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	4313      	orrs	r3, r2
 800ab38:	041a      	lsls	r2, r3, #16
 800ab3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab42:	440b      	add	r3, r1
 800ab44:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ab48:	0c1b      	lsrs	r3, r3, #16
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	0219      	lsls	r1, r3, #8
 800ab4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800ab56:	4403      	add	r3, r0
 800ab58:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ab5c:	0c1b      	lsrs	r3, r3, #16
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	0a1b      	lsrs	r3, r3, #8
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	430b      	orrs	r3, r1
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_1p0 = val.f32_value;
 800ab6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	615a      	str	r2, [r3, #20]
    ++idx;
 800ab72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab74:	3301      	adds	r3, #1
 800ab76:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800ab78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ab80:	4413      	add	r3, r2
 800ab82:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	021a      	lsls	r2, r3, #8
 800ab8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ab92:	440b      	add	r3, r1
 800ab94:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	041a      	lsls	r2, r3, #16
 800aba2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800abaa:	440b      	add	r3, r1
 800abac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800abb0:	0c1b      	lsrs	r3, r3, #16
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	0219      	lsls	r1, r3, #8
 800abb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800abbe:	4403      	add	r3, r0
 800abc0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800abc4:	0c1b      	lsrs	r3, r3, #16
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	0a1b      	lsrs	r3, r3, #8
 800abca:	b29b      	uxth	r3, r3
 800abcc:	430b      	orrs	r3, r1
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4313      	orrs	r3, r2
 800abd2:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_2p5 = val.f32_value;
 800abd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	619a      	str	r2, [r3, #24]
    ++idx;
 800abda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abdc:	3301      	adds	r3, #1
 800abde:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800abe0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800abe8:	4413      	add	r3, r2
 800abea:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	021a      	lsls	r2, r3, #8
 800abf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800abfa:	440b      	add	r3, r1
 800abfc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	0a1b      	lsrs	r3, r3, #8
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	4313      	orrs	r3, r2
 800ac08:	041a      	lsls	r2, r3, #16
 800ac0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ac12:	440b      	add	r3, r1
 800ac14:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ac18:	0c1b      	lsrs	r3, r3, #16
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	0219      	lsls	r1, r3, #8
 800ac1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800ac26:	4403      	add	r3, r0
 800ac28:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ac2c:	0c1b      	lsrs	r3, r3, #16
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	0a1b      	lsrs	r3, r3, #8
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	430b      	orrs	r3, r1
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_4p0 = val.f32_value;
 800ac3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	61da      	str	r2, [r3, #28]
    ++idx;
 800ac42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac44:	3301      	adds	r3, #1
 800ac46:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800ac48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ac50:	4413      	add	r3, r2
 800ac52:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	021a      	lsls	r2, r3, #8
 800ac5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ac62:	440b      	add	r3, r1
 800ac64:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	0a1b      	lsrs	r3, r3, #8
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	041a      	lsls	r2, r3, #16
 800ac72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ac7a:	440b      	add	r3, r1
 800ac7c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ac80:	0c1b      	lsrs	r3, r3, #16
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	0219      	lsls	r1, r3, #8
 800ac86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800ac8e:	4403      	add	r3, r0
 800ac90:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ac94:	0c1b      	lsrs	r3, r3, #16
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	0a1b      	lsrs	r3, r3, #8
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	430b      	orrs	r3, r1
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	4313      	orrs	r3, r2
 800aca2:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_10p0 = val.f32_value;
 800aca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	621a      	str	r2, [r3, #32]
    ++idx;
 800acaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800acac:	3301      	adds	r3, #1
 800acae:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 800acb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800acb8:	4413      	add	r3, r2
 800acba:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	021a      	lsls	r2, r3, #8
 800acc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800acca:	440b      	add	r3, r1
 800accc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	4313      	orrs	r3, r2
 800acd8:	041a      	lsls	r2, r3, #16
 800acda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ace2:	440b      	add	r3, r1
 800ace4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800ace8:	0c1b      	lsrs	r3, r3, #16
 800acea:	b29b      	uxth	r3, r3
 800acec:	0219      	lsls	r1, r3, #8
 800acee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800acf6:	4403      	add	r3, r0
 800acf8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800acfc:	0c1b      	lsrs	r3, r3, #16
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	0a1b      	lsrs	r3, r3, #8
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	430b      	orrs	r3, r1
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->typical_particle_size = val.f32_value;
 800ad0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	625a      	str	r2, [r3, #36]	; 0x24

    return 0;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3740      	adds	r7, #64	; 0x40
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad22:	2300      	movs	r3, #0
 800ad24:	607b      	str	r3, [r7, #4]
 800ad26:	4b12      	ldr	r3, [pc, #72]	; (800ad70 <HAL_MspInit+0x54>)
 800ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2a:	4a11      	ldr	r2, [pc, #68]	; (800ad70 <HAL_MspInit+0x54>)
 800ad2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad30:	6453      	str	r3, [r2, #68]	; 0x44
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <HAL_MspInit+0x54>)
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad3a:	607b      	str	r3, [r7, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad3e:	2300      	movs	r3, #0
 800ad40:	603b      	str	r3, [r7, #0]
 800ad42:	4b0b      	ldr	r3, [pc, #44]	; (800ad70 <HAL_MspInit+0x54>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	4a0a      	ldr	r2, [pc, #40]	; (800ad70 <HAL_MspInit+0x54>)
 800ad48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4e:	4b08      	ldr	r3, [pc, #32]	; (800ad70 <HAL_MspInit+0x54>)
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad56:	603b      	str	r3, [r7, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	210f      	movs	r1, #15
 800ad5e:	f06f 0001 	mvn.w	r0, #1
 800ad62:	f7f5 ff1f 	bl	8000ba4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad66:	bf00      	nop
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	40023800 	.word	0x40023800

0800ad74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad7c:	f107 0314 	add.w	r3, r7, #20
 800ad80:	2200      	movs	r2, #0
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	605a      	str	r2, [r3, #4]
 800ad86:	609a      	str	r2, [r3, #8]
 800ad88:	60da      	str	r2, [r3, #12]
 800ad8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a21      	ldr	r2, [pc, #132]	; (800ae18 <HAL_I2C_MspInit+0xa4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d13b      	bne.n	800ae0e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad96:	2300      	movs	r3, #0
 800ad98:	613b      	str	r3, [r7, #16]
 800ad9a:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <HAL_I2C_MspInit+0xa8>)
 800ad9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9e:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <HAL_I2C_MspInit+0xa8>)
 800ada0:	f043 0302 	orr.w	r3, r3, #2
 800ada4:	6313      	str	r3, [r2, #48]	; 0x30
 800ada6:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <HAL_I2C_MspInit+0xa8>)
 800ada8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	613b      	str	r3, [r7, #16]
 800adb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800adb2:	23c0      	movs	r3, #192	; 0xc0
 800adb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800adb6:	2312      	movs	r3, #18
 800adb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800adba:	2301      	movs	r3, #1
 800adbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adbe:	2303      	movs	r3, #3
 800adc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800adc2:	2304      	movs	r3, #4
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adc6:	f107 0314 	add.w	r3, r7, #20
 800adca:	4619      	mov	r1, r3
 800adcc:	4814      	ldr	r0, [pc, #80]	; (800ae20 <HAL_I2C_MspInit+0xac>)
 800adce:	f7f5 ff43 	bl	8000c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <HAL_I2C_MspInit+0xa8>)
 800add8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adda:	4a10      	ldr	r2, [pc, #64]	; (800ae1c <HAL_I2C_MspInit+0xa8>)
 800addc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ade0:	6413      	str	r3, [r2, #64]	; 0x40
 800ade2:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <HAL_I2C_MspInit+0xa8>)
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800adee:	2200      	movs	r2, #0
 800adf0:	2105      	movs	r1, #5
 800adf2:	201f      	movs	r0, #31
 800adf4:	f7f5 fed6 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800adf8:	201f      	movs	r0, #31
 800adfa:	f7f5 feef 	bl	8000bdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800adfe:	2200      	movs	r2, #0
 800ae00:	2105      	movs	r1, #5
 800ae02:	2020      	movs	r0, #32
 800ae04:	f7f5 fece 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800ae08:	2020      	movs	r0, #32
 800ae0a:	f7f5 fee7 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ae0e:	bf00      	nop
 800ae10:	3728      	adds	r7, #40	; 0x28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	40005400 	.word	0x40005400
 800ae1c:	40023800 	.word	0x40023800
 800ae20:	40020400 	.word	0x40020400

0800ae24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08a      	sub	sp, #40	; 0x28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	2200      	movs	r2, #0
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	609a      	str	r2, [r3, #8]
 800ae38:	60da      	str	r2, [r3, #12]
 800ae3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a2c      	ldr	r2, [pc, #176]	; (800aef4 <HAL_SPI_MspInit+0xd0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d152      	bne.n	800aeec <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	4b2b      	ldr	r3, [pc, #172]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	4a2a      	ldr	r2, [pc, #168]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae54:	6413      	str	r3, [r2, #64]	; 0x40
 800ae56:	4b28      	ldr	r3, [pc, #160]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae5e:	613b      	str	r3, [r7, #16]
 800ae60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
 800ae66:	4b24      	ldr	r3, [pc, #144]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	4a23      	ldr	r2, [pc, #140]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae6c:	f043 0304 	orr.w	r3, r3, #4
 800ae70:	6313      	str	r3, [r2, #48]	; 0x30
 800ae72:	4b21      	ldr	r3, [pc, #132]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	f003 0304 	and.w	r3, r3, #4
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
 800ae82:	4b1d      	ldr	r3, [pc, #116]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae86:	4a1c      	ldr	r2, [pc, #112]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae88:	f043 0302 	orr.w	r3, r3, #2
 800ae8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae8e:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <HAL_SPI_MspInit+0xd4>)
 800ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae92:	f003 0302 	and.w	r3, r3, #2
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aea6:	2303      	movs	r3, #3
 800aea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800aeaa:	2305      	movs	r3, #5
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aeae:	f107 0314 	add.w	r3, r7, #20
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4811      	ldr	r0, [pc, #68]	; (800aefc <HAL_SPI_MspInit+0xd8>)
 800aeb6:	f7f5 fecf 	bl	8000c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800aeba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aec0:	2302      	movs	r3, #2
 800aec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aec8:	2303      	movs	r3, #3
 800aeca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800aecc:	2305      	movs	r3, #5
 800aece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aed0:	f107 0314 	add.w	r3, r7, #20
 800aed4:	4619      	mov	r1, r3
 800aed6:	480a      	ldr	r0, [pc, #40]	; (800af00 <HAL_SPI_MspInit+0xdc>)
 800aed8:	f7f5 febe 	bl	8000c58 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800aedc:	2200      	movs	r2, #0
 800aede:	2105      	movs	r1, #5
 800aee0:	2024      	movs	r0, #36	; 0x24
 800aee2:	f7f5 fe5f 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800aee6:	2024      	movs	r0, #36	; 0x24
 800aee8:	f7f5 fe78 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800aeec:	bf00      	nop
 800aeee:	3728      	adds	r7, #40	; 0x28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	40003800 	.word	0x40003800
 800aef8:	40023800 	.word	0x40023800
 800aefc:	40020800 	.word	0x40020800
 800af00:	40020400 	.word	0x40020400

0800af04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a18      	ldr	r2, [pc, #96]	; (800af74 <HAL_TIM_PWM_MspInit+0x70>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d10e      	bne.n	800af34 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	4b17      	ldr	r3, [pc, #92]	; (800af78 <HAL_TIM_PWM_MspInit+0x74>)
 800af1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1e:	4a16      	ldr	r2, [pc, #88]	; (800af78 <HAL_TIM_PWM_MspInit+0x74>)
 800af20:	f043 0301 	orr.w	r3, r3, #1
 800af24:	6453      	str	r3, [r2, #68]	; 0x44
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <HAL_TIM_PWM_MspInit+0x74>)
 800af28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800af32:	e01a      	b.n	800af6a <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM3)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a10      	ldr	r2, [pc, #64]	; (800af7c <HAL_TIM_PWM_MspInit+0x78>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d115      	bne.n	800af6a <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800af3e:	2300      	movs	r3, #0
 800af40:	60bb      	str	r3, [r7, #8]
 800af42:	4b0d      	ldr	r3, [pc, #52]	; (800af78 <HAL_TIM_PWM_MspInit+0x74>)
 800af44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af46:	4a0c      	ldr	r2, [pc, #48]	; (800af78 <HAL_TIM_PWM_MspInit+0x74>)
 800af48:	f043 0302 	orr.w	r3, r3, #2
 800af4c:	6413      	str	r3, [r2, #64]	; 0x40
 800af4e:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <HAL_TIM_PWM_MspInit+0x74>)
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	60bb      	str	r3, [r7, #8]
 800af58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800af5a:	2200      	movs	r2, #0
 800af5c:	2105      	movs	r1, #5
 800af5e:	201d      	movs	r0, #29
 800af60:	f7f5 fe20 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800af64:	201d      	movs	r0, #29
 800af66:	f7f5 fe39 	bl	8000bdc <HAL_NVIC_EnableIRQ>
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	40010000 	.word	0x40010000
 800af78:	40023800 	.word	0x40023800
 800af7c:	40000400 	.word	0x40000400

0800af80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af90:	d115      	bne.n	800afbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <HAL_TIM_Base_MspInit+0x48>)
 800af98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9a:	4a0b      	ldr	r2, [pc, #44]	; (800afc8 <HAL_TIM_Base_MspInit+0x48>)
 800af9c:	f043 0301 	orr.w	r3, r3, #1
 800afa0:	6413      	str	r3, [r2, #64]	; 0x40
 800afa2:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <HAL_TIM_Base_MspInit+0x48>)
 800afa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800afae:	2200      	movs	r2, #0
 800afb0:	2105      	movs	r1, #5
 800afb2:	201c      	movs	r0, #28
 800afb4:	f7f5 fdf6 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800afb8:	201c      	movs	r0, #28
 800afba:	f7f5 fe0f 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800afbe:	bf00      	nop
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	40023800 	.word	0x40023800

0800afcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08a      	sub	sp, #40	; 0x28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afd4:	f107 0314 	add.w	r3, r7, #20
 800afd8:	2200      	movs	r2, #0
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	605a      	str	r2, [r3, #4]
 800afde:	609a      	str	r2, [r3, #8]
 800afe0:	60da      	str	r2, [r3, #12]
 800afe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a36      	ldr	r2, [pc, #216]	; (800b0c4 <HAL_TIM_MspPostInit+0xf8>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d11f      	bne.n	800b02e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afee:	2300      	movs	r3, #0
 800aff0:	613b      	str	r3, [r7, #16]
 800aff2:	4b35      	ldr	r3, [pc, #212]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800aff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff6:	4a34      	ldr	r2, [pc, #208]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800aff8:	f043 0301 	orr.w	r3, r3, #1
 800affc:	6313      	str	r3, [r2, #48]	; 0x30
 800affe:	4b32      	ldr	r3, [pc, #200]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800b000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	613b      	str	r3, [r7, #16]
 800b008:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800b00a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b00e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b010:	2302      	movs	r3, #2
 800b012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b014:	2300      	movs	r3, #0
 800b016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b018:	2300      	movs	r3, #0
 800b01a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b01c:	2301      	movs	r3, #1
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b020:	f107 0314 	add.w	r3, r7, #20
 800b024:	4619      	mov	r1, r3
 800b026:	4829      	ldr	r0, [pc, #164]	; (800b0cc <HAL_TIM_MspPostInit+0x100>)
 800b028:	f7f5 fe16 	bl	8000c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b02c:	e046      	b.n	800b0bc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b036:	d11e      	bne.n	800b076 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b038:	2300      	movs	r3, #0
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	4b22      	ldr	r3, [pc, #136]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800b03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b040:	4a21      	ldr	r2, [pc, #132]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800b042:	f043 0301 	orr.w	r3, r3, #1
 800b046:	6313      	str	r3, [r2, #48]	; 0x30
 800b048:	4b1f      	ldr	r3, [pc, #124]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800b04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800b054:	2307      	movs	r3, #7
 800b056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b058:	2302      	movs	r3, #2
 800b05a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b060:	2300      	movs	r3, #0
 800b062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b064:	2301      	movs	r3, #1
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b068:	f107 0314 	add.w	r3, r7, #20
 800b06c:	4619      	mov	r1, r3
 800b06e:	4817      	ldr	r0, [pc, #92]	; (800b0cc <HAL_TIM_MspPostInit+0x100>)
 800b070:	f7f5 fdf2 	bl	8000c58 <HAL_GPIO_Init>
}
 800b074:	e022      	b.n	800b0bc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a15      	ldr	r2, [pc, #84]	; (800b0d0 <HAL_TIM_MspPostInit+0x104>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d11d      	bne.n	800b0bc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b080:	2300      	movs	r3, #0
 800b082:	60bb      	str	r3, [r7, #8]
 800b084:	4b10      	ldr	r3, [pc, #64]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800b086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b088:	4a0f      	ldr	r2, [pc, #60]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800b08a:	f043 0301 	orr.w	r3, r3, #1
 800b08e:	6313      	str	r3, [r2, #48]	; 0x30
 800b090:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <HAL_TIM_MspPostInit+0xfc>)
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	60bb      	str	r3, [r7, #8]
 800b09a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b09c:	23c0      	movs	r3, #192	; 0xc0
 800b09e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0b0:	f107 0314 	add.w	r3, r7, #20
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	4805      	ldr	r0, [pc, #20]	; (800b0cc <HAL_TIM_MspPostInit+0x100>)
 800b0b8:	f7f5 fdce 	bl	8000c58 <HAL_GPIO_Init>
}
 800b0bc:	bf00      	nop
 800b0be:	3728      	adds	r7, #40	; 0x28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40023800 	.word	0x40023800
 800b0cc:	40020000 	.word	0x40020000
 800b0d0:	40000400 	.word	0x40000400

0800b0d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	605a      	str	r2, [r3, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a1d      	ldr	r2, [pc, #116]	; (800b168 <HAL_UART_MspInit+0x94>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d134      	bne.n	800b160 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
 800b0fa:	4b1c      	ldr	r3, [pc, #112]	; (800b16c <HAL_UART_MspInit+0x98>)
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fe:	4a1b      	ldr	r2, [pc, #108]	; (800b16c <HAL_UART_MspInit+0x98>)
 800b100:	f043 0310 	orr.w	r3, r3, #16
 800b104:	6453      	str	r3, [r2, #68]	; 0x44
 800b106:	4b19      	ldr	r3, [pc, #100]	; (800b16c <HAL_UART_MspInit+0x98>)
 800b108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10a:	f003 0310 	and.w	r3, r3, #16
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	4b15      	ldr	r3, [pc, #84]	; (800b16c <HAL_UART_MspInit+0x98>)
 800b118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11a:	4a14      	ldr	r2, [pc, #80]	; (800b16c <HAL_UART_MspInit+0x98>)
 800b11c:	f043 0301 	orr.w	r3, r3, #1
 800b120:	6313      	str	r3, [r2, #48]	; 0x30
 800b122:	4b12      	ldr	r3, [pc, #72]	; (800b16c <HAL_UART_MspInit+0x98>)
 800b124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b12e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b134:	2302      	movs	r3, #2
 800b136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b138:	2301      	movs	r3, #1
 800b13a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b13c:	2303      	movs	r3, #3
 800b13e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b140:	2307      	movs	r3, #7
 800b142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b144:	f107 0314 	add.w	r3, r7, #20
 800b148:	4619      	mov	r1, r3
 800b14a:	4809      	ldr	r0, [pc, #36]	; (800b170 <HAL_UART_MspInit+0x9c>)
 800b14c:	f7f5 fd84 	bl	8000c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b150:	2200      	movs	r2, #0
 800b152:	2105      	movs	r1, #5
 800b154:	2025      	movs	r0, #37	; 0x25
 800b156:	f7f5 fd25 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b15a:	2025      	movs	r0, #37	; 0x25
 800b15c:	f7f5 fd3e 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b160:	bf00      	nop
 800b162:	3728      	adds	r7, #40	; 0x28
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	40011000 	.word	0x40011000
 800b16c:	40023800 	.word	0x40023800
 800b170:	40020000 	.word	0x40020000

0800b174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	; 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800b184:	2200      	movs	r2, #0
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	201e      	movs	r0, #30
 800b18a:	f7f5 fd0b 	bl	8000ba4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800b18e:	201e      	movs	r0, #30
 800b190:	f7f5 fd24 	bl	8000bdc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800b194:	2300      	movs	r3, #0
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	4b1f      	ldr	r3, [pc, #124]	; (800b218 <HAL_InitTick+0xa4>)
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	4a1e      	ldr	r2, [pc, #120]	; (800b218 <HAL_InitTick+0xa4>)
 800b19e:	f043 0304 	orr.w	r3, r3, #4
 800b1a2:	6413      	str	r3, [r2, #64]	; 0x40
 800b1a4:	4b1c      	ldr	r3, [pc, #112]	; (800b218 <HAL_InitTick+0xa4>)
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b1b0:	f107 0210 	add.w	r2, r7, #16
 800b1b4:	f107 0314 	add.w	r3, r7, #20
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7f8 fe1a 	bl	8003df4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b1c0:	f7f8 fdf0 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	4a13      	ldr	r2, [pc, #76]	; (800b21c <HAL_InitTick+0xa8>)
 800b1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d2:	0c9b      	lsrs	r3, r3, #18
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800b1d8:	4b11      	ldr	r3, [pc, #68]	; (800b220 <HAL_InitTick+0xac>)
 800b1da:	4a12      	ldr	r2, [pc, #72]	; (800b224 <HAL_InitTick+0xb0>)
 800b1dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800b1de:	4b10      	ldr	r3, [pc, #64]	; (800b220 <HAL_InitTick+0xac>)
 800b1e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b1e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800b1e6:	4a0e      	ldr	r2, [pc, #56]	; (800b220 <HAL_InitTick+0xac>)
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <HAL_InitTick+0xac>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1f2:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <HAL_InitTick+0xac>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800b1f8:	4809      	ldr	r0, [pc, #36]	; (800b220 <HAL_InitTick+0xac>)
 800b1fa:	f7f9 f98f 	bl	800451c <HAL_TIM_Base_Init>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d104      	bne.n	800b20e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800b204:	4806      	ldr	r0, [pc, #24]	; (800b220 <HAL_InitTick+0xac>)
 800b206:	f7f9 f9b4 	bl	8004572 <HAL_TIM_Base_Start_IT>
 800b20a:	4603      	mov	r3, r0
 800b20c:	e000      	b.n	800b210 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
}
 800b210:	4618      	mov	r0, r3
 800b212:	3730      	adds	r7, #48	; 0x30
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	40023800 	.word	0x40023800
 800b21c:	431bde83 	.word	0x431bde83
 800b220:	20004868 	.word	0x20004868
 800b224:	40000800 	.word	0x40000800

0800b228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b228:	b480      	push	{r7}
 800b22a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b22c:	bf00      	nop
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b236:	b480      	push	{r7}
 800b238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b23a:	e7fe      	b.n	800b23a <HardFault_Handler+0x4>

0800b23c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b240:	e7fe      	b.n	800b240 <MemManage_Handler+0x4>

0800b242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b242:	b480      	push	{r7}
 800b244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b246:	e7fe      	b.n	800b246 <BusFault_Handler+0x4>

0800b248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b248:	b480      	push	{r7}
 800b24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b24c:	e7fe      	b.n	800b24c <UsageFault_Handler+0x4>

0800b24e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b24e:	b480      	push	{r7}
 800b250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b252:	bf00      	nop
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b260:	4802      	ldr	r0, [pc, #8]	; (800b26c <TIM2_IRQHandler+0x10>)
 800b262:	f7f9 fa07 	bl	8004674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b266:	bf00      	nop
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	200047c4 	.word	0x200047c4

0800b270 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b274:	4802      	ldr	r0, [pc, #8]	; (800b280 <TIM3_IRQHandler+0x10>)
 800b276:	f7f9 f9fd 	bl	8004674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b27a:	bf00      	nop
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	200041e0 	.word	0x200041e0

0800b284 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800b288:	4802      	ldr	r0, [pc, #8]	; (800b294 <TIM4_IRQHandler+0x10>)
 800b28a:	f7f9 f9f3 	bl	8004674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800b28e:	bf00      	nop
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	20004868 	.word	0x20004868

0800b298 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b29c:	4802      	ldr	r0, [pc, #8]	; (800b2a8 <I2C1_EV_IRQHandler+0x10>)
 800b29e:	f7f6 fac3 	bl	8001828 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b2a2:	bf00      	nop
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20004178 	.word	0x20004178

0800b2ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800b2b0:	4802      	ldr	r0, [pc, #8]	; (800b2bc <I2C1_ER_IRQHandler+0x10>)
 800b2b2:	f7f6 fc1f 	bl	8001af4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800b2b6:	bf00      	nop
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20004178 	.word	0x20004178

0800b2c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800b2c4:	4802      	ldr	r0, [pc, #8]	; (800b2d0 <SPI2_IRQHandler+0x10>)
 800b2c6:	f7f8 ff5f 	bl	8004188 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800b2ca:	bf00      	nop
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20004118 	.word	0x20004118

0800b2d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b2d8:	4802      	ldr	r0, [pc, #8]	; (800b2e4 <USART1_IRQHandler+0x10>)
 800b2da:	f7fa f92b 	bl	8005534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b2de:	bf00      	nop
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20004250 	.word	0x20004250

0800b2e8 <svm_compensate_rht>:
#define T_HI 70000
static const uint32_t AH_LUT_100RH[] = {1078,  2364,  4849,  9383,   17243,
                                        30264, 50983, 82785, 130048, 198277};
static const uint32_t T_STEP = (T_HI - T_LO) / (ARRAY_SIZE(AH_LUT_100RH) - 1);

static void svm_compensate_rht(int32_t *temperature, int32_t *humidity) {
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
    *temperature = ((*temperature * 8225) >> 13) - 500;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	021b      	lsls	r3, r3, #8
 800b2fa:	4413      	add	r3, r2
 800b2fc:	015b      	lsls	r3, r3, #5
 800b2fe:	4413      	add	r3, r2
 800b300:	135b      	asrs	r3, r3, #13
 800b302:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
    *humidity = (*humidity * 8397) >> 13;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f242 02cd 	movw	r2, #8397	; 0x20cd
 800b312:	fb02 f303 	mul.w	r3, r2, r3
 800b316:	135a      	asrs	r2, r3, #13
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	601a      	str	r2, [r3, #0]
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <sensirion_calc_absolute_humidity>:
/**
 * Convert relative humidity [%RH*1000] and temperature [mC] to
 * absolute humidity [mg/m^3]
 */
static uint32_t sensirion_calc_absolute_humidity(const int32_t *temperature,
                                                 const int32_t *humidity) {
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
    uint32_t t, i, rem, ret;

    if (*humidity <= 0)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	dc01      	bgt.n	800b33e <sensirion_calc_absolute_humidity+0x16>
        return 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	e04d      	b.n	800b3da <sensirion_calc_absolute_humidity+0xb2>

    if (*temperature < T_LO)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a29      	ldr	r2, [pc, #164]	; (800b3e8 <sensirion_calc_absolute_humidity+0xc0>)
 800b344:	4293      	cmp	r3, r2
 800b346:	da02      	bge.n	800b34e <sensirion_calc_absolute_humidity+0x26>
        t = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	e005      	b.n	800b35a <sensirion_calc_absolute_humidity+0x32>
    else
        t = (uint32_t)(*temperature - T_LO);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b356:	3320      	adds	r3, #32
 800b358:	617b      	str	r3, [r7, #20]

    i = t / T_STEP;
 800b35a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	fbb3 f3f2 	udiv	r3, r3, r2
 800b364:	60fb      	str	r3, [r7, #12]
    rem = t % T_STEP;
 800b366:	f242 7210 	movw	r2, #10000	; 0x2710
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b370:	fb02 f201 	mul.w	r2, r2, r1
 800b374:	1a9b      	subs	r3, r3, r2
 800b376:	60bb      	str	r3, [r7, #8]

    if (i >= ARRAY_SIZE(AH_LUT_100RH) - 1) {
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b08      	cmp	r3, #8
 800b37c:	d902      	bls.n	800b384 <sensirion_calc_absolute_humidity+0x5c>
        ret = AH_LUT_100RH[ARRAY_SIZE(AH_LUT_100RH) - 1];
 800b37e:	4b1b      	ldr	r3, [pc, #108]	; (800b3ec <sensirion_calc_absolute_humidity+0xc4>)
 800b380:	613b      	str	r3, [r7, #16]
 800b382:	e01f      	b.n	800b3c4 <sensirion_calc_absolute_humidity+0x9c>

    } else if (rem == 0) {
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d105      	bne.n	800b396 <sensirion_calc_absolute_humidity+0x6e>
        ret = AH_LUT_100RH[i];
 800b38a:	4a19      	ldr	r2, [pc, #100]	; (800b3f0 <sensirion_calc_absolute_humidity+0xc8>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b392:	613b      	str	r3, [r7, #16]
 800b394:	e016      	b.n	800b3c4 <sensirion_calc_absolute_humidity+0x9c>

    } else {
        ret = (AH_LUT_100RH[i] +
 800b396:	4a16      	ldr	r2, [pc, #88]	; (800b3f0 <sensirion_calc_absolute_humidity+0xc8>)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
               ((AH_LUT_100RH[i + 1] - AH_LUT_100RH[i]) * rem / T_STEP));
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	4913      	ldr	r1, [pc, #76]	; (800b3f0 <sensirion_calc_absolute_humidity+0xc8>)
 800b3a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3a8:	4811      	ldr	r0, [pc, #68]	; (800b3f0 <sensirion_calc_absolute_humidity+0xc8>)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b3b0:	1acb      	subs	r3, r1, r3
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	fb01 f303 	mul.w	r3, r1, r3
 800b3b8:	f242 7110 	movw	r1, #10000	; 0x2710
 800b3bc:	fbb3 f3f1 	udiv	r3, r3, r1
        ret = (AH_LUT_100RH[i] +
 800b3c0:	4413      	add	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]
    // Multiplication might overflow with a maximum of 3 digits
    // Trick: ((ret >> 3) * (uint32_t)(*humidity)) does never overflow
    // Now we only need to divide by 12500, as the tripple righ shift
    // divides by 8

    return ((ret >> 3) * (uint32_t)(*humidity)) / 12500;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	08db      	lsrs	r3, r3, #3
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	6812      	ldr	r2, [r2, #0]
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
 800b3d0:	089b      	lsrs	r3, r3, #2
 800b3d2:	4a08      	ldr	r2, [pc, #32]	; (800b3f4 <sensirion_calc_absolute_humidity+0xcc>)
 800b3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d8:	0a1b      	lsrs	r3, r3, #8
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	371c      	adds	r7, #28
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	ffffb1e0 	.word	0xffffb1e0
 800b3ec:	00030685 	.word	0x00030685
 800b3f0:	080328f0 	.word	0x080328f0
 800b3f4:	14f8b589 	.word	0x14f8b589

0800b3f8 <svm_set_humidity>:

static int16_t svm_set_humidity(const int32_t *temperature,
                                const int32_t *humidity) {
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
    uint32_t absolute_humidity;

    absolute_humidity = sensirion_calc_absolute_humidity(temperature, humidity);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7ff ff8f 	bl	800b328 <sensirion_calc_absolute_humidity>
 800b40a:	60f8      	str	r0, [r7, #12]

    if (absolute_humidity == 0)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <svm_set_humidity+0x1e>
        absolute_humidity = 1; /* avoid disabling humidity compensation */
 800b412:	2301      	movs	r3, #1
 800b414:	60fb      	str	r3, [r7, #12]

    return sgp30_set_absolute_humidity(absolute_humidity);
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f7ff f990 	bl	800a73c <sgp30_set_absolute_humidity>
 800b41c:	4603      	mov	r3, r0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <svm_measure_iaq_blocking_read>:
//const char *svm_get_driver_version() {
//    return SGP_DRV_VERSION_STR;
//}

int16_t svm_measure_iaq_blocking_read(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm,
                                      int32_t *temperature, int32_t *humidity) {
 800b426:	b580      	push	{r7, lr}
 800b428:	b086      	sub	sp, #24
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	607a      	str	r2, [r7, #4]
 800b432:	603b      	str	r3, [r7, #0]
    int16_t err;

    err = shtc1_measure_blocking_read(temperature, humidity);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7ff f9bc 	bl	800a7b4 <shtc1_measure_blocking_read>
 800b43c:	4603      	mov	r3, r0
 800b43e:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 800b440:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <svm_measure_iaq_blocking_read+0x28>
        return err;
 800b448:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b44c:	e01e      	b.n	800b48c <svm_measure_iaq_blocking_read+0x66>

    err = svm_set_humidity(temperature, humidity);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff ffd1 	bl	800b3f8 <svm_set_humidity>
 800b456:	4603      	mov	r3, r0
 800b458:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 800b45a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <svm_measure_iaq_blocking_read+0x42>
        return err;
 800b462:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b466:	e011      	b.n	800b48c <svm_measure_iaq_blocking_read+0x66>

    svm_compensate_rht(temperature, humidity);
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7ff ff3c 	bl	800b2e8 <svm_compensate_rht>

    err = sgp30_measure_iaq_blocking_read(tvoc_ppb, co2_eq_ppm);
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f7ff f945 	bl	800a702 <sgp30_measure_iaq_blocking_read>
 800b478:	4603      	mov	r3, r0
 800b47a:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 800b47c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <svm_measure_iaq_blocking_read+0x64>
        return err;
 800b484:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b488:	e000      	b.n	800b48c <svm_measure_iaq_blocking_read+0x66>

    return STATUS_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b49c:	4b11      	ldr	r3, [pc, #68]	; (800b4e4 <_sbrk+0x50>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d102      	bne.n	800b4aa <_sbrk+0x16>
		heap_end = &end;
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	; (800b4e4 <_sbrk+0x50>)
 800b4a6:	4a10      	ldr	r2, [pc, #64]	; (800b4e8 <_sbrk+0x54>)
 800b4a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b4aa:	4b0e      	ldr	r3, [pc, #56]	; (800b4e4 <_sbrk+0x50>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b4b0:	4b0c      	ldr	r3, [pc, #48]	; (800b4e4 <_sbrk+0x50>)
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	466a      	mov	r2, sp
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d907      	bls.n	800b4ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b4be:	f000 ffe3 	bl	800c488 <__errno>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	230c      	movs	r3, #12
 800b4c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4cc:	e006      	b.n	800b4dc <_sbrk+0x48>
	}

	heap_end += incr;
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <_sbrk+0x50>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	4a03      	ldr	r2, [pc, #12]	; (800b4e4 <_sbrk+0x50>)
 800b4d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b4da:	68fb      	ldr	r3, [r7, #12]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200040f4 	.word	0x200040f4
 800b4e8:	200048b0 	.word	0x200048b0

0800b4ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b4f0:	4b16      	ldr	r3, [pc, #88]	; (800b54c <SystemInit+0x60>)
 800b4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f6:	4a15      	ldr	r2, [pc, #84]	; (800b54c <SystemInit+0x60>)
 800b4f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b500:	4b13      	ldr	r3, [pc, #76]	; (800b550 <SystemInit+0x64>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a12      	ldr	r2, [pc, #72]	; (800b550 <SystemInit+0x64>)
 800b506:	f043 0301 	orr.w	r3, r3, #1
 800b50a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b50c:	4b10      	ldr	r3, [pc, #64]	; (800b550 <SystemInit+0x64>)
 800b50e:	2200      	movs	r2, #0
 800b510:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b512:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <SystemInit+0x64>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a0e      	ldr	r2, [pc, #56]	; (800b550 <SystemInit+0x64>)
 800b518:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b51c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b520:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b522:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <SystemInit+0x64>)
 800b524:	4a0b      	ldr	r2, [pc, #44]	; (800b554 <SystemInit+0x68>)
 800b526:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b528:	4b09      	ldr	r3, [pc, #36]	; (800b550 <SystemInit+0x64>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a08      	ldr	r2, [pc, #32]	; (800b550 <SystemInit+0x64>)
 800b52e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b534:	4b06      	ldr	r3, [pc, #24]	; (800b550 <SystemInit+0x64>)
 800b536:	2200      	movs	r2, #0
 800b538:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b53a:	4b04      	ldr	r3, [pc, #16]	; (800b54c <SystemInit+0x60>)
 800b53c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b540:	609a      	str	r2, [r3, #8]
#endif
}
 800b542:	bf00      	nop
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	e000ed00 	.word	0xe000ed00
 800b550:	40023800 	.word	0x40023800
 800b554:	24003010 	.word	0x24003010

0800b558 <tft_init>:
/********************************************************************************************************************************/
/********************************************************************************************************************************/
/********************************************************************************************************************************/

void tft_init(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_SET);
 800b55c:	2201      	movs	r2, #1
 800b55e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b562:	489a      	ldr	r0, [pc, #616]	; (800b7cc <tft_init+0x274>)
 800b564:	f7f5 fcfa 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800b568:	2005      	movs	r0, #5
 800b56a:	f7f5 fa37 	bl	80009dc <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_RESET);
 800b56e:	2200      	movs	r2, #0
 800b570:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b574:	4895      	ldr	r0, [pc, #596]	; (800b7cc <tft_init+0x274>)
 800b576:	f7f5 fcf1 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800b57a:	2005      	movs	r0, #5
 800b57c:	f7f5 fa2e 	bl	80009dc <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_SET);
 800b580:	2201      	movs	r2, #1
 800b582:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b586:	4891      	ldr	r0, [pc, #580]	; (800b7cc <tft_init+0x274>)
 800b588:	f7f5 fce8 	bl	8000f5c <HAL_GPIO_WritePin>

	SPI_ENABLE;
 800b58c:	2200      	movs	r2, #0
 800b58e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b592:	488e      	ldr	r0, [pc, #568]	; (800b7cc <tft_init+0x274>)
 800b594:	f7f5 fce2 	bl	8000f5c <HAL_GPIO_WritePin>
 800b598:	2001      	movs	r0, #1
 800b59a:	f7f5 fa1f 	bl	80009dc <HAL_Delay>
	
		tft_write_register(0xCB);
 800b59e:	f06f 0034 	mvn.w	r0, #52	; 0x34
 800b5a2:	f000 fcbd 	bl	800bf20 <tft_write_register>
		tft_write_data_8bit(0x39);
 800b5a6:	2039      	movs	r0, #57	; 0x39
 800b5a8:	f000 fc7c 	bl	800bea4 <tft_write_data_8bit>
		tft_write_data_8bit(0x2C);
 800b5ac:	202c      	movs	r0, #44	; 0x2c
 800b5ae:	f000 fc79 	bl	800bea4 <tft_write_data_8bit>
		tft_write_data_8bit(0x00);
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f000 fc76 	bl	800bea4 <tft_write_data_8bit>
		tft_write_data_8bit(0x34);
 800b5b8:	2034      	movs	r0, #52	; 0x34
 800b5ba:	f000 fc73 	bl	800bea4 <tft_write_data_8bit>
		tft_write_data_8bit(0x02);
 800b5be:	2002      	movs	r0, #2
 800b5c0:	f000 fc70 	bl	800bea4 <tft_write_data_8bit>

        tft_write_register(0xCF);  
 800b5c4:	f06f 0030 	mvn.w	r0, #48	; 0x30
 800b5c8:	f000 fcaa 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x00); 
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f000 fc69 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0XC1); 
 800b5d2:	20c1      	movs	r0, #193	; 0xc1
 800b5d4:	f000 fc66 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0X30); 
 800b5d8:	2030      	movs	r0, #48	; 0x30
 800b5da:	f000 fc63 	bl	800bea4 <tft_write_data_8bit>
 //1
        tft_write_register(0xE8);  
 800b5de:	f06f 0017 	mvn.w	r0, #23
 800b5e2:	f000 fc9d 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x85); 
 800b5e6:	2085      	movs	r0, #133	; 0x85
 800b5e8:	f000 fc5c 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	f000 fc59 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x78); 
 800b5f2:	2078      	movs	r0, #120	; 0x78
 800b5f4:	f000 fc56 	bl	800bea4 <tft_write_data_8bit>
 //2
        tft_write_register(0xEA);  
 800b5f8:	f06f 0015 	mvn.w	r0, #21
 800b5fc:	f000 fc90 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x00); 
 800b600:	2000      	movs	r0, #0
 800b602:	f000 fc4f 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 800b606:	2000      	movs	r0, #0
 800b608:	f000 fc4c 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0xED);  
 800b60c:	f06f 0012 	mvn.w	r0, #18
 800b610:	f000 fc86 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x64); 
 800b614:	2064      	movs	r0, #100	; 0x64
 800b616:	f000 fc45 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 800b61a:	2003      	movs	r0, #3
 800b61c:	f000 fc42 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0X12); 
 800b620:	2012      	movs	r0, #18
 800b622:	f000 fc3f 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0X81); 
 800b626:	2081      	movs	r0, #129	; 0x81
 800b628:	f000 fc3c 	bl	800bea4 <tft_write_data_8bit>

        tft_write_register(0xF7);  
 800b62c:	f06f 0008 	mvn.w	r0, #8
 800b630:	f000 fc76 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x20); 
 800b634:	2020      	movs	r0, #32
 800b636:	f000 fc35 	bl	800bea4 <tft_write_data_8bit>
  
        tft_write_register(0xC0);    
 800b63a:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 800b63e:	f000 fc6f 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x23);   
 800b642:	2023      	movs	r0, #35	; 0x23
 800b644:	f000 fc2e 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0xC1);   
 800b648:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 800b64c:	f000 fc68 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x10);   
 800b650:	2010      	movs	r0, #16
 800b652:	f000 fc27 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0xC5);    
 800b656:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 800b65a:	f000 fc61 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x3e); 
 800b65e:	203e      	movs	r0, #62	; 0x3e
 800b660:	f000 fc20 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x28); 
 800b664:	2028      	movs	r0, #40	; 0x28
 800b666:	f000 fc1d 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0xC7);    
 800b66a:	f06f 0038 	mvn.w	r0, #56	; 0x38
 800b66e:	f000 fc57 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x86);  
 800b672:	2086      	movs	r0, #134	; 0x86
 800b674:	f000 fc16 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0x36);    
 800b678:	2036      	movs	r0, #54	; 0x36
 800b67a:	f000 fc51 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x48); 
 800b67e:	2048      	movs	r0, #72	; 0x48
 800b680:	f000 fc10 	bl	800bea4 <tft_write_data_8bit>

        tft_write_register(0x3A);    
 800b684:	203a      	movs	r0, #58	; 0x3a
 800b686:	f000 fc4b 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x55); 
 800b68a:	2055      	movs	r0, #85	; 0x55
 800b68c:	f000 fc0a 	bl	800bea4 <tft_write_data_8bit>

        tft_write_register(0xB1);    
 800b690:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 800b694:	f000 fc44 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x00);  
 800b698:	2000      	movs	r0, #0
 800b69a:	f000 fc03 	bl	800bea4 <tft_write_data_8bit>
        //tft_write_data_8bit(0x18);
        //tft_write_data_8bit(0x1B);
        tft_write_data_8bit(0x13);
 800b69e:	2013      	movs	r0, #19
 800b6a0:	f000 fc00 	bl	800bea4 <tft_write_data_8bit>

        tft_write_register(0xB6);    
 800b6a4:	f06f 0049 	mvn.w	r0, #73	; 0x49
 800b6a8:	f000 fc3a 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x08); 
 800b6ac:	2008      	movs	r0, #8
 800b6ae:	f000 fbf9 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x82);
 800b6b2:	2082      	movs	r0, #130	; 0x82
 800b6b4:	f000 fbf6 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x27);  
 800b6b8:	2027      	movs	r0, #39	; 0x27
 800b6ba:	f000 fbf3 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0xF2);    
 800b6be:	f06f 000d 	mvn.w	r0, #13
 800b6c2:	f000 fc2d 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x00); 
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	f000 fbec 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0x26);    
 800b6cc:	2026      	movs	r0, #38	; 0x26
 800b6ce:	f000 fc27 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x01); 
 800b6d2:	2001      	movs	r0, #1
 800b6d4:	f000 fbe6 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0xE0);    
 800b6d8:	f06f 001f 	mvn.w	r0, #31
 800b6dc:	f000 fc20 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x0F); 
 800b6e0:	200f      	movs	r0, #15
 800b6e2:	f000 fbdf 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 800b6e6:	2031      	movs	r0, #49	; 0x31
 800b6e8:	f000 fbdc 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x2B); 
 800b6ec:	202b      	movs	r0, #43	; 0x2b
 800b6ee:	f000 fbd9 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x0C); 
 800b6f2:	200c      	movs	r0, #12
 800b6f4:	f000 fbd6 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 800b6f8:	200e      	movs	r0, #14
 800b6fa:	f000 fbd3 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x08); 
 800b6fe:	2008      	movs	r0, #8
 800b700:	f000 fbd0 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x4E); 
 800b704:	204e      	movs	r0, #78	; 0x4e
 800b706:	f000 fbcd 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0xF1); 
 800b70a:	20f1      	movs	r0, #241	; 0xf1
 800b70c:	f000 fbca 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x37); 
 800b710:	2037      	movs	r0, #55	; 0x37
 800b712:	f000 fbc7 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x07); 
 800b716:	2007      	movs	r0, #7
 800b718:	f000 fbc4 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x10); 
 800b71c:	2010      	movs	r0, #16
 800b71e:	f000 fbc1 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 800b722:	2003      	movs	r0, #3
 800b724:	f000 fbbe 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 800b728:	200e      	movs	r0, #14
 800b72a:	f000 fbbb 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x09); 
 800b72e:	2009      	movs	r0, #9
 800b730:	f000 fbb8 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 800b734:	2000      	movs	r0, #0
 800b736:	f000 fbb5 	bl	800bea4 <tft_write_data_8bit>

        tft_write_register(0XE1);     
 800b73a:	f06f 001e 	mvn.w	r0, #30
 800b73e:	f000 fbef 	bl	800bf20 <tft_write_register>
        tft_write_data_8bit(0x00); 
 800b742:	2000      	movs	r0, #0
 800b744:	f000 fbae 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 800b748:	200e      	movs	r0, #14
 800b74a:	f000 fbab 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x14); 
 800b74e:	2014      	movs	r0, #20
 800b750:	f000 fba8 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 800b754:	2003      	movs	r0, #3
 800b756:	f000 fba5 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x11); 
 800b75a:	2011      	movs	r0, #17
 800b75c:	f000 fba2 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x07); 
 800b760:	2007      	movs	r0, #7
 800b762:	f000 fb9f 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 800b766:	2031      	movs	r0, #49	; 0x31
 800b768:	f000 fb9c 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0xC1); 
 800b76c:	20c1      	movs	r0, #193	; 0xc1
 800b76e:	f000 fb99 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x48); 
 800b772:	2048      	movs	r0, #72	; 0x48
 800b774:	f000 fb96 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x08); 
 800b778:	2008      	movs	r0, #8
 800b77a:	f000 fb93 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x0F); 
 800b77e:	200f      	movs	r0, #15
 800b780:	f000 fb90 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x0C); 
 800b784:	200c      	movs	r0, #12
 800b786:	f000 fb8d 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 800b78a:	2031      	movs	r0, #49	; 0x31
 800b78c:	f000 fb8a 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x36); 
 800b790:	2036      	movs	r0, #54	; 0x36
 800b792:	f000 fb87 	bl	800bea4 <tft_write_data_8bit>
        tft_write_data_8bit(0x0F); 
 800b796:	200f      	movs	r0, #15
 800b798:	f000 fb84 	bl	800bea4 <tft_write_data_8bit>
 
        tft_write_register(0x11);    
 800b79c:	2011      	movs	r0, #17
 800b79e:	f000 fbbf 	bl	800bf20 <tft_write_register>
        HAL_Delay(120); 
 800b7a2:	2078      	movs	r0, #120	; 0x78
 800b7a4:	f7f5 f91a 	bl	80009dc <HAL_Delay>
				
        tft_write_register(0x29);    
 800b7a8:	2029      	movs	r0, #41	; 0x29
 800b7aa:	f000 fbb9 	bl	800bf20 <tft_write_register>
        tft_write_register(0x2c); 
 800b7ae:	202c      	movs	r0, #44	; 0x2c
 800b7b0:	f000 fbb6 	bl	800bf20 <tft_write_register>
				
				
				SPI_DISABLE;
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7ba:	4804      	ldr	r0, [pc, #16]	; (800b7cc <tft_init+0x274>)
 800b7bc:	f7f5 fbce 	bl	8000f5c <HAL_GPIO_WritePin>
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	f7f5 f90b 	bl	80009dc <HAL_Delay>
}
 800b7c6:	bf00      	nop
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	40020800 	.word	0x40020800

0800b7d0 <tft_puts8x16>:

void tft_puts8x16(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60ba      	str	r2, [r7, #8]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	4603      	mov	r3, r0
 800b7dc:	81fb      	strh	r3, [r7, #14]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	81bb      	strh	r3, [r7, #12]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7f0:	481d      	ldr	r0, [pc, #116]	; (800b868 <tft_puts8x16+0x98>)
 800b7f2:	f7f5 fbb3 	bl	8000f5c <HAL_GPIO_WritePin>
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	f7f5 f8f0 	bl	80009dc <HAL_Delay>
	  while(*(string+i)!='\0')
 800b7fc:	e020      	b.n	800b840 <tft_puts8x16+0x70>
    {       
        if(column>LCD_W-16){column=0;row+=16;}
 800b7fe:	89bb      	ldrh	r3, [r7, #12]
 800b800:	2be0      	cmp	r3, #224	; 0xe0
 800b802:	d904      	bls.n	800b80e <tft_puts8x16+0x3e>
 800b804:	2300      	movs	r3, #0
 800b806:	81bb      	strh	r3, [r7, #12]
 800b808:	89fb      	ldrh	r3, [r7, #14]
 800b80a:	3310      	adds	r3, #16
 800b80c:	81fb      	strh	r3, [r7, #14]
        if(row>LCD_H-16){row=column=0;}
 800b80e:	89fb      	ldrh	r3, [r7, #14]
 800b810:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800b814:	d903      	bls.n	800b81e <tft_puts8x16+0x4e>
 800b816:	2300      	movs	r3, #0
 800b818:	81bb      	strh	r3, [r7, #12]
 800b81a:	89bb      	ldrh	r3, [r7, #12]
 800b81c:	81fb      	strh	r3, [r7, #14]
        tft_putchar(column,row,*(string+i),TFT_STRING_MODE);
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	4413      	add	r3, r2
 800b824:	f993 3000 	ldrsb.w	r3, [r3]
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	79fb      	ldrb	r3, [r7, #7]
 800b82c:	89f9      	ldrh	r1, [r7, #14]
 800b82e:	89b8      	ldrh	r0, [r7, #12]
 800b830:	f000 fbdc 	bl	800bfec <tft_putchar>
        column+=8;
 800b834:	89bb      	ldrh	r3, [r7, #12]
 800b836:	3308      	adds	r3, #8
 800b838:	81bb      	strh	r3, [r7, #12]
        i++;
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	3301      	adds	r3, #1
 800b83e:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 800b840:	7dfb      	ldrb	r3, [r7, #23]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	4413      	add	r3, r2
 800b846:	f993 3000 	ldrsb.w	r3, [r3]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1d7      	bne.n	800b7fe <tft_puts8x16+0x2e>
    }  
	SPI_DISABLE;
 800b84e:	2201      	movs	r2, #1
 800b850:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b854:	4804      	ldr	r0, [pc, #16]	; (800b868 <tft_puts8x16+0x98>)
 800b856:	f7f5 fb81 	bl	8000f5c <HAL_GPIO_WritePin>
 800b85a:	2001      	movs	r0, #1
 800b85c:	f7f5 f8be 	bl	80009dc <HAL_Delay>
}
 800b860:	bf00      	nop
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	40020800 	.word	0x40020800

0800b86c <tft_puts14x24>:

void tft_puts14x24(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	60ba      	str	r2, [r7, #8]
 800b874:	461a      	mov	r2, r3
 800b876:	4603      	mov	r3, r0
 800b878:	81fb      	strh	r3, [r7, #14]
 800b87a:	460b      	mov	r3, r1
 800b87c:	81bb      	strh	r3, [r7, #12]
 800b87e:	4613      	mov	r3, r2
 800b880:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 800b882:	2300      	movs	r3, #0
 800b884:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 800b886:	2200      	movs	r2, #0
 800b888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b88c:	4815      	ldr	r0, [pc, #84]	; (800b8e4 <tft_puts14x24+0x78>)
 800b88e:	f7f5 fb65 	bl	8000f5c <HAL_GPIO_WritePin>
 800b892:	2001      	movs	r0, #1
 800b894:	f7f5 f8a2 	bl	80009dc <HAL_Delay>
	  while(*(string+i)!='\0')
 800b898:	e010      	b.n	800b8bc <tft_puts14x24+0x50>
    {       
		tft_putchar14x24(column,row,*(string+i),TFT_STRING_MODE);
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f993 3000 	ldrsb.w	r3, [r3]
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	89f9      	ldrh	r1, [r7, #14]
 800b8aa:	89b8      	ldrh	r0, [r7, #12]
 800b8ac:	f000 fcba 	bl	800c224 <tft_putchar14x24>
        column+=14;
 800b8b0:	89bb      	ldrh	r3, [r7, #12]
 800b8b2:	330e      	adds	r3, #14
 800b8b4:	81bb      	strh	r3, [r7, #12]
        i++;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f993 3000 	ldrsb.w	r3, [r3]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e7      	bne.n	800b89a <tft_puts14x24+0x2e>
    }  
	SPI_DISABLE;
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b8d0:	4804      	ldr	r0, [pc, #16]	; (800b8e4 <tft_puts14x24+0x78>)
 800b8d2:	f7f5 fb43 	bl	8000f5c <HAL_GPIO_WritePin>
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	f7f5 f880 	bl	80009dc <HAL_Delay>
}
 800b8dc:	bf00      	nop
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	40020800 	.word	0x40020800

0800b8e8 <tft_puts18x32>:


void tft_puts18x32(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60ba      	str	r2, [r7, #8]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	81fb      	strh	r3, [r7, #14]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	81bb      	strh	r3, [r7, #12]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 800b902:	2200      	movs	r2, #0
 800b904:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b908:	4815      	ldr	r0, [pc, #84]	; (800b960 <tft_puts18x32+0x78>)
 800b90a:	f7f5 fb27 	bl	8000f5c <HAL_GPIO_WritePin>
 800b90e:	2001      	movs	r0, #1
 800b910:	f7f5 f864 	bl	80009dc <HAL_Delay>
	  while(*(string+i)!='\0')
 800b914:	e010      	b.n	800b938 <tft_puts18x32+0x50>
    {       
				tft_putchar18x32(column,row,*(string+i),TFT_STRING_MODE);
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	4413      	add	r3, r2
 800b91c:	f993 3000 	ldrsb.w	r3, [r3]
 800b920:	b2da      	uxtb	r2, r3
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	89f9      	ldrh	r1, [r7, #14]
 800b926:	89b8      	ldrh	r0, [r7, #12]
 800b928:	f000 fcfc 	bl	800c324 <tft_putchar18x32>
        column+=18;
 800b92c:	89bb      	ldrh	r3, [r7, #12]
 800b92e:	3312      	adds	r3, #18
 800b930:	81bb      	strh	r3, [r7, #12]
        i++;
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	3301      	adds	r3, #1
 800b936:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4413      	add	r3, r2
 800b93e:	f993 3000 	ldrsb.w	r3, [r3]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1e7      	bne.n	800b916 <tft_puts18x32+0x2e>
    }  
	SPI_DISABLE;
 800b946:	2201      	movs	r2, #1
 800b948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b94c:	4804      	ldr	r0, [pc, #16]	; (800b960 <tft_puts18x32+0x78>)
 800b94e:	f7f5 fb05 	bl	8000f5c <HAL_GPIO_WritePin>
 800b952:	2001      	movs	r0, #1
 800b954:	f7f5 f842 	bl	80009dc <HAL_Delay>
}
 800b958:	bf00      	nop
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	40020800 	.word	0x40020800

0800b964 <tft_puts26x48>:
void tft_puts26x48(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60ba      	str	r2, [r7, #8]
 800b96c:	461a      	mov	r2, r3
 800b96e:	4603      	mov	r3, r0
 800b970:	81fb      	strh	r3, [r7, #14]
 800b972:	460b      	mov	r3, r1
 800b974:	81bb      	strh	r3, [r7, #12]
 800b976:	4613      	mov	r3, r2
 800b978:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 800b97e:	2200      	movs	r2, #0
 800b980:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b984:	4815      	ldr	r0, [pc, #84]	; (800b9dc <tft_puts26x48+0x78>)
 800b986:	f7f5 fae9 	bl	8000f5c <HAL_GPIO_WritePin>
 800b98a:	2001      	movs	r0, #1
 800b98c:	f7f5 f826 	bl	80009dc <HAL_Delay>
	  while(*(string+i)!='\0')
 800b990:	e010      	b.n	800b9b4 <tft_puts26x48+0x50>
    {       
				tft_putchar26x48(column,row,*(string+i),TFT_STRING_MODE);
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	4413      	add	r3, r2
 800b998:	f993 3000 	ldrsb.w	r3, [r3]
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	89f9      	ldrh	r1, [r7, #14]
 800b9a2:	89b8      	ldrh	r0, [r7, #12]
 800b9a4:	f000 fbb6 	bl	800c114 <tft_putchar26x48>
        column+=26;
 800b9a8:	89bb      	ldrh	r3, [r7, #12]
 800b9aa:	331a      	adds	r3, #26
 800b9ac:	81bb      	strh	r3, [r7, #12]
        i++;
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	f993 3000 	ldrsb.w	r3, [r3]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e7      	bne.n	800b992 <tft_puts26x48+0x2e>
    }  
	SPI_DISABLE;
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9c8:	4804      	ldr	r0, [pc, #16]	; (800b9dc <tft_puts26x48+0x78>)
 800b9ca:	f7f5 fac7 	bl	8000f5c <HAL_GPIO_WritePin>
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	f7f5 f804 	bl	80009dc <HAL_Delay>
}
 800b9d4:	bf00      	nop
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	40020800 	.word	0x40020800

0800b9e0 <draw_arc>:
		tft_draw_point(column+a,row+b);
	}
	SPI_DISABLE;
}

void draw_arc(uint16_t row,uint16_t column,uint8_t radian){
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	80fb      	strh	r3, [r7, #6]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	80bb      	strh	r3, [r7, #4]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=radian;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	613b      	str	r3, [r7, #16]
	di=3-(radian<<1);
 800b9fa:	78fb      	ldrb	r3, [r7, #3]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	f1c3 0303 	rsb	r3, r3, #3
 800ba02:	60fb      	str	r3, [r7, #12]
	SPI_ENABLE;
 800ba04:	2200      	movs	r2, #0
 800ba06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba0a:	4826      	ldr	r0, [pc, #152]	; (800baa4 <draw_arc+0xc4>)
 800ba0c:	f7f5 faa6 	bl	8000f5c <HAL_GPIO_WritePin>
 800ba10:	2001      	movs	r0, #1
 800ba12:	f7f4 ffe3 	bl	80009dc <HAL_Delay>
	while(a<=b)
 800ba16:	e034      	b.n	800ba82 <draw_arc+0xa2>
	{
		tft_draw_point(column-b,row-a);
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	88ba      	ldrh	r2, [r7, #4]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	b298      	uxth	r0, r3
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	88fa      	ldrh	r2, [r7, #6]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	f000 fac3 	bl	800bfb8 <tft_draw_point>
		tft_draw_point(column-b,row+a);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	88ba      	ldrh	r2, [r7, #4]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	b298      	uxth	r0, r3
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	88fb      	ldrh	r3, [r7, #6]
 800ba42:	4413      	add	r3, r2
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	4619      	mov	r1, r3
 800ba48:	f000 fab6 	bl	800bfb8 <tft_draw_point>

		HAL_Delay(3);
 800ba4c:	2003      	movs	r0, #3
 800ba4e:	f7f4 ffc5 	bl	80009dc <HAL_Delay>
		a++;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	3301      	adds	r3, #1
 800ba56:	617b      	str	r3, [r7, #20]

		if(di<0)di +=4*a+6;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da06      	bge.n	800ba6c <draw_arc+0x8c>
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	3306      	adds	r3, #6
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	4413      	add	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	e00a      	b.n	800ba82 <draw_arc+0xa2>
		else
		{
			di+=10+4*(a-b);
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	330a      	adds	r3, #10
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]
			b--;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	613b      	str	r3, [r7, #16]
	while(a<=b)
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	ddc6      	ble.n	800ba18 <draw_arc+0x38>
		}
		//tft_draw_point(column+a,row+b);
	}
	SPI_DISABLE;
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba90:	4804      	ldr	r0, [pc, #16]	; (800baa4 <draw_arc+0xc4>)
 800ba92:	f7f5 fa63 	bl	8000f5c <HAL_GPIO_WritePin>
 800ba96:	2001      	movs	r0, #1
 800ba98:	f7f4 ffa0 	bl	80009dc <HAL_Delay>
}
 800ba9c:	bf00      	nop
 800ba9e:	3718      	adds	r7, #24
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	40020800 	.word	0x40020800

0800baa8 <draw_arc1>:

void draw_arc1(uint16_t row,uint16_t column,uint8_t radian){
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	80fb      	strh	r3, [r7, #6]
 800bab2:	460b      	mov	r3, r1
 800bab4:	80bb      	strh	r3, [r7, #4]
 800bab6:	4613      	mov	r3, r2
 800bab8:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=radian;
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]
 800babe:	78fb      	ldrb	r3, [r7, #3]
 800bac0:	613b      	str	r3, [r7, #16]
	di=3-(radian<<1);
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	005b      	lsls	r3, r3, #1
 800bac6:	f1c3 0303 	rsb	r3, r3, #3
 800baca:	60fb      	str	r3, [r7, #12]
	SPI_ENABLE;
 800bacc:	2200      	movs	r2, #0
 800bace:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bad2:	4826      	ldr	r0, [pc, #152]	; (800bb6c <draw_arc1+0xc4>)
 800bad4:	f7f5 fa42 	bl	8000f5c <HAL_GPIO_WritePin>
 800bad8:	2001      	movs	r0, #1
 800bada:	f7f4 ff7f 	bl	80009dc <HAL_Delay>
	while(a<=b)
 800bade:	e034      	b.n	800bb4a <draw_arc1+0xa2>
	{

		tft_draw_point(column+b,row-a);
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	88bb      	ldrh	r3, [r7, #4]
 800bae6:	4413      	add	r3, r2
 800bae8:	b298      	uxth	r0, r3
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	b29b      	uxth	r3, r3
 800baee:	88fa      	ldrh	r2, [r7, #6]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	4619      	mov	r1, r3
 800baf6:	f000 fa5f 	bl	800bfb8 <tft_draw_point>
		tft_draw_point(column+b,row+a);
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	88bb      	ldrh	r3, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	b298      	uxth	r0, r3
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	88fb      	ldrh	r3, [r7, #6]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	4619      	mov	r1, r3
 800bb10:	f000 fa52 	bl	800bfb8 <tft_draw_point>


		HAL_Delay(3);
 800bb14:	2003      	movs	r0, #3
 800bb16:	f7f4 ff61 	bl	80009dc <HAL_Delay>
		a++;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]

		if(di<0)di +=4*a+6;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	da06      	bge.n	800bb34 <draw_arc1+0x8c>
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	3306      	adds	r3, #6
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	e00a      	b.n	800bb4a <draw_arc1+0xa2>
		else
		{
			di+=10+4*(a-b);
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	330a      	adds	r3, #10
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	4413      	add	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]
			b--;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	3b01      	subs	r3, #1
 800bb48:	613b      	str	r3, [r7, #16]
	while(a<=b)
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	ddc6      	ble.n	800bae0 <draw_arc1+0x38>
		}

	}
	SPI_DISABLE;
 800bb52:	2201      	movs	r2, #1
 800bb54:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb58:	4804      	ldr	r0, [pc, #16]	; (800bb6c <draw_arc1+0xc4>)
 800bb5a:	f7f5 f9ff 	bl	8000f5c <HAL_GPIO_WritePin>
 800bb5e:	2001      	movs	r0, #1
 800bb60:	f7f4 ff3c 	bl	80009dc <HAL_Delay>
}
 800bb64:	bf00      	nop
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	40020800 	.word	0x40020800

0800bb70 <draw_arc2>:

void draw_arc2(uint16_t row,uint16_t column,uint8_t radian){
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	80fb      	strh	r3, [r7, #6]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	80bb      	strh	r3, [r7, #4]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	70fb      	strb	r3, [r7, #3]
	int a,b;
			int di;
			a=0;b=radian;
 800bb82:	2300      	movs	r3, #0
 800bb84:	617b      	str	r3, [r7, #20]
 800bb86:	78fb      	ldrb	r3, [r7, #3]
 800bb88:	613b      	str	r3, [r7, #16]
			di=3-(radian<<1);
 800bb8a:	78fb      	ldrb	r3, [r7, #3]
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	f1c3 0303 	rsb	r3, r3, #3
 800bb92:	60fb      	str	r3, [r7, #12]
			SPI_ENABLE;
 800bb94:	2200      	movs	r2, #0
 800bb96:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb9a:	4826      	ldr	r0, [pc, #152]	; (800bc34 <draw_arc2+0xc4>)
 800bb9c:	f7f5 f9de 	bl	8000f5c <HAL_GPIO_WritePin>
 800bba0:	2001      	movs	r0, #1
 800bba2:	f7f4 ff1b 	bl	80009dc <HAL_Delay>
			while(a<=b)
 800bba6:	e034      	b.n	800bc12 <draw_arc2+0xa2>
			{

				tft_draw_point(column-a,row+b);
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	88ba      	ldrh	r2, [r7, #4]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	b298      	uxth	r0, r3
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	88fb      	ldrh	r3, [r7, #6]
 800bbb8:	4413      	add	r3, r2
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	f000 f9fb 	bl	800bfb8 <tft_draw_point>
				tft_draw_point(column+a,row+b);
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	88bb      	ldrh	r3, [r7, #4]
 800bbc8:	4413      	add	r3, r2
 800bbca:	b298      	uxth	r0, r3
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	88fb      	ldrh	r3, [r7, #6]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	f000 f9ee 	bl	800bfb8 <tft_draw_point>

				HAL_Delay(3);
 800bbdc:	2003      	movs	r0, #3
 800bbde:	f7f4 fefd 	bl	80009dc <HAL_Delay>
				a++;
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	617b      	str	r3, [r7, #20]

				if(di<0)di +=4*a+6;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	da06      	bge.n	800bbfc <draw_arc2+0x8c>
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	3306      	adds	r3, #6
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]
 800bbfa:	e00a      	b.n	800bc12 <draw_arc2+0xa2>
				else
				{
					di+=10+4*(a-b);
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	330a      	adds	r3, #10
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	60fb      	str	r3, [r7, #12]
					b--;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	613b      	str	r3, [r7, #16]
			while(a<=b)
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	ddc6      	ble.n	800bba8 <draw_arc2+0x38>
				}
			}
			SPI_DISABLE;
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc20:	4804      	ldr	r0, [pc, #16]	; (800bc34 <draw_arc2+0xc4>)
 800bc22:	f7f5 f99b 	bl	8000f5c <HAL_GPIO_WritePin>
 800bc26:	2001      	movs	r0, #1
 800bc28:	f7f4 fed8 	bl	80009dc <HAL_Delay>
}
 800bc2c:	bf00      	nop
 800bc2e:	3718      	adds	r7, #24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	40020800 	.word	0x40020800

0800bc38 <draw_arc3>:
void draw_arc3(uint16_t row,uint16_t column,uint8_t radian){
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	80fb      	strh	r3, [r7, #6]
 800bc42:	460b      	mov	r3, r1
 800bc44:	80bb      	strh	r3, [r7, #4]
 800bc46:	4613      	mov	r3, r2
 800bc48:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=radian;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]
 800bc4e:	78fb      	ldrb	r3, [r7, #3]
 800bc50:	613b      	str	r3, [r7, #16]
	di=3-(radian<<1);
 800bc52:	78fb      	ldrb	r3, [r7, #3]
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	f1c3 0303 	rsb	r3, r3, #3
 800bc5a:	60fb      	str	r3, [r7, #12]
	SPI_ENABLE;
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc62:	4826      	ldr	r0, [pc, #152]	; (800bcfc <draw_arc3+0xc4>)
 800bc64:	f7f5 f97a 	bl	8000f5c <HAL_GPIO_WritePin>
 800bc68:	2001      	movs	r0, #1
 800bc6a:	f7f4 feb7 	bl	80009dc <HAL_Delay>
	while(a<=b)
 800bc6e:	e034      	b.n	800bcda <draw_arc3+0xa2>
	{
		tft_draw_point(column-a,row-b);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	88ba      	ldrh	r2, [r7, #4]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	b298      	uxth	r0, r3
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	88fa      	ldrh	r2, [r7, #6]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	4619      	mov	r1, r3
 800bc86:	f000 f997 	bl	800bfb8 <tft_draw_point>
		tft_draw_point(column+a,row-b);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	88bb      	ldrh	r3, [r7, #4]
 800bc90:	4413      	add	r3, r2
 800bc92:	b298      	uxth	r0, r3
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	88fa      	ldrh	r2, [r7, #6]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4619      	mov	r1, r3
 800bca0:	f000 f98a 	bl	800bfb8 <tft_draw_point>

		HAL_Delay(3);
 800bca4:	2003      	movs	r0, #3
 800bca6:	f7f4 fe99 	bl	80009dc <HAL_Delay>
		a++;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	3301      	adds	r3, #1
 800bcae:	617b      	str	r3, [r7, #20]

		if(di<0)di +=4*a+6;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	da06      	bge.n	800bcc4 <draw_arc3+0x8c>
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	3306      	adds	r3, #6
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	e00a      	b.n	800bcda <draw_arc3+0xa2>
		else
		{
			di+=10+4*(a-b);
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	330a      	adds	r3, #10
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
			b--;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	613b      	str	r3, [r7, #16]
	while(a<=b)
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	ddc6      	ble.n	800bc70 <draw_arc3+0x38>
		}
	}
	SPI_DISABLE;
 800bce2:	2201      	movs	r2, #1
 800bce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bce8:	4804      	ldr	r0, [pc, #16]	; (800bcfc <draw_arc3+0xc4>)
 800bcea:	f7f5 f937 	bl	8000f5c <HAL_GPIO_WritePin>
 800bcee:	2001      	movs	r0, #1
 800bcf0:	f7f4 fe74 	bl	80009dc <HAL_Delay>
}
 800bcf4:	bf00      	nop
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	40020800 	.word	0x40020800

0800bd00 <tft_fill>:
void tft_fill(uint16_t row1,uint16_t column1,uint16_t row2,uint16_t column2,uint16_t color)
{
 800bd00:	b590      	push	{r4, r7, lr}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	4604      	mov	r4, r0
 800bd08:	4608      	mov	r0, r1
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	4623      	mov	r3, r4
 800bd10:	80fb      	strh	r3, [r7, #6]
 800bd12:	4603      	mov	r3, r0
 800bd14:	80bb      	strh	r3, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	807b      	strh	r3, [r7, #2]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j; 
	SPI_ENABLE;
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd24:	4818      	ldr	r0, [pc, #96]	; (800bd88 <tft_fill+0x88>)
 800bd26:	f7f5 f919 	bl	8000f5c <HAL_GPIO_WritePin>
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	f7f4 fe56 	bl	80009dc <HAL_Delay>
	tft_add_set(column1,row1,column2,row2);   
 800bd30:	887b      	ldrh	r3, [r7, #2]
 800bd32:	883a      	ldrh	r2, [r7, #0]
 800bd34:	88f9      	ldrh	r1, [r7, #6]
 800bd36:	88b8      	ldrh	r0, [r7, #4]
 800bd38:	f000 f90e 	bl	800bf58 <tft_add_set>
	for(i=row1;i<=row2;i++)
 800bd3c:	88fb      	ldrh	r3, [r7, #6]
 800bd3e:	81fb      	strh	r3, [r7, #14]
 800bd40:	e010      	b.n	800bd64 <tft_fill+0x64>
	{													   	 	
		for(j=column1;j<=column2;j++)
 800bd42:	88bb      	ldrh	r3, [r7, #4]
 800bd44:	81bb      	strh	r3, [r7, #12]
 800bd46:	e006      	b.n	800bd56 <tft_fill+0x56>
		{
			tft_write_data(color);
 800bd48:	8c3b      	ldrh	r3, [r7, #32]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 f8c6 	bl	800bedc <tft_write_data>
		for(j=column1;j<=column2;j++)
 800bd50:	89bb      	ldrh	r3, [r7, #12]
 800bd52:	3301      	adds	r3, #1
 800bd54:	81bb      	strh	r3, [r7, #12]
 800bd56:	89ba      	ldrh	r2, [r7, #12]
 800bd58:	883b      	ldrh	r3, [r7, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d9f4      	bls.n	800bd48 <tft_fill+0x48>
	for(i=row1;i<=row2;i++)
 800bd5e:	89fb      	ldrh	r3, [r7, #14]
 800bd60:	3301      	adds	r3, #1
 800bd62:	81fb      	strh	r3, [r7, #14]
 800bd64:	89fa      	ldrh	r2, [r7, #14]
 800bd66:	887b      	ldrh	r3, [r7, #2]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d9ea      	bls.n	800bd42 <tft_fill+0x42>
		}
	} 	
	SPI_DISABLE;
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd72:	4805      	ldr	r0, [pc, #20]	; (800bd88 <tft_fill+0x88>)
 800bd74:	f7f5 f8f2 	bl	8000f5c <HAL_GPIO_WritePin>
 800bd78:	2001      	movs	r0, #1
 800bd7a:	f7f4 fe2f 	bl	80009dc <HAL_Delay>
}
 800bd7e:	bf00      	nop
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd90      	pop	{r4, r7, pc}
 800bd86:	bf00      	nop
 800bd88:	40020800 	.word	0x40020800

0800bd8c <tft_fill2>:

void tft_fill2(uint16_t row1,uint16_t column1,uint16_t row2,uint16_t column2,uint16_t color)
{
 800bd8c:	b590      	push	{r4, r7, lr}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	4611      	mov	r1, r2
 800bd98:	461a      	mov	r2, r3
 800bd9a:	4623      	mov	r3, r4
 800bd9c:	80fb      	strh	r3, [r7, #6]
 800bd9e:	4603      	mov	r3, r0
 800bda0:	80bb      	strh	r3, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	807b      	strh	r3, [r7, #2]
 800bda6:	4613      	mov	r3, r2
 800bda8:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	SPI_ENABLE;
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bdb0:	4818      	ldr	r0, [pc, #96]	; (800be14 <tft_fill2+0x88>)
 800bdb2:	f7f5 f8d3 	bl	8000f5c <HAL_GPIO_WritePin>
 800bdb6:	2001      	movs	r0, #1
 800bdb8:	f7f4 fe10 	bl	80009dc <HAL_Delay>
	tft_add_set(column1,row1,column2,row2);
 800bdbc:	887b      	ldrh	r3, [r7, #2]
 800bdbe:	883a      	ldrh	r2, [r7, #0]
 800bdc0:	88f9      	ldrh	r1, [r7, #6]
 800bdc2:	88b8      	ldrh	r0, [r7, #4]
 800bdc4:	f000 f8c8 	bl	800bf58 <tft_add_set>
	for(i=column2;i>=column1;i--)
 800bdc8:	883b      	ldrh	r3, [r7, #0]
 800bdca:	81fb      	strh	r3, [r7, #14]
 800bdcc:	e010      	b.n	800bdf0 <tft_fill2+0x64>
	{
		for(j=row2;j>=row1;j--)
 800bdce:	887b      	ldrh	r3, [r7, #2]
 800bdd0:	81bb      	strh	r3, [r7, #12]
 800bdd2:	e006      	b.n	800bde2 <tft_fill2+0x56>
		{
			tft_write_data(color);
 800bdd4:	8c3b      	ldrh	r3, [r7, #32]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 f880 	bl	800bedc <tft_write_data>
		for(j=row2;j>=row1;j--)
 800bddc:	89bb      	ldrh	r3, [r7, #12]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	81bb      	strh	r3, [r7, #12]
 800bde2:	89ba      	ldrh	r2, [r7, #12]
 800bde4:	88fb      	ldrh	r3, [r7, #6]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d2f4      	bcs.n	800bdd4 <tft_fill2+0x48>
	for(i=column2;i>=column1;i--)
 800bdea:	89fb      	ldrh	r3, [r7, #14]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	81fb      	strh	r3, [r7, #14]
 800bdf0:	89fa      	ldrh	r2, [r7, #14]
 800bdf2:	88bb      	ldrh	r3, [r7, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d2ea      	bcs.n	800bdce <tft_fill2+0x42>
		}
	}
	SPI_DISABLE;
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bdfe:	4805      	ldr	r0, [pc, #20]	; (800be14 <tft_fill2+0x88>)
 800be00:	f7f5 f8ac 	bl	8000f5c <HAL_GPIO_WritePin>
 800be04:	2001      	movs	r0, #1
 800be06:	f7f4 fde9 	bl	80009dc <HAL_Delay>
}
 800be0a:	bf00      	nop
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd90      	pop	{r4, r7, pc}
 800be12:	bf00      	nop
 800be14:	40020800 	.word	0x40020800

0800be18 <tft_puts_image>:

void tft_puts_image(const unsigned char* image_arr)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t temp;
	uint8_t high_byte,low_byte;
	
	SPI_ENABLE;
 800be20:	2200      	movs	r2, #0
 800be22:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be26:	481e      	ldr	r0, [pc, #120]	; (800bea0 <tft_puts_image+0x88>)
 800be28:	f7f5 f898 	bl	8000f5c <HAL_GPIO_WritePin>
 800be2c:	2001      	movs	r0, #1
 800be2e:	f7f4 fdd5 	bl	80009dc <HAL_Delay>
	tft_add_set(0,0,240-1,320-1);
 800be32:	f240 133f 	movw	r3, #319	; 0x13f
 800be36:	22ef      	movs	r2, #239	; 0xef
 800be38:	2100      	movs	r1, #0
 800be3a:	2000      	movs	r0, #0
 800be3c:	f000 f88c 	bl	800bf58 <tft_add_set>

	for(i=0;i<(240*320);i++)
 800be40:	2300      	movs	r3, #0
 800be42:	60fb      	str	r3, [r7, #12]
 800be44:	e01b      	b.n	800be7e <tft_puts_image+0x66>
	{ 
		low_byte=*(image_arr+i*2);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	4413      	add	r3, r2
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	72fb      	strb	r3, [r7, #11]
		high_byte=*(image_arr+i*2+1);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	3301      	adds	r3, #1
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	4413      	add	r3, r2
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	72bb      	strb	r3, [r7, #10]
		temp=((high_byte)<<8|(low_byte));
 800be60:	7abb      	ldrb	r3, [r7, #10]
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	b21a      	sxth	r2, r3
 800be66:	7afb      	ldrb	r3, [r7, #11]
 800be68:	b21b      	sxth	r3, r3
 800be6a:	4313      	orrs	r3, r2
 800be6c:	b21b      	sxth	r3, r3
 800be6e:	813b      	strh	r3, [r7, #8]
		tft_write_data(temp);
 800be70:	893b      	ldrh	r3, [r7, #8]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 f832 	bl	800bedc <tft_write_data>
	for(i=0;i<(240*320);i++)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3301      	adds	r3, #1
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800be84:	d3df      	bcc.n	800be46 <tft_puts_image+0x2e>
	}	
	
	SPI_DISABLE;
 800be86:	2201      	movs	r2, #1
 800be88:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be8c:	4804      	ldr	r0, [pc, #16]	; (800bea0 <tft_puts_image+0x88>)
 800be8e:	f7f5 f865 	bl	8000f5c <HAL_GPIO_WritePin>
 800be92:	2001      	movs	r0, #1
 800be94:	f7f4 fda2 	bl	80009dc <HAL_Delay>
}
 800be98:	bf00      	nop
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	40020800 	.word	0x40020800

0800bea4 <tft_write_data_8bit>:
/********************************************************************************************************************************/
/********************************************************************************************************************************/
/********************************************************************************************************************************/

void tft_write_data_8bit(uint8_t data)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	71fb      	strb	r3, [r7, #7]
	uint8_t send_data =data;
 800beae:	79fb      	ldrb	r3, [r7, #7]
 800beb0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_SET);
 800beb2:	2201      	movs	r2, #1
 800beb4:	2180      	movs	r1, #128	; 0x80
 800beb6:	4807      	ldr	r0, [pc, #28]	; (800bed4 <tft_write_data_8bit+0x30>)
 800beb8:	f7f5 f850 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,&send_data,1,500);
 800bebc:	f107 010f 	add.w	r1, r7, #15
 800bec0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bec4:	2201      	movs	r2, #1
 800bec6:	4804      	ldr	r0, [pc, #16]	; (800bed8 <tft_write_data_8bit+0x34>)
 800bec8:	f7f8 f82a 	bl	8003f20 <HAL_SPI_Transmit>
}
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	40020800 	.word	0x40020800
 800bed8:	20004118 	.word	0x20004118

0800bedc <tft_write_data>:

void tft_write_data(uint16_t data)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	80fb      	strh	r3, [r7, #6]
	uint8_t send_data[2];
	send_data[0]=data >> 8;
 800bee6:	88fb      	ldrh	r3, [r7, #6]
 800bee8:	0a1b      	lsrs	r3, r3, #8
 800beea:	b29b      	uxth	r3, r3
 800beec:	b2db      	uxtb	r3, r3
 800beee:	733b      	strb	r3, [r7, #12]
	send_data[1]=data & 0x00ff;
 800bef0:	88fb      	ldrh	r3, [r7, #6]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_SET);
 800bef6:	2201      	movs	r2, #1
 800bef8:	2180      	movs	r1, #128	; 0x80
 800befa:	4807      	ldr	r0, [pc, #28]	; (800bf18 <tft_write_data+0x3c>)
 800befc:	f7f5 f82e 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,send_data,2,500);
 800bf00:	f107 010c 	add.w	r1, r7, #12
 800bf04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bf08:	2202      	movs	r2, #2
 800bf0a:	4804      	ldr	r0, [pc, #16]	; (800bf1c <tft_write_data+0x40>)
 800bf0c:	f7f8 f808 	bl	8003f20 <HAL_SPI_Transmit>
}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	40020800 	.word	0x40020800
 800bf1c:	20004118 	.word	0x20004118

0800bf20 <tft_write_register>:

void tft_write_register(int8_t data)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
	uint8_t register_value=data;
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_RESET);
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2180      	movs	r1, #128	; 0x80
 800bf32:	4807      	ldr	r0, [pc, #28]	; (800bf50 <tft_write_register+0x30>)
 800bf34:	f7f5 f812 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,&register_value,1,500);
 800bf38:	f107 010f 	add.w	r1, r7, #15
 800bf3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bf40:	2201      	movs	r2, #1
 800bf42:	4804      	ldr	r0, [pc, #16]	; (800bf54 <tft_write_register+0x34>)
 800bf44:	f7f7 ffec 	bl	8003f20 <HAL_SPI_Transmit>
}
 800bf48:	bf00      	nop
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	40020800 	.word	0x40020800
 800bf54:	20004118 	.word	0x20004118

0800bf58 <tft_add_set>:


void tft_add_set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800bf58:	b590      	push	{r4, r7, lr}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4608      	mov	r0, r1
 800bf62:	4611      	mov	r1, r2
 800bf64:	461a      	mov	r2, r3
 800bf66:	4623      	mov	r3, r4
 800bf68:	80fb      	strh	r3, [r7, #6]
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	80bb      	strh	r3, [r7, #4]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	807b      	strh	r3, [r7, #2]
 800bf72:	4613      	mov	r3, r2
 800bf74:	803b      	strh	r3, [r7, #0]
   tft_write_register(0x2a);
 800bf76:	202a      	movs	r0, #42	; 0x2a
 800bf78:	f7ff ffd2 	bl	800bf20 <tft_write_register>
   tft_write_data(x1);
 800bf7c:	88fb      	ldrh	r3, [r7, #6]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff ffac 	bl	800bedc <tft_write_data>
   tft_write_data(x2);
 800bf84:	887b      	ldrh	r3, [r7, #2]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7ff ffa8 	bl	800bedc <tft_write_data>
  
   tft_write_register(0x2b);
 800bf8c:	202b      	movs	r0, #43	; 0x2b
 800bf8e:	f7ff ffc7 	bl	800bf20 <tft_write_register>
   tft_write_data(y1);
 800bf92:	88bb      	ldrh	r3, [r7, #4]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff ffa1 	bl	800bedc <tft_write_data>
   tft_write_data(y2);
 800bf9a:	883b      	ldrh	r3, [r7, #0]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff ff9d 	bl	800bedc <tft_write_data>

   tft_write_register(0x2C);
 800bfa2:	202c      	movs	r0, #44	; 0x2c
 800bfa4:	f7ff ffbc 	bl	800bf20 <tft_write_register>
   tft_write_register(0X3C);
 800bfa8:	203c      	movs	r0, #60	; 0x3c
 800bfaa:	f7ff ffb9 	bl	800bf20 <tft_write_register>
}
 800bfae:	bf00      	nop
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd90      	pop	{r4, r7, pc}
	...

0800bfb8 <tft_draw_point>:

void tft_draw_point(uint16_t x,uint16_t y)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	460a      	mov	r2, r1
 800bfc2:	80fb      	strh	r3, [r7, #6]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	80bb      	strh	r3, [r7, #4]
	tft_add_set(x,y,x,y);
 800bfc8:	88bb      	ldrh	r3, [r7, #4]
 800bfca:	88fa      	ldrh	r2, [r7, #6]
 800bfcc:	88b9      	ldrh	r1, [r7, #4]
 800bfce:	88f8      	ldrh	r0, [r7, #6]
 800bfd0:	f7ff ffc2 	bl	800bf58 <tft_add_set>
	tft_write_data(POINT_COLOR); 	
 800bfd4:	4b04      	ldr	r3, [pc, #16]	; (800bfe8 <tft_draw_point+0x30>)
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff ff7f 	bl	800bedc <tft_write_data>
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	200048aa 	.word	0x200048aa

0800bfec <tft_putchar>:
		tft_fill(x-1,y-1,x+1,y+1,POINT_COLOR);
}


void tft_putchar(uint16_t x,uint16_t y,uint8_t num,uint8_t mode)
{
 800bfec:	b590      	push	{r4, r7, lr}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	4604      	mov	r4, r0
 800bff4:	4608      	mov	r0, r1
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	4623      	mov	r3, r4
 800bffc:	80fb      	strh	r3, [r7, #6]
 800bffe:	4603      	mov	r3, r0
 800c000:	80bb      	strh	r3, [r7, #4]
 800c002:	460b      	mov	r3, r1
 800c004:	70fb      	strb	r3, [r7, #3]
 800c006:	4613      	mov	r3, r2
 800c008:	70bb      	strb	r3, [r7, #2]
	uint8_t temp;
  uint8_t pos,t;
	//uint16_t x0=x;
	uint16_t colortemp=POINT_COLOR;      
 800c00a:	4b3f      	ldr	r3, [pc, #252]	; (800c108 <tft_putchar+0x11c>)
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	817b      	strh	r3, [r7, #10]
  if(x>LCD_W-16||y>LCD_H-16)return;	    		   
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	2be0      	cmp	r3, #224	; 0xe0
 800c014:	d874      	bhi.n	800c100 <tft_putchar+0x114>
 800c016:	88bb      	ldrh	r3, [r7, #4]
 800c018:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800c01c:	d870      	bhi.n	800c100 <tft_putchar+0x114>
	num=num-' ';
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	3b20      	subs	r3, #32
 800c022:	70fb      	strb	r3, [r7, #3]
	
	tft_add_set(x,y,x+8-1,y+16-1);      
 800c024:	88fb      	ldrh	r3, [r7, #6]
 800c026:	3307      	adds	r3, #7
 800c028:	b29a      	uxth	r2, r3
 800c02a:	88bb      	ldrh	r3, [r7, #4]
 800c02c:	330f      	adds	r3, #15
 800c02e:	b29b      	uxth	r3, r3
 800c030:	88b9      	ldrh	r1, [r7, #4]
 800c032:	88f8      	ldrh	r0, [r7, #6]
 800c034:	f7ff ff90 	bl	800bf58 <tft_add_set>
	if(!mode) 
 800c038:	78bb      	ldrb	r3, [r7, #2]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d12e      	bne.n	800c09c <tft_putchar+0xb0>
	{
		for(pos=0;pos<16;pos++)
 800c03e:	2300      	movs	r3, #0
 800c040:	73bb      	strb	r3, [r7, #14]
 800c042:	e027      	b.n	800c094 <tft_putchar+0xa8>
		{ 
			temp=asc2_1608[(uint16_t)num*16+pos];		 
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	011a      	lsls	r2, r3, #4
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	4413      	add	r3, r2
 800c04c:	4a2f      	ldr	r2, [pc, #188]	; (800c10c <tft_putchar+0x120>)
 800c04e:	5cd3      	ldrb	r3, [r2, r3]
 800c050:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<8;t++)
 800c052:	2300      	movs	r3, #0
 800c054:	737b      	strb	r3, [r7, #13]
 800c056:	e017      	b.n	800c088 <tft_putchar+0x9c>
		  {                 
		        if(temp&0x01)POINT_COLOR=colortemp;
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <tft_putchar+0x7e>
 800c062:	4a29      	ldr	r2, [pc, #164]	; (800c108 <tft_putchar+0x11c>)
 800c064:	897b      	ldrh	r3, [r7, #10]
 800c066:	8013      	strh	r3, [r2, #0]
 800c068:	e003      	b.n	800c072 <tft_putchar+0x86>
						else POINT_COLOR=BACK_COLOR;
 800c06a:	4b29      	ldr	r3, [pc, #164]	; (800c110 <tft_putchar+0x124>)
 800c06c:	881a      	ldrh	r2, [r3, #0]
 800c06e:	4b26      	ldr	r3, [pc, #152]	; (800c108 <tft_putchar+0x11c>)
 800c070:	801a      	strh	r2, [r3, #0]
						tft_write_data(POINT_COLOR);	
 800c072:	4b25      	ldr	r3, [pc, #148]	; (800c108 <tft_putchar+0x11c>)
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff ff30 	bl	800bedc <tft_write_data>
						temp>>=1; 
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	085b      	lsrs	r3, r3, #1
 800c080:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<8;t++)
 800c082:	7b7b      	ldrb	r3, [r7, #13]
 800c084:	3301      	adds	r3, #1
 800c086:	737b      	strb	r3, [r7, #13]
 800c088:	7b7b      	ldrb	r3, [r7, #13]
 800c08a:	2b07      	cmp	r3, #7
 800c08c:	d9e4      	bls.n	800c058 <tft_putchar+0x6c>
		for(pos=0;pos<16;pos++)
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	3301      	adds	r3, #1
 800c092:	73bb      	strb	r3, [r7, #14]
 800c094:	7bbb      	ldrb	r3, [r7, #14]
 800c096:	2b0f      	cmp	r3, #15
 800c098:	d9d4      	bls.n	800c044 <tft_putchar+0x58>
 800c09a:	e02d      	b.n	800c0f8 <tft_putchar+0x10c>
		  }
		}	
	}
	else
	{
		for(pos=0;pos<16;pos++)
 800c09c:	2300      	movs	r3, #0
 800c09e:	73bb      	strb	r3, [r7, #14]
 800c0a0:	e027      	b.n	800c0f2 <tft_putchar+0x106>
		{
		    temp=asc2_1608[(uint16_t)num*16+pos];		 
 800c0a2:	78fb      	ldrb	r3, [r7, #3]
 800c0a4:	011a      	lsls	r2, r3, #4
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	4a18      	ldr	r2, [pc, #96]	; (800c10c <tft_putchar+0x120>)
 800c0ac:	5cd3      	ldrb	r3, [r2, r3]
 800c0ae:	73fb      	strb	r3, [r7, #15]
				for(t=0;t<8;t++)
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	737b      	strb	r3, [r7, #13]
 800c0b4:	e017      	b.n	800c0e6 <tft_putchar+0xfa>
		    {                 
		        if(temp&0x01)tft_draw_point(x+t,y+pos);
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00c      	beq.n	800c0da <tft_putchar+0xee>
 800c0c0:	7b7b      	ldrb	r3, [r7, #13]
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	88fb      	ldrh	r3, [r7, #6]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	b298      	uxth	r0, r3
 800c0ca:	7bbb      	ldrb	r3, [r7, #14]
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	88bb      	ldrh	r3, [r7, #4]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f7ff ff6f 	bl	800bfb8 <tft_draw_point>
		        temp>>=1; 
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	085b      	lsrs	r3, r3, #1
 800c0de:	73fb      	strb	r3, [r7, #15]
				for(t=0;t<8;t++)
 800c0e0:	7b7b      	ldrb	r3, [r7, #13]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	737b      	strb	r3, [r7, #13]
 800c0e6:	7b7b      	ldrb	r3, [r7, #13]
 800c0e8:	2b07      	cmp	r3, #7
 800c0ea:	d9e4      	bls.n	800c0b6 <tft_putchar+0xca>
		for(pos=0;pos<16;pos++)
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	73bb      	strb	r3, [r7, #14]
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	2b0f      	cmp	r3, #15
 800c0f6:	d9d4      	bls.n	800c0a2 <tft_putchar+0xb6>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 800c0f8:	4a03      	ldr	r2, [pc, #12]	; (800c108 <tft_putchar+0x11c>)
 800c0fa:	897b      	ldrh	r3, [r7, #10]
 800c0fc:	8013      	strh	r3, [r2, #0]
 800c0fe:	e000      	b.n	800c102 <tft_putchar+0x116>
  if(x>LCD_W-16||y>LCD_H-16)return;	    		   
 800c100:	bf00      	nop
}
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	bd90      	pop	{r4, r7, pc}
 800c108:	200048aa 	.word	0x200048aa
 800c10c:	08032930 	.word	0x08032930
 800c110:	200048a8 	.word	0x200048a8

0800c114 <tft_putchar26x48>:

//x is column
//y is row
void tft_putchar26x48(uint16_t x,uint16_t y,uint8_t data,uint8_t mode)
{
 800c114:	b590      	push	{r4, r7, lr}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4604      	mov	r4, r0
 800c11c:	4608      	mov	r0, r1
 800c11e:	4611      	mov	r1, r2
 800c120:	461a      	mov	r2, r3
 800c122:	4623      	mov	r3, r4
 800c124:	80fb      	strh	r3, [r7, #6]
 800c126:	4603      	mov	r3, r0
 800c128:	80bb      	strh	r3, [r7, #4]
 800c12a:	460b      	mov	r3, r1
 800c12c:	70fb      	strb	r3, [r7, #3]
 800c12e:	4613      	mov	r3, r2
 800c130:	70bb      	strb	r3, [r7, #2]
	if((x>LCD_H-48)||(y>LCD_W-26)) return;
 800c132:	88fb      	ldrh	r3, [r7, #6]
 800c134:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800c138:	d86a      	bhi.n	800c210 <tft_putchar26x48+0xfc>
 800c13a:	88bb      	ldrh	r3, [r7, #4]
 800c13c:	2bd6      	cmp	r3, #214	; 0xd6
 800c13e:	d867      	bhi.n	800c210 <tft_putchar26x48+0xfc>
	uint8_t i,j,k,temp;
	
	tft_add_set(x,y,x+26-1,y+48-1); 
 800c140:	88fb      	ldrh	r3, [r7, #6]
 800c142:	3319      	adds	r3, #25
 800c144:	b29a      	uxth	r2, r3
 800c146:	88bb      	ldrh	r3, [r7, #4]
 800c148:	332f      	adds	r3, #47	; 0x2f
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	88b9      	ldrh	r1, [r7, #4]
 800c14e:	88f8      	ldrh	r0, [r7, #6]
 800c150:	f7ff ff02 	bl	800bf58 <tft_add_set>
	
	for(i=0;i<48/8;i++)
 800c154:	2300      	movs	r3, #0
 800c156:	73fb      	strb	r3, [r7, #15]
 800c158:	e056      	b.n	800c208 <tft_putchar26x48+0xf4>
	{
		for(j=0;j<8;j++)
 800c15a:	2300      	movs	r3, #0
 800c15c:	73bb      	strb	r3, [r7, #14]
 800c15e:	e04d      	b.n	800c1fc <tft_putchar26x48+0xe8>
		{
			for(k=0;k<26;k++)
 800c160:	2300      	movs	r3, #0
 800c162:	737b      	strb	r3, [r7, #13]
 800c164:	e044      	b.n	800c1f0 <tft_putchar26x48+0xdc>
			{
				temp=Consolas26x48[(data-' ')*(48/8)*26+k*(48/8)+i];
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	3b20      	subs	r3, #32
 800c16a:	229c      	movs	r2, #156	; 0x9c
 800c16c:	fb02 f103 	mul.w	r1, r2, r3
 800c170:	7b7a      	ldrb	r2, [r7, #13]
 800c172:	4613      	mov	r3, r2
 800c174:	005b      	lsls	r3, r3, #1
 800c176:	4413      	add	r3, r2
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	18ca      	adds	r2, r1, r3
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	4413      	add	r3, r2
 800c180:	4a25      	ldr	r2, [pc, #148]	; (800c218 <tft_putchar26x48+0x104>)
 800c182:	5cd3      	ldrb	r3, [r2, r3]
 800c184:	733b      	strb	r3, [r7, #12]
				if(mode==TFT_STRING_MODE_BACKGROUND)
 800c186:	78bb      	ldrb	r3, [r7, #2]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d113      	bne.n	800c1b4 <tft_putchar26x48+0xa0>
				{
					if(temp&(0x01<<j))
 800c18c:	7b3a      	ldrb	r2, [r7, #12]
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
 800c190:	fa42 f303 	asr.w	r3, r2, r3
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <tft_putchar26x48+0x94>
					{
						tft_write_data(POINT_COLOR);
 800c19c:	4b1f      	ldr	r3, [pc, #124]	; (800c21c <tft_putchar26x48+0x108>)
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7ff fe9b 	bl	800bedc <tft_write_data>
 800c1a6:	e020      	b.n	800c1ea <tft_putchar26x48+0xd6>
					}
					else
					{
						tft_write_data(BACK_COLOR);
 800c1a8:	4b1d      	ldr	r3, [pc, #116]	; (800c220 <tft_putchar26x48+0x10c>)
 800c1aa:	881b      	ldrh	r3, [r3, #0]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff fe95 	bl	800bedc <tft_write_data>
 800c1b2:	e01a      	b.n	800c1ea <tft_putchar26x48+0xd6>
					}
				}
				else
				{
					if(temp&(0x01<<j))
 800c1b4:	7b3a      	ldrb	r2, [r7, #12]
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	fa42 f303 	asr.w	r3, r2, r3
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d012      	beq.n	800c1ea <tft_putchar26x48+0xd6>
					{
						tft_draw_point(x+k,y+(8*i+j));
 800c1c4:	7b7b      	ldrb	r3, [r7, #13]
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	88fb      	ldrh	r3, [r7, #6]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	b298      	uxth	r0, r3
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	7bbb      	ldrb	r3, [r7, #14]
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	4413      	add	r3, r2
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	88bb      	ldrh	r3, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f7ff fee7 	bl	800bfb8 <tft_draw_point>
			for(k=0;k<26;k++)
 800c1ea:	7b7b      	ldrb	r3, [r7, #13]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	737b      	strb	r3, [r7, #13]
 800c1f0:	7b7b      	ldrb	r3, [r7, #13]
 800c1f2:	2b19      	cmp	r3, #25
 800c1f4:	d9b7      	bls.n	800c166 <tft_putchar26x48+0x52>
		for(j=0;j<8;j++)
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	73bb      	strb	r3, [r7, #14]
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	2b07      	cmp	r3, #7
 800c200:	d9ae      	bls.n	800c160 <tft_putchar26x48+0x4c>
	for(i=0;i<48/8;i++)
 800c202:	7bfb      	ldrb	r3, [r7, #15]
 800c204:	3301      	adds	r3, #1
 800c206:	73fb      	strb	r3, [r7, #15]
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	d9a5      	bls.n	800c15a <tft_putchar26x48+0x46>
 800c20e:	e000      	b.n	800c212 <tft_putchar26x48+0xfe>
	if((x>LCD_H-48)||(y>LCD_W-26)) return;
 800c210:	bf00      	nop
					}
				}
			}
		}
	}
}
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	bd90      	pop	{r4, r7, pc}
 800c218:	080359e0 	.word	0x080359e0
 800c21c:	200048aa 	.word	0x200048aa
 800c220:	200048a8 	.word	0x200048a8

0800c224 <tft_putchar14x24>:



void tft_putchar14x24(uint16_t x,uint16_t y,uint8_t data,uint8_t mode)
{
 800c224:	b590      	push	{r4, r7, lr}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	4611      	mov	r1, r2
 800c230:	461a      	mov	r2, r3
 800c232:	4623      	mov	r3, r4
 800c234:	80fb      	strh	r3, [r7, #6]
 800c236:	4603      	mov	r3, r0
 800c238:	80bb      	strh	r3, [r7, #4]
 800c23a:	460b      	mov	r3, r1
 800c23c:	70fb      	strb	r3, [r7, #3]
 800c23e:	4613      	mov	r3, r2
 800c240:	70bb      	strb	r3, [r7, #2]
	//if((x>LCD_H-24)||(y>LCD_W-14)) return;
	uint8_t i,j,k,temp;

	tft_add_set(x,y,x+14-1,y+24-1); 
 800c242:	88fb      	ldrh	r3, [r7, #6]
 800c244:	330d      	adds	r3, #13
 800c246:	b29a      	uxth	r2, r3
 800c248:	88bb      	ldrh	r3, [r7, #4]
 800c24a:	3317      	adds	r3, #23
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	88b9      	ldrh	r1, [r7, #4]
 800c250:	88f8      	ldrh	r0, [r7, #6]
 800c252:	f7ff fe81 	bl	800bf58 <tft_add_set>
	
	for(i=0;i<24/8;i++)
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
 800c25a:	e055      	b.n	800c308 <tft_putchar14x24+0xe4>
	{
		for(j=0;j<8;j++)
 800c25c:	2300      	movs	r3, #0
 800c25e:	73bb      	strb	r3, [r7, #14]
 800c260:	e04c      	b.n	800c2fc <tft_putchar14x24+0xd8>
		{
			for(k=0;k<14;k++)
 800c262:	2300      	movs	r3, #0
 800c264:	737b      	strb	r3, [r7, #13]
 800c266:	e043      	b.n	800c2f0 <tft_putchar14x24+0xcc>
			{
				temp=Consolas14x24[(data-' ')*(24/8)*14+k*(24/8)+i];
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	3b20      	subs	r3, #32
 800c26c:	222a      	movs	r2, #42	; 0x2a
 800c26e:	fb02 f103 	mul.w	r1, r2, r3
 800c272:	7b7a      	ldrb	r2, [r7, #13]
 800c274:	4613      	mov	r3, r2
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	4413      	add	r3, r2
 800c27a:	18ca      	adds	r2, r1, r3
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4413      	add	r3, r2
 800c280:	4a25      	ldr	r2, [pc, #148]	; (800c318 <tft_putchar14x24+0xf4>)
 800c282:	5cd3      	ldrb	r3, [r2, r3]
 800c284:	733b      	strb	r3, [r7, #12]
				if(mode==TFT_STRING_MODE_BACKGROUND)
 800c286:	78bb      	ldrb	r3, [r7, #2]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d113      	bne.n	800c2b4 <tft_putchar14x24+0x90>
				{
					if(temp&(0x01<<j))
 800c28c:	7b3a      	ldrb	r2, [r7, #12]
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	fa42 f303 	asr.w	r3, r2, r3
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d005      	beq.n	800c2a8 <tft_putchar14x24+0x84>
					{
						tft_write_data(POINT_COLOR);
 800c29c:	4b1f      	ldr	r3, [pc, #124]	; (800c31c <tft_putchar14x24+0xf8>)
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fe1b 	bl	800bedc <tft_write_data>
 800c2a6:	e020      	b.n	800c2ea <tft_putchar14x24+0xc6>
					}
					else
					{
						tft_write_data(BACK_COLOR);
 800c2a8:	4b1d      	ldr	r3, [pc, #116]	; (800c320 <tft_putchar14x24+0xfc>)
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fe15 	bl	800bedc <tft_write_data>
 800c2b2:	e01a      	b.n	800c2ea <tft_putchar14x24+0xc6>
					}
				}
				else
				{
					if(temp&(0x01<<j))
 800c2b4:	7b3a      	ldrb	r2, [r7, #12]
 800c2b6:	7bbb      	ldrb	r3, [r7, #14]
 800c2b8:	fa42 f303 	asr.w	r3, r2, r3
 800c2bc:	f003 0301 	and.w	r3, r3, #1
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d012      	beq.n	800c2ea <tft_putchar14x24+0xc6>
					{
						tft_draw_point(x+k,y+(8*i+j));
 800c2c4:	7b7b      	ldrb	r3, [r7, #13]
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	88fb      	ldrh	r3, [r7, #6]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	b298      	uxth	r0, r3
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	7bbb      	ldrb	r3, [r7, #14]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	4413      	add	r3, r2
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	88bb      	ldrh	r3, [r7, #4]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	f7ff fe67 	bl	800bfb8 <tft_draw_point>
			for(k=0;k<14;k++)
 800c2ea:	7b7b      	ldrb	r3, [r7, #13]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	737b      	strb	r3, [r7, #13]
 800c2f0:	7b7b      	ldrb	r3, [r7, #13]
 800c2f2:	2b0d      	cmp	r3, #13
 800c2f4:	d9b8      	bls.n	800c268 <tft_putchar14x24+0x44>
		for(j=0;j<8;j++)
 800c2f6:	7bbb      	ldrb	r3, [r7, #14]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	73bb      	strb	r3, [r7, #14]
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
 800c2fe:	2b07      	cmp	r3, #7
 800c300:	d9af      	bls.n	800c262 <tft_putchar14x24+0x3e>
	for(i=0;i<24/8;i++)
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	3301      	adds	r3, #1
 800c306:	73fb      	strb	r3, [r7, #15]
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d9a6      	bls.n	800c25c <tft_putchar14x24+0x38>
					}
				}
			}
		}
	}
}
 800c30e:	bf00      	nop
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	bd90      	pop	{r4, r7, pc}
 800c316:	bf00      	nop
 800c318:	08034a20 	.word	0x08034a20
 800c31c:	200048aa 	.word	0x200048aa
 800c320:	200048a8 	.word	0x200048a8

0800c324 <tft_putchar18x32>:



void tft_putchar18x32(uint16_t x,uint16_t y,uint8_t data,uint8_t mode)
{
 800c324:	b590      	push	{r4, r7, lr}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	4604      	mov	r4, r0
 800c32c:	4608      	mov	r0, r1
 800c32e:	4611      	mov	r1, r2
 800c330:	461a      	mov	r2, r3
 800c332:	4623      	mov	r3, r4
 800c334:	80fb      	strh	r3, [r7, #6]
 800c336:	4603      	mov	r3, r0
 800c338:	80bb      	strh	r3, [r7, #4]
 800c33a:	460b      	mov	r3, r1
 800c33c:	70fb      	strb	r3, [r7, #3]
 800c33e:	4613      	mov	r3, r2
 800c340:	70bb      	strb	r3, [r7, #2]
	if((x>LCD_H-32)||(y>LCD_W-18)) return;
 800c342:	88fb      	ldrh	r3, [r7, #6]
 800c344:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800c348:	d86a      	bhi.n	800c420 <tft_putchar18x32+0xfc>
 800c34a:	88bb      	ldrh	r3, [r7, #4]
 800c34c:	2bde      	cmp	r3, #222	; 0xde
 800c34e:	d867      	bhi.n	800c420 <tft_putchar18x32+0xfc>
	uint8_t i,j,k,temp;

	tft_add_set(x,y,x+18-1,y+32-1); 
 800c350:	88fb      	ldrh	r3, [r7, #6]
 800c352:	3311      	adds	r3, #17
 800c354:	b29a      	uxth	r2, r3
 800c356:	88bb      	ldrh	r3, [r7, #4]
 800c358:	331f      	adds	r3, #31
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	88b9      	ldrh	r1, [r7, #4]
 800c35e:	88f8      	ldrh	r0, [r7, #6]
 800c360:	f7ff fdfa 	bl	800bf58 <tft_add_set>
	
	for(i=0;i<32/8;i++)
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]
 800c368:	e056      	b.n	800c418 <tft_putchar18x32+0xf4>
	{
		for(j=0;j<8;j++)
 800c36a:	2300      	movs	r3, #0
 800c36c:	73bb      	strb	r3, [r7, #14]
 800c36e:	e04d      	b.n	800c40c <tft_putchar18x32+0xe8>
		{
			for(k=0;k<18;k++)
 800c370:	2300      	movs	r3, #0
 800c372:	737b      	strb	r3, [r7, #13]
 800c374:	e044      	b.n	800c400 <tft_putchar18x32+0xdc>
			{
				temp=Consolas18x32[(data-' ')*(32/8)*18+k*(32/8)+i];
 800c376:	78fb      	ldrb	r3, [r7, #3]
 800c378:	f1a3 0220 	sub.w	r2, r3, #32
 800c37c:	4613      	mov	r3, r2
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	4413      	add	r3, r2
 800c382:	005b      	lsls	r3, r3, #1
 800c384:	461a      	mov	r2, r3
 800c386:	7b7b      	ldrb	r3, [r7, #13]
 800c388:	4413      	add	r3, r2
 800c38a:	009a      	lsls	r2, r3, #2
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	4413      	add	r3, r2
 800c390:	4a25      	ldr	r2, [pc, #148]	; (800c428 <tft_putchar18x32+0x104>)
 800c392:	5cd3      	ldrb	r3, [r2, r3]
 800c394:	733b      	strb	r3, [r7, #12]
				if(mode==TFT_STRING_MODE_BACKGROUND)
 800c396:	78bb      	ldrb	r3, [r7, #2]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d113      	bne.n	800c3c4 <tft_putchar18x32+0xa0>
				{
					if(temp&(0x01<<j))
 800c39c:	7b3a      	ldrb	r2, [r7, #12]
 800c39e:	7bbb      	ldrb	r3, [r7, #14]
 800c3a0:	fa42 f303 	asr.w	r3, r2, r3
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d005      	beq.n	800c3b8 <tft_putchar18x32+0x94>
					{
						tft_write_data(POINT_COLOR);
 800c3ac:	4b1f      	ldr	r3, [pc, #124]	; (800c42c <tft_putchar18x32+0x108>)
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7ff fd93 	bl	800bedc <tft_write_data>
 800c3b6:	e020      	b.n	800c3fa <tft_putchar18x32+0xd6>
					}
					else
					{
						tft_write_data(BACK_COLOR);
 800c3b8:	4b1d      	ldr	r3, [pc, #116]	; (800c430 <tft_putchar18x32+0x10c>)
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff fd8d 	bl	800bedc <tft_write_data>
 800c3c2:	e01a      	b.n	800c3fa <tft_putchar18x32+0xd6>
					}
				}
				else
				{
					if(temp&(0x01<<j))
 800c3c4:	7b3a      	ldrb	r2, [r7, #12]
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
 800c3c8:	fa42 f303 	asr.w	r3, r2, r3
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d012      	beq.n	800c3fa <tft_putchar18x32+0xd6>
					{
						tft_draw_point(x+k,y+(8*i+j));
 800c3d4:	7b7b      	ldrb	r3, [r7, #13]
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	88fb      	ldrh	r3, [r7, #6]
 800c3da:	4413      	add	r3, r2
 800c3dc:	b298      	uxth	r0, r3
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	7bbb      	ldrb	r3, [r7, #14]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	4413      	add	r3, r2
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	88bb      	ldrh	r3, [r7, #4]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	f7ff fddf 	bl	800bfb8 <tft_draw_point>
			for(k=0;k<18;k++)
 800c3fa:	7b7b      	ldrb	r3, [r7, #13]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	737b      	strb	r3, [r7, #13]
 800c400:	7b7b      	ldrb	r3, [r7, #13]
 800c402:	2b11      	cmp	r3, #17
 800c404:	d9b7      	bls.n	800c376 <tft_putchar18x32+0x52>
		for(j=0;j<8;j++)
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	3301      	adds	r3, #1
 800c40a:	73bb      	strb	r3, [r7, #14]
 800c40c:	7bbb      	ldrb	r3, [r7, #14]
 800c40e:	2b07      	cmp	r3, #7
 800c410:	d9ae      	bls.n	800c370 <tft_putchar18x32+0x4c>
	for(i=0;i<32/8;i++)
 800c412:	7bfb      	ldrb	r3, [r7, #15]
 800c414:	3301      	adds	r3, #1
 800c416:	73fb      	strb	r3, [r7, #15]
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	2b03      	cmp	r3, #3
 800c41c:	d9a5      	bls.n	800c36a <tft_putchar18x32+0x46>
 800c41e:	e000      	b.n	800c422 <tft_putchar18x32+0xfe>
	if((x>LCD_H-32)||(y>LCD_W-18)) return;
 800c420:	bf00      	nop
					}
				}
			}
		}
	}
}
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	bd90      	pop	{r4, r7, pc}
 800c428:	08032f20 	.word	0x08032f20
 800c42c:	200048aa 	.word	0x200048aa
 800c430:	200048a8 	.word	0x200048a8

0800c434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800c434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c46c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c43a:	e003      	b.n	800c444 <LoopCopyDataInit>

0800c43c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c43c:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c43e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c442:	3104      	adds	r1, #4

0800c444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c444:	480b      	ldr	r0, [pc, #44]	; (800c474 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c446:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c44a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c44c:	d3f6      	bcc.n	800c43c <CopyDataInit>
  ldr  r2, =_sbss
 800c44e:	4a0b      	ldr	r2, [pc, #44]	; (800c47c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c450:	e002      	b.n	800c458 <LoopFillZerobss>

0800c452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c454:	f842 3b04 	str.w	r3, [r2], #4

0800c458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c458:	4b09      	ldr	r3, [pc, #36]	; (800c480 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c45a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c45c:	d3f9      	bcc.n	800c452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c45e:	f7ff f845 	bl	800b4ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c462:	f000 f817 	bl	800c494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c466:	f7fb fd5f 	bl	8007f28 <main>
  bx  lr    
 800c46a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800c46c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c470:	080394c8 	.word	0x080394c8
  ldr  r0, =_sdata
 800c474:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c478:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800c47c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 800c480:	200048b0 	.word	0x200048b0

0800c484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c484:	e7fe      	b.n	800c484 <ADC_IRQHandler>
	...

0800c488 <__errno>:
 800c488:	4b01      	ldr	r3, [pc, #4]	; (800c490 <__errno+0x8>)
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	20000020 	.word	0x20000020

0800c494 <__libc_init_array>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	4e0d      	ldr	r6, [pc, #52]	; (800c4cc <__libc_init_array+0x38>)
 800c498:	4c0d      	ldr	r4, [pc, #52]	; (800c4d0 <__libc_init_array+0x3c>)
 800c49a:	1ba4      	subs	r4, r4, r6
 800c49c:	10a4      	asrs	r4, r4, #2
 800c49e:	2500      	movs	r5, #0
 800c4a0:	42a5      	cmp	r5, r4
 800c4a2:	d109      	bne.n	800c4b8 <__libc_init_array+0x24>
 800c4a4:	4e0b      	ldr	r6, [pc, #44]	; (800c4d4 <__libc_init_array+0x40>)
 800c4a6:	4c0c      	ldr	r4, [pc, #48]	; (800c4d8 <__libc_init_array+0x44>)
 800c4a8:	f000 fcca 	bl	800ce40 <_init>
 800c4ac:	1ba4      	subs	r4, r4, r6
 800c4ae:	10a4      	asrs	r4, r4, #2
 800c4b0:	2500      	movs	r5, #0
 800c4b2:	42a5      	cmp	r5, r4
 800c4b4:	d105      	bne.n	800c4c2 <__libc_init_array+0x2e>
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4bc:	4798      	blx	r3
 800c4be:	3501      	adds	r5, #1
 800c4c0:	e7ee      	b.n	800c4a0 <__libc_init_array+0xc>
 800c4c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4c6:	4798      	blx	r3
 800c4c8:	3501      	adds	r5, #1
 800c4ca:	e7f2      	b.n	800c4b2 <__libc_init_array+0x1e>
 800c4cc:	080394c0 	.word	0x080394c0
 800c4d0:	080394c0 	.word	0x080394c0
 800c4d4:	080394c0 	.word	0x080394c0
 800c4d8:	080394c4 	.word	0x080394c4

0800c4dc <__itoa>:
 800c4dc:	1e93      	subs	r3, r2, #2
 800c4de:	2b22      	cmp	r3, #34	; 0x22
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	d904      	bls.n	800c4f0 <__itoa+0x14>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	700b      	strb	r3, [r1, #0]
 800c4ea:	461c      	mov	r4, r3
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	bd10      	pop	{r4, pc}
 800c4f0:	2a0a      	cmp	r2, #10
 800c4f2:	d109      	bne.n	800c508 <__itoa+0x2c>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	da07      	bge.n	800c508 <__itoa+0x2c>
 800c4f8:	232d      	movs	r3, #45	; 0x2d
 800c4fa:	700b      	strb	r3, [r1, #0]
 800c4fc:	4240      	negs	r0, r0
 800c4fe:	2101      	movs	r1, #1
 800c500:	4421      	add	r1, r4
 800c502:	f000 f849 	bl	800c598 <__utoa>
 800c506:	e7f1      	b.n	800c4ec <__itoa+0x10>
 800c508:	2100      	movs	r1, #0
 800c50a:	e7f9      	b.n	800c500 <__itoa+0x24>

0800c50c <itoa>:
 800c50c:	f7ff bfe6 	b.w	800c4dc <__itoa>

0800c510 <memcpy>:
 800c510:	b510      	push	{r4, lr}
 800c512:	1e43      	subs	r3, r0, #1
 800c514:	440a      	add	r2, r1
 800c516:	4291      	cmp	r1, r2
 800c518:	d100      	bne.n	800c51c <memcpy+0xc>
 800c51a:	bd10      	pop	{r4, pc}
 800c51c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c520:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c524:	e7f7      	b.n	800c516 <memcpy+0x6>

0800c526 <memset>:
 800c526:	4402      	add	r2, r0
 800c528:	4603      	mov	r3, r0
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d100      	bne.n	800c530 <memset+0xa>
 800c52e:	4770      	bx	lr
 800c530:	f803 1b01 	strb.w	r1, [r3], #1
 800c534:	e7f9      	b.n	800c52a <memset+0x4>
	...

0800c538 <siprintf>:
 800c538:	b40e      	push	{r1, r2, r3}
 800c53a:	b500      	push	{lr}
 800c53c:	b09c      	sub	sp, #112	; 0x70
 800c53e:	ab1d      	add	r3, sp, #116	; 0x74
 800c540:	9002      	str	r0, [sp, #8]
 800c542:	9006      	str	r0, [sp, #24]
 800c544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c548:	4809      	ldr	r0, [pc, #36]	; (800c570 <siprintf+0x38>)
 800c54a:	9107      	str	r1, [sp, #28]
 800c54c:	9104      	str	r1, [sp, #16]
 800c54e:	4909      	ldr	r1, [pc, #36]	; (800c574 <siprintf+0x3c>)
 800c550:	f853 2b04 	ldr.w	r2, [r3], #4
 800c554:	9105      	str	r1, [sp, #20]
 800c556:	6800      	ldr	r0, [r0, #0]
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	a902      	add	r1, sp, #8
 800c55c:	f000 f8b4 	bl	800c6c8 <_svfiprintf_r>
 800c560:	9b02      	ldr	r3, [sp, #8]
 800c562:	2200      	movs	r2, #0
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	b01c      	add	sp, #112	; 0x70
 800c568:	f85d eb04 	ldr.w	lr, [sp], #4
 800c56c:	b003      	add	sp, #12
 800c56e:	4770      	bx	lr
 800c570:	20000020 	.word	0x20000020
 800c574:	ffff0208 	.word	0xffff0208

0800c578 <strcat>:
 800c578:	b510      	push	{r4, lr}
 800c57a:	4603      	mov	r3, r0
 800c57c:	781a      	ldrb	r2, [r3, #0]
 800c57e:	1c5c      	adds	r4, r3, #1
 800c580:	b93a      	cbnz	r2, 800c592 <strcat+0x1a>
 800c582:	3b01      	subs	r3, #1
 800c584:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c588:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	d1f9      	bne.n	800c584 <strcat+0xc>
 800c590:	bd10      	pop	{r4, pc}
 800c592:	4623      	mov	r3, r4
 800c594:	e7f2      	b.n	800c57c <strcat+0x4>
	...

0800c598 <__utoa>:
 800c598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59a:	4b1d      	ldr	r3, [pc, #116]	; (800c610 <__utoa+0x78>)
 800c59c:	b08b      	sub	sp, #44	; 0x2c
 800c59e:	4605      	mov	r5, r0
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	466e      	mov	r6, sp
 800c5a4:	f103 0c20 	add.w	ip, r3, #32
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	6859      	ldr	r1, [r3, #4]
 800c5ac:	4637      	mov	r7, r6
 800c5ae:	c703      	stmia	r7!, {r0, r1}
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	4563      	cmp	r3, ip
 800c5b4:	463e      	mov	r6, r7
 800c5b6:	d1f7      	bne.n	800c5a8 <__utoa+0x10>
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	791b      	ldrb	r3, [r3, #4]
 800c5bc:	713b      	strb	r3, [r7, #4]
 800c5be:	1e93      	subs	r3, r2, #2
 800c5c0:	2b22      	cmp	r3, #34	; 0x22
 800c5c2:	6038      	str	r0, [r7, #0]
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	d904      	bls.n	800c5d4 <__utoa+0x3c>
 800c5ca:	7023      	strb	r3, [r4, #0]
 800c5cc:	461c      	mov	r4, r3
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	b00b      	add	sp, #44	; 0x2c
 800c5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5d4:	1e66      	subs	r6, r4, #1
 800c5d6:	fbb5 f0f2 	udiv	r0, r5, r2
 800c5da:	af0a      	add	r7, sp, #40	; 0x28
 800c5dc:	fb02 5510 	mls	r5, r2, r0, r5
 800c5e0:	443d      	add	r5, r7
 800c5e2:	1c59      	adds	r1, r3, #1
 800c5e4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800c5e8:	f806 5f01 	strb.w	r5, [r6, #1]!
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	b968      	cbnz	r0, 800c60c <__utoa+0x74>
 800c5f0:	5460      	strb	r0, [r4, r1]
 800c5f2:	4423      	add	r3, r4
 800c5f4:	4622      	mov	r2, r4
 800c5f6:	1b19      	subs	r1, r3, r4
 800c5f8:	1b10      	subs	r0, r2, r4
 800c5fa:	4281      	cmp	r1, r0
 800c5fc:	dde7      	ble.n	800c5ce <__utoa+0x36>
 800c5fe:	7811      	ldrb	r1, [r2, #0]
 800c600:	7818      	ldrb	r0, [r3, #0]
 800c602:	f802 0b01 	strb.w	r0, [r2], #1
 800c606:	f803 1901 	strb.w	r1, [r3], #-1
 800c60a:	e7f4      	b.n	800c5f6 <__utoa+0x5e>
 800c60c:	460b      	mov	r3, r1
 800c60e:	e7e2      	b.n	800c5d6 <__utoa+0x3e>
 800c610:	08039460 	.word	0x08039460

0800c614 <__ssputs_r>:
 800c614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c618:	688e      	ldr	r6, [r1, #8]
 800c61a:	429e      	cmp	r6, r3
 800c61c:	4682      	mov	sl, r0
 800c61e:	460c      	mov	r4, r1
 800c620:	4690      	mov	r8, r2
 800c622:	4699      	mov	r9, r3
 800c624:	d837      	bhi.n	800c696 <__ssputs_r+0x82>
 800c626:	898a      	ldrh	r2, [r1, #12]
 800c628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c62c:	d031      	beq.n	800c692 <__ssputs_r+0x7e>
 800c62e:	6825      	ldr	r5, [r4, #0]
 800c630:	6909      	ldr	r1, [r1, #16]
 800c632:	1a6f      	subs	r7, r5, r1
 800c634:	6965      	ldr	r5, [r4, #20]
 800c636:	2302      	movs	r3, #2
 800c638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c63c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c640:	f109 0301 	add.w	r3, r9, #1
 800c644:	443b      	add	r3, r7
 800c646:	429d      	cmp	r5, r3
 800c648:	bf38      	it	cc
 800c64a:	461d      	movcc	r5, r3
 800c64c:	0553      	lsls	r3, r2, #21
 800c64e:	d530      	bpl.n	800c6b2 <__ssputs_r+0x9e>
 800c650:	4629      	mov	r1, r5
 800c652:	f000 fb21 	bl	800cc98 <_malloc_r>
 800c656:	4606      	mov	r6, r0
 800c658:	b950      	cbnz	r0, 800c670 <__ssputs_r+0x5c>
 800c65a:	230c      	movs	r3, #12
 800c65c:	f8ca 3000 	str.w	r3, [sl]
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c666:	81a3      	strh	r3, [r4, #12]
 800c668:	f04f 30ff 	mov.w	r0, #4294967295
 800c66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c670:	463a      	mov	r2, r7
 800c672:	6921      	ldr	r1, [r4, #16]
 800c674:	f7ff ff4c 	bl	800c510 <memcpy>
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	6126      	str	r6, [r4, #16]
 800c686:	6165      	str	r5, [r4, #20]
 800c688:	443e      	add	r6, r7
 800c68a:	1bed      	subs	r5, r5, r7
 800c68c:	6026      	str	r6, [r4, #0]
 800c68e:	60a5      	str	r5, [r4, #8]
 800c690:	464e      	mov	r6, r9
 800c692:	454e      	cmp	r6, r9
 800c694:	d900      	bls.n	800c698 <__ssputs_r+0x84>
 800c696:	464e      	mov	r6, r9
 800c698:	4632      	mov	r2, r6
 800c69a:	4641      	mov	r1, r8
 800c69c:	6820      	ldr	r0, [r4, #0]
 800c69e:	f000 fa93 	bl	800cbc8 <memmove>
 800c6a2:	68a3      	ldr	r3, [r4, #8]
 800c6a4:	1b9b      	subs	r3, r3, r6
 800c6a6:	60a3      	str	r3, [r4, #8]
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	441e      	add	r6, r3
 800c6ac:	6026      	str	r6, [r4, #0]
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	e7dc      	b.n	800c66c <__ssputs_r+0x58>
 800c6b2:	462a      	mov	r2, r5
 800c6b4:	f000 fb4a 	bl	800cd4c <_realloc_r>
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d1e2      	bne.n	800c684 <__ssputs_r+0x70>
 800c6be:	6921      	ldr	r1, [r4, #16]
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	f000 fa9b 	bl	800cbfc <_free_r>
 800c6c6:	e7c8      	b.n	800c65a <__ssputs_r+0x46>

0800c6c8 <_svfiprintf_r>:
 800c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	461d      	mov	r5, r3
 800c6ce:	898b      	ldrh	r3, [r1, #12]
 800c6d0:	061f      	lsls	r7, r3, #24
 800c6d2:	b09d      	sub	sp, #116	; 0x74
 800c6d4:	4680      	mov	r8, r0
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	4616      	mov	r6, r2
 800c6da:	d50f      	bpl.n	800c6fc <_svfiprintf_r+0x34>
 800c6dc:	690b      	ldr	r3, [r1, #16]
 800c6de:	b96b      	cbnz	r3, 800c6fc <_svfiprintf_r+0x34>
 800c6e0:	2140      	movs	r1, #64	; 0x40
 800c6e2:	f000 fad9 	bl	800cc98 <_malloc_r>
 800c6e6:	6020      	str	r0, [r4, #0]
 800c6e8:	6120      	str	r0, [r4, #16]
 800c6ea:	b928      	cbnz	r0, 800c6f8 <_svfiprintf_r+0x30>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	f8c8 3000 	str.w	r3, [r8]
 800c6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f6:	e0c8      	b.n	800c88a <_svfiprintf_r+0x1c2>
 800c6f8:	2340      	movs	r3, #64	; 0x40
 800c6fa:	6163      	str	r3, [r4, #20]
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c700:	2320      	movs	r3, #32
 800c702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c706:	2330      	movs	r3, #48	; 0x30
 800c708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c70c:	9503      	str	r5, [sp, #12]
 800c70e:	f04f 0b01 	mov.w	fp, #1
 800c712:	4637      	mov	r7, r6
 800c714:	463d      	mov	r5, r7
 800c716:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c71a:	b10b      	cbz	r3, 800c720 <_svfiprintf_r+0x58>
 800c71c:	2b25      	cmp	r3, #37	; 0x25
 800c71e:	d13e      	bne.n	800c79e <_svfiprintf_r+0xd6>
 800c720:	ebb7 0a06 	subs.w	sl, r7, r6
 800c724:	d00b      	beq.n	800c73e <_svfiprintf_r+0x76>
 800c726:	4653      	mov	r3, sl
 800c728:	4632      	mov	r2, r6
 800c72a:	4621      	mov	r1, r4
 800c72c:	4640      	mov	r0, r8
 800c72e:	f7ff ff71 	bl	800c614 <__ssputs_r>
 800c732:	3001      	adds	r0, #1
 800c734:	f000 80a4 	beq.w	800c880 <_svfiprintf_r+0x1b8>
 800c738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73a:	4453      	add	r3, sl
 800c73c:	9309      	str	r3, [sp, #36]	; 0x24
 800c73e:	783b      	ldrb	r3, [r7, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 809d 	beq.w	800c880 <_svfiprintf_r+0x1b8>
 800c746:	2300      	movs	r3, #0
 800c748:	f04f 32ff 	mov.w	r2, #4294967295
 800c74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	9307      	str	r3, [sp, #28]
 800c754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c758:	931a      	str	r3, [sp, #104]	; 0x68
 800c75a:	462f      	mov	r7, r5
 800c75c:	2205      	movs	r2, #5
 800c75e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c762:	4850      	ldr	r0, [pc, #320]	; (800c8a4 <_svfiprintf_r+0x1dc>)
 800c764:	f7f3 fd44 	bl	80001f0 <memchr>
 800c768:	9b04      	ldr	r3, [sp, #16]
 800c76a:	b9d0      	cbnz	r0, 800c7a2 <_svfiprintf_r+0xda>
 800c76c:	06d9      	lsls	r1, r3, #27
 800c76e:	bf44      	itt	mi
 800c770:	2220      	movmi	r2, #32
 800c772:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c776:	071a      	lsls	r2, r3, #28
 800c778:	bf44      	itt	mi
 800c77a:	222b      	movmi	r2, #43	; 0x2b
 800c77c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c780:	782a      	ldrb	r2, [r5, #0]
 800c782:	2a2a      	cmp	r2, #42	; 0x2a
 800c784:	d015      	beq.n	800c7b2 <_svfiprintf_r+0xea>
 800c786:	9a07      	ldr	r2, [sp, #28]
 800c788:	462f      	mov	r7, r5
 800c78a:	2000      	movs	r0, #0
 800c78c:	250a      	movs	r5, #10
 800c78e:	4639      	mov	r1, r7
 800c790:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c794:	3b30      	subs	r3, #48	; 0x30
 800c796:	2b09      	cmp	r3, #9
 800c798:	d94d      	bls.n	800c836 <_svfiprintf_r+0x16e>
 800c79a:	b1b8      	cbz	r0, 800c7cc <_svfiprintf_r+0x104>
 800c79c:	e00f      	b.n	800c7be <_svfiprintf_r+0xf6>
 800c79e:	462f      	mov	r7, r5
 800c7a0:	e7b8      	b.n	800c714 <_svfiprintf_r+0x4c>
 800c7a2:	4a40      	ldr	r2, [pc, #256]	; (800c8a4 <_svfiprintf_r+0x1dc>)
 800c7a4:	1a80      	subs	r0, r0, r2
 800c7a6:	fa0b f000 	lsl.w	r0, fp, r0
 800c7aa:	4318      	orrs	r0, r3
 800c7ac:	9004      	str	r0, [sp, #16]
 800c7ae:	463d      	mov	r5, r7
 800c7b0:	e7d3      	b.n	800c75a <_svfiprintf_r+0x92>
 800c7b2:	9a03      	ldr	r2, [sp, #12]
 800c7b4:	1d11      	adds	r1, r2, #4
 800c7b6:	6812      	ldr	r2, [r2, #0]
 800c7b8:	9103      	str	r1, [sp, #12]
 800c7ba:	2a00      	cmp	r2, #0
 800c7bc:	db01      	blt.n	800c7c2 <_svfiprintf_r+0xfa>
 800c7be:	9207      	str	r2, [sp, #28]
 800c7c0:	e004      	b.n	800c7cc <_svfiprintf_r+0x104>
 800c7c2:	4252      	negs	r2, r2
 800c7c4:	f043 0302 	orr.w	r3, r3, #2
 800c7c8:	9207      	str	r2, [sp, #28]
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	783b      	ldrb	r3, [r7, #0]
 800c7ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c7d0:	d10c      	bne.n	800c7ec <_svfiprintf_r+0x124>
 800c7d2:	787b      	ldrb	r3, [r7, #1]
 800c7d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7d6:	d133      	bne.n	800c840 <_svfiprintf_r+0x178>
 800c7d8:	9b03      	ldr	r3, [sp, #12]
 800c7da:	1d1a      	adds	r2, r3, #4
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	9203      	str	r2, [sp, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bfb8      	it	lt
 800c7e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7e8:	3702      	adds	r7, #2
 800c7ea:	9305      	str	r3, [sp, #20]
 800c7ec:	4d2e      	ldr	r5, [pc, #184]	; (800c8a8 <_svfiprintf_r+0x1e0>)
 800c7ee:	7839      	ldrb	r1, [r7, #0]
 800c7f0:	2203      	movs	r2, #3
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f7f3 fcfc 	bl	80001f0 <memchr>
 800c7f8:	b138      	cbz	r0, 800c80a <_svfiprintf_r+0x142>
 800c7fa:	2340      	movs	r3, #64	; 0x40
 800c7fc:	1b40      	subs	r0, r0, r5
 800c7fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c802:	9b04      	ldr	r3, [sp, #16]
 800c804:	4303      	orrs	r3, r0
 800c806:	3701      	adds	r7, #1
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	7839      	ldrb	r1, [r7, #0]
 800c80c:	4827      	ldr	r0, [pc, #156]	; (800c8ac <_svfiprintf_r+0x1e4>)
 800c80e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c812:	2206      	movs	r2, #6
 800c814:	1c7e      	adds	r6, r7, #1
 800c816:	f7f3 fceb 	bl	80001f0 <memchr>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d038      	beq.n	800c890 <_svfiprintf_r+0x1c8>
 800c81e:	4b24      	ldr	r3, [pc, #144]	; (800c8b0 <_svfiprintf_r+0x1e8>)
 800c820:	bb13      	cbnz	r3, 800c868 <_svfiprintf_r+0x1a0>
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	3307      	adds	r3, #7
 800c826:	f023 0307 	bic.w	r3, r3, #7
 800c82a:	3308      	adds	r3, #8
 800c82c:	9303      	str	r3, [sp, #12]
 800c82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c830:	444b      	add	r3, r9
 800c832:	9309      	str	r3, [sp, #36]	; 0x24
 800c834:	e76d      	b.n	800c712 <_svfiprintf_r+0x4a>
 800c836:	fb05 3202 	mla	r2, r5, r2, r3
 800c83a:	2001      	movs	r0, #1
 800c83c:	460f      	mov	r7, r1
 800c83e:	e7a6      	b.n	800c78e <_svfiprintf_r+0xc6>
 800c840:	2300      	movs	r3, #0
 800c842:	3701      	adds	r7, #1
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	4619      	mov	r1, r3
 800c848:	250a      	movs	r5, #10
 800c84a:	4638      	mov	r0, r7
 800c84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c850:	3a30      	subs	r2, #48	; 0x30
 800c852:	2a09      	cmp	r2, #9
 800c854:	d903      	bls.n	800c85e <_svfiprintf_r+0x196>
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0c8      	beq.n	800c7ec <_svfiprintf_r+0x124>
 800c85a:	9105      	str	r1, [sp, #20]
 800c85c:	e7c6      	b.n	800c7ec <_svfiprintf_r+0x124>
 800c85e:	fb05 2101 	mla	r1, r5, r1, r2
 800c862:	2301      	movs	r3, #1
 800c864:	4607      	mov	r7, r0
 800c866:	e7f0      	b.n	800c84a <_svfiprintf_r+0x182>
 800c868:	ab03      	add	r3, sp, #12
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	4622      	mov	r2, r4
 800c86e:	4b11      	ldr	r3, [pc, #68]	; (800c8b4 <_svfiprintf_r+0x1ec>)
 800c870:	a904      	add	r1, sp, #16
 800c872:	4640      	mov	r0, r8
 800c874:	f3af 8000 	nop.w
 800c878:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c87c:	4681      	mov	r9, r0
 800c87e:	d1d6      	bne.n	800c82e <_svfiprintf_r+0x166>
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	065b      	lsls	r3, r3, #25
 800c884:	f53f af35 	bmi.w	800c6f2 <_svfiprintf_r+0x2a>
 800c888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c88a:	b01d      	add	sp, #116	; 0x74
 800c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c890:	ab03      	add	r3, sp, #12
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	4622      	mov	r2, r4
 800c896:	4b07      	ldr	r3, [pc, #28]	; (800c8b4 <_svfiprintf_r+0x1ec>)
 800c898:	a904      	add	r1, sp, #16
 800c89a:	4640      	mov	r0, r8
 800c89c:	f000 f882 	bl	800c9a4 <_printf_i>
 800c8a0:	e7ea      	b.n	800c878 <_svfiprintf_r+0x1b0>
 800c8a2:	bf00      	nop
 800c8a4:	08039485 	.word	0x08039485
 800c8a8:	0803948b 	.word	0x0803948b
 800c8ac:	0803948f 	.word	0x0803948f
 800c8b0:	00000000 	.word	0x00000000
 800c8b4:	0800c615 	.word	0x0800c615

0800c8b8 <_printf_common>:
 800c8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8bc:	4691      	mov	r9, r2
 800c8be:	461f      	mov	r7, r3
 800c8c0:	688a      	ldr	r2, [r1, #8]
 800c8c2:	690b      	ldr	r3, [r1, #16]
 800c8c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	bfb8      	it	lt
 800c8cc:	4613      	movlt	r3, r2
 800c8ce:	f8c9 3000 	str.w	r3, [r9]
 800c8d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	460c      	mov	r4, r1
 800c8da:	b112      	cbz	r2, 800c8e2 <_printf_common+0x2a>
 800c8dc:	3301      	adds	r3, #1
 800c8de:	f8c9 3000 	str.w	r3, [r9]
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	0699      	lsls	r1, r3, #26
 800c8e6:	bf42      	ittt	mi
 800c8e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c8ec:	3302      	addmi	r3, #2
 800c8ee:	f8c9 3000 	strmi.w	r3, [r9]
 800c8f2:	6825      	ldr	r5, [r4, #0]
 800c8f4:	f015 0506 	ands.w	r5, r5, #6
 800c8f8:	d107      	bne.n	800c90a <_printf_common+0x52>
 800c8fa:	f104 0a19 	add.w	sl, r4, #25
 800c8fe:	68e3      	ldr	r3, [r4, #12]
 800c900:	f8d9 2000 	ldr.w	r2, [r9]
 800c904:	1a9b      	subs	r3, r3, r2
 800c906:	42ab      	cmp	r3, r5
 800c908:	dc28      	bgt.n	800c95c <_printf_common+0xa4>
 800c90a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c90e:	6822      	ldr	r2, [r4, #0]
 800c910:	3300      	adds	r3, #0
 800c912:	bf18      	it	ne
 800c914:	2301      	movne	r3, #1
 800c916:	0692      	lsls	r2, r2, #26
 800c918:	d42d      	bmi.n	800c976 <_printf_common+0xbe>
 800c91a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c91e:	4639      	mov	r1, r7
 800c920:	4630      	mov	r0, r6
 800c922:	47c0      	blx	r8
 800c924:	3001      	adds	r0, #1
 800c926:	d020      	beq.n	800c96a <_printf_common+0xb2>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	68e5      	ldr	r5, [r4, #12]
 800c92c:	f8d9 2000 	ldr.w	r2, [r9]
 800c930:	f003 0306 	and.w	r3, r3, #6
 800c934:	2b04      	cmp	r3, #4
 800c936:	bf08      	it	eq
 800c938:	1aad      	subeq	r5, r5, r2
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	6922      	ldr	r2, [r4, #16]
 800c93e:	bf0c      	ite	eq
 800c940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c944:	2500      	movne	r5, #0
 800c946:	4293      	cmp	r3, r2
 800c948:	bfc4      	itt	gt
 800c94a:	1a9b      	subgt	r3, r3, r2
 800c94c:	18ed      	addgt	r5, r5, r3
 800c94e:	f04f 0900 	mov.w	r9, #0
 800c952:	341a      	adds	r4, #26
 800c954:	454d      	cmp	r5, r9
 800c956:	d11a      	bne.n	800c98e <_printf_common+0xd6>
 800c958:	2000      	movs	r0, #0
 800c95a:	e008      	b.n	800c96e <_printf_common+0xb6>
 800c95c:	2301      	movs	r3, #1
 800c95e:	4652      	mov	r2, sl
 800c960:	4639      	mov	r1, r7
 800c962:	4630      	mov	r0, r6
 800c964:	47c0      	blx	r8
 800c966:	3001      	adds	r0, #1
 800c968:	d103      	bne.n	800c972 <_printf_common+0xba>
 800c96a:	f04f 30ff 	mov.w	r0, #4294967295
 800c96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c972:	3501      	adds	r5, #1
 800c974:	e7c3      	b.n	800c8fe <_printf_common+0x46>
 800c976:	18e1      	adds	r1, r4, r3
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	2030      	movs	r0, #48	; 0x30
 800c97c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c980:	4422      	add	r2, r4
 800c982:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c98a:	3302      	adds	r3, #2
 800c98c:	e7c5      	b.n	800c91a <_printf_common+0x62>
 800c98e:	2301      	movs	r3, #1
 800c990:	4622      	mov	r2, r4
 800c992:	4639      	mov	r1, r7
 800c994:	4630      	mov	r0, r6
 800c996:	47c0      	blx	r8
 800c998:	3001      	adds	r0, #1
 800c99a:	d0e6      	beq.n	800c96a <_printf_common+0xb2>
 800c99c:	f109 0901 	add.w	r9, r9, #1
 800c9a0:	e7d8      	b.n	800c954 <_printf_common+0x9c>
	...

0800c9a4 <_printf_i>:
 800c9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	7e09      	ldrb	r1, [r1, #24]
 800c9b0:	b085      	sub	sp, #20
 800c9b2:	296e      	cmp	r1, #110	; 0x6e
 800c9b4:	4617      	mov	r7, r2
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	4698      	mov	r8, r3
 800c9ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9bc:	f000 80b3 	beq.w	800cb26 <_printf_i+0x182>
 800c9c0:	d822      	bhi.n	800ca08 <_printf_i+0x64>
 800c9c2:	2963      	cmp	r1, #99	; 0x63
 800c9c4:	d036      	beq.n	800ca34 <_printf_i+0x90>
 800c9c6:	d80a      	bhi.n	800c9de <_printf_i+0x3a>
 800c9c8:	2900      	cmp	r1, #0
 800c9ca:	f000 80b9 	beq.w	800cb40 <_printf_i+0x19c>
 800c9ce:	2958      	cmp	r1, #88	; 0x58
 800c9d0:	f000 8083 	beq.w	800cada <_printf_i+0x136>
 800c9d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c9dc:	e032      	b.n	800ca44 <_printf_i+0xa0>
 800c9de:	2964      	cmp	r1, #100	; 0x64
 800c9e0:	d001      	beq.n	800c9e6 <_printf_i+0x42>
 800c9e2:	2969      	cmp	r1, #105	; 0x69
 800c9e4:	d1f6      	bne.n	800c9d4 <_printf_i+0x30>
 800c9e6:	6820      	ldr	r0, [r4, #0]
 800c9e8:	6813      	ldr	r3, [r2, #0]
 800c9ea:	0605      	lsls	r5, r0, #24
 800c9ec:	f103 0104 	add.w	r1, r3, #4
 800c9f0:	d52a      	bpl.n	800ca48 <_printf_i+0xa4>
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6011      	str	r1, [r2, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	da03      	bge.n	800ca02 <_printf_i+0x5e>
 800c9fa:	222d      	movs	r2, #45	; 0x2d
 800c9fc:	425b      	negs	r3, r3
 800c9fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ca02:	486f      	ldr	r0, [pc, #444]	; (800cbc0 <_printf_i+0x21c>)
 800ca04:	220a      	movs	r2, #10
 800ca06:	e039      	b.n	800ca7c <_printf_i+0xd8>
 800ca08:	2973      	cmp	r1, #115	; 0x73
 800ca0a:	f000 809d 	beq.w	800cb48 <_printf_i+0x1a4>
 800ca0e:	d808      	bhi.n	800ca22 <_printf_i+0x7e>
 800ca10:	296f      	cmp	r1, #111	; 0x6f
 800ca12:	d020      	beq.n	800ca56 <_printf_i+0xb2>
 800ca14:	2970      	cmp	r1, #112	; 0x70
 800ca16:	d1dd      	bne.n	800c9d4 <_printf_i+0x30>
 800ca18:	6823      	ldr	r3, [r4, #0]
 800ca1a:	f043 0320 	orr.w	r3, r3, #32
 800ca1e:	6023      	str	r3, [r4, #0]
 800ca20:	e003      	b.n	800ca2a <_printf_i+0x86>
 800ca22:	2975      	cmp	r1, #117	; 0x75
 800ca24:	d017      	beq.n	800ca56 <_printf_i+0xb2>
 800ca26:	2978      	cmp	r1, #120	; 0x78
 800ca28:	d1d4      	bne.n	800c9d4 <_printf_i+0x30>
 800ca2a:	2378      	movs	r3, #120	; 0x78
 800ca2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca30:	4864      	ldr	r0, [pc, #400]	; (800cbc4 <_printf_i+0x220>)
 800ca32:	e055      	b.n	800cae0 <_printf_i+0x13c>
 800ca34:	6813      	ldr	r3, [r2, #0]
 800ca36:	1d19      	adds	r1, r3, #4
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6011      	str	r1, [r2, #0]
 800ca3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca44:	2301      	movs	r3, #1
 800ca46:	e08c      	b.n	800cb62 <_printf_i+0x1be>
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6011      	str	r1, [r2, #0]
 800ca4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca50:	bf18      	it	ne
 800ca52:	b21b      	sxthne	r3, r3
 800ca54:	e7cf      	b.n	800c9f6 <_printf_i+0x52>
 800ca56:	6813      	ldr	r3, [r2, #0]
 800ca58:	6825      	ldr	r5, [r4, #0]
 800ca5a:	1d18      	adds	r0, r3, #4
 800ca5c:	6010      	str	r0, [r2, #0]
 800ca5e:	0628      	lsls	r0, r5, #24
 800ca60:	d501      	bpl.n	800ca66 <_printf_i+0xc2>
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	e002      	b.n	800ca6c <_printf_i+0xc8>
 800ca66:	0668      	lsls	r0, r5, #25
 800ca68:	d5fb      	bpl.n	800ca62 <_printf_i+0xbe>
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	4854      	ldr	r0, [pc, #336]	; (800cbc0 <_printf_i+0x21c>)
 800ca6e:	296f      	cmp	r1, #111	; 0x6f
 800ca70:	bf14      	ite	ne
 800ca72:	220a      	movne	r2, #10
 800ca74:	2208      	moveq	r2, #8
 800ca76:	2100      	movs	r1, #0
 800ca78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca7c:	6865      	ldr	r5, [r4, #4]
 800ca7e:	60a5      	str	r5, [r4, #8]
 800ca80:	2d00      	cmp	r5, #0
 800ca82:	f2c0 8095 	blt.w	800cbb0 <_printf_i+0x20c>
 800ca86:	6821      	ldr	r1, [r4, #0]
 800ca88:	f021 0104 	bic.w	r1, r1, #4
 800ca8c:	6021      	str	r1, [r4, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d13d      	bne.n	800cb0e <_printf_i+0x16a>
 800ca92:	2d00      	cmp	r5, #0
 800ca94:	f040 808e 	bne.w	800cbb4 <_printf_i+0x210>
 800ca98:	4665      	mov	r5, ip
 800ca9a:	2a08      	cmp	r2, #8
 800ca9c:	d10b      	bne.n	800cab6 <_printf_i+0x112>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	07db      	lsls	r3, r3, #31
 800caa2:	d508      	bpl.n	800cab6 <_printf_i+0x112>
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	6862      	ldr	r2, [r4, #4]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	bfde      	ittt	le
 800caac:	2330      	movle	r3, #48	; 0x30
 800caae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cab2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cab6:	ebac 0305 	sub.w	r3, ip, r5
 800caba:	6123      	str	r3, [r4, #16]
 800cabc:	f8cd 8000 	str.w	r8, [sp]
 800cac0:	463b      	mov	r3, r7
 800cac2:	aa03      	add	r2, sp, #12
 800cac4:	4621      	mov	r1, r4
 800cac6:	4630      	mov	r0, r6
 800cac8:	f7ff fef6 	bl	800c8b8 <_printf_common>
 800cacc:	3001      	adds	r0, #1
 800cace:	d14d      	bne.n	800cb6c <_printf_i+0x1c8>
 800cad0:	f04f 30ff 	mov.w	r0, #4294967295
 800cad4:	b005      	add	sp, #20
 800cad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cada:	4839      	ldr	r0, [pc, #228]	; (800cbc0 <_printf_i+0x21c>)
 800cadc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cae0:	6813      	ldr	r3, [r2, #0]
 800cae2:	6821      	ldr	r1, [r4, #0]
 800cae4:	1d1d      	adds	r5, r3, #4
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	6015      	str	r5, [r2, #0]
 800caea:	060a      	lsls	r2, r1, #24
 800caec:	d50b      	bpl.n	800cb06 <_printf_i+0x162>
 800caee:	07ca      	lsls	r2, r1, #31
 800caf0:	bf44      	itt	mi
 800caf2:	f041 0120 	orrmi.w	r1, r1, #32
 800caf6:	6021      	strmi	r1, [r4, #0]
 800caf8:	b91b      	cbnz	r3, 800cb02 <_printf_i+0x15e>
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	f022 0220 	bic.w	r2, r2, #32
 800cb00:	6022      	str	r2, [r4, #0]
 800cb02:	2210      	movs	r2, #16
 800cb04:	e7b7      	b.n	800ca76 <_printf_i+0xd2>
 800cb06:	064d      	lsls	r5, r1, #25
 800cb08:	bf48      	it	mi
 800cb0a:	b29b      	uxthmi	r3, r3
 800cb0c:	e7ef      	b.n	800caee <_printf_i+0x14a>
 800cb0e:	4665      	mov	r5, ip
 800cb10:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb14:	fb02 3311 	mls	r3, r2, r1, r3
 800cb18:	5cc3      	ldrb	r3, [r0, r3]
 800cb1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cb1e:	460b      	mov	r3, r1
 800cb20:	2900      	cmp	r1, #0
 800cb22:	d1f5      	bne.n	800cb10 <_printf_i+0x16c>
 800cb24:	e7b9      	b.n	800ca9a <_printf_i+0xf6>
 800cb26:	6813      	ldr	r3, [r2, #0]
 800cb28:	6825      	ldr	r5, [r4, #0]
 800cb2a:	6961      	ldr	r1, [r4, #20]
 800cb2c:	1d18      	adds	r0, r3, #4
 800cb2e:	6010      	str	r0, [r2, #0]
 800cb30:	0628      	lsls	r0, r5, #24
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	d501      	bpl.n	800cb3a <_printf_i+0x196>
 800cb36:	6019      	str	r1, [r3, #0]
 800cb38:	e002      	b.n	800cb40 <_printf_i+0x19c>
 800cb3a:	066a      	lsls	r2, r5, #25
 800cb3c:	d5fb      	bpl.n	800cb36 <_printf_i+0x192>
 800cb3e:	8019      	strh	r1, [r3, #0]
 800cb40:	2300      	movs	r3, #0
 800cb42:	6123      	str	r3, [r4, #16]
 800cb44:	4665      	mov	r5, ip
 800cb46:	e7b9      	b.n	800cabc <_printf_i+0x118>
 800cb48:	6813      	ldr	r3, [r2, #0]
 800cb4a:	1d19      	adds	r1, r3, #4
 800cb4c:	6011      	str	r1, [r2, #0]
 800cb4e:	681d      	ldr	r5, [r3, #0]
 800cb50:	6862      	ldr	r2, [r4, #4]
 800cb52:	2100      	movs	r1, #0
 800cb54:	4628      	mov	r0, r5
 800cb56:	f7f3 fb4b 	bl	80001f0 <memchr>
 800cb5a:	b108      	cbz	r0, 800cb60 <_printf_i+0x1bc>
 800cb5c:	1b40      	subs	r0, r0, r5
 800cb5e:	6060      	str	r0, [r4, #4]
 800cb60:	6863      	ldr	r3, [r4, #4]
 800cb62:	6123      	str	r3, [r4, #16]
 800cb64:	2300      	movs	r3, #0
 800cb66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb6a:	e7a7      	b.n	800cabc <_printf_i+0x118>
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	462a      	mov	r2, r5
 800cb70:	4639      	mov	r1, r7
 800cb72:	4630      	mov	r0, r6
 800cb74:	47c0      	blx	r8
 800cb76:	3001      	adds	r0, #1
 800cb78:	d0aa      	beq.n	800cad0 <_printf_i+0x12c>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	079b      	lsls	r3, r3, #30
 800cb7e:	d413      	bmi.n	800cba8 <_printf_i+0x204>
 800cb80:	68e0      	ldr	r0, [r4, #12]
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	4298      	cmp	r0, r3
 800cb86:	bfb8      	it	lt
 800cb88:	4618      	movlt	r0, r3
 800cb8a:	e7a3      	b.n	800cad4 <_printf_i+0x130>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	464a      	mov	r2, r9
 800cb90:	4639      	mov	r1, r7
 800cb92:	4630      	mov	r0, r6
 800cb94:	47c0      	blx	r8
 800cb96:	3001      	adds	r0, #1
 800cb98:	d09a      	beq.n	800cad0 <_printf_i+0x12c>
 800cb9a:	3501      	adds	r5, #1
 800cb9c:	68e3      	ldr	r3, [r4, #12]
 800cb9e:	9a03      	ldr	r2, [sp, #12]
 800cba0:	1a9b      	subs	r3, r3, r2
 800cba2:	42ab      	cmp	r3, r5
 800cba4:	dcf2      	bgt.n	800cb8c <_printf_i+0x1e8>
 800cba6:	e7eb      	b.n	800cb80 <_printf_i+0x1dc>
 800cba8:	2500      	movs	r5, #0
 800cbaa:	f104 0919 	add.w	r9, r4, #25
 800cbae:	e7f5      	b.n	800cb9c <_printf_i+0x1f8>
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1ac      	bne.n	800cb0e <_printf_i+0x16a>
 800cbb4:	7803      	ldrb	r3, [r0, #0]
 800cbb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbbe:	e76c      	b.n	800ca9a <_printf_i+0xf6>
 800cbc0:	08039496 	.word	0x08039496
 800cbc4:	080394a7 	.word	0x080394a7

0800cbc8 <memmove>:
 800cbc8:	4288      	cmp	r0, r1
 800cbca:	b510      	push	{r4, lr}
 800cbcc:	eb01 0302 	add.w	r3, r1, r2
 800cbd0:	d807      	bhi.n	800cbe2 <memmove+0x1a>
 800cbd2:	1e42      	subs	r2, r0, #1
 800cbd4:	4299      	cmp	r1, r3
 800cbd6:	d00a      	beq.n	800cbee <memmove+0x26>
 800cbd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbdc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cbe0:	e7f8      	b.n	800cbd4 <memmove+0xc>
 800cbe2:	4283      	cmp	r3, r0
 800cbe4:	d9f5      	bls.n	800cbd2 <memmove+0xa>
 800cbe6:	1881      	adds	r1, r0, r2
 800cbe8:	1ad2      	subs	r2, r2, r3
 800cbea:	42d3      	cmn	r3, r2
 800cbec:	d100      	bne.n	800cbf0 <memmove+0x28>
 800cbee:	bd10      	pop	{r4, pc}
 800cbf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cbf8:	e7f7      	b.n	800cbea <memmove+0x22>
	...

0800cbfc <_free_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4605      	mov	r5, r0
 800cc00:	2900      	cmp	r1, #0
 800cc02:	d045      	beq.n	800cc90 <_free_r+0x94>
 800cc04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc08:	1f0c      	subs	r4, r1, #4
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bfb8      	it	lt
 800cc0e:	18e4      	addlt	r4, r4, r3
 800cc10:	f000 f8d2 	bl	800cdb8 <__malloc_lock>
 800cc14:	4a1f      	ldr	r2, [pc, #124]	; (800cc94 <_free_r+0x98>)
 800cc16:	6813      	ldr	r3, [r2, #0]
 800cc18:	4610      	mov	r0, r2
 800cc1a:	b933      	cbnz	r3, 800cc2a <_free_r+0x2e>
 800cc1c:	6063      	str	r3, [r4, #4]
 800cc1e:	6014      	str	r4, [r2, #0]
 800cc20:	4628      	mov	r0, r5
 800cc22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc26:	f000 b8c8 	b.w	800cdba <__malloc_unlock>
 800cc2a:	42a3      	cmp	r3, r4
 800cc2c:	d90c      	bls.n	800cc48 <_free_r+0x4c>
 800cc2e:	6821      	ldr	r1, [r4, #0]
 800cc30:	1862      	adds	r2, r4, r1
 800cc32:	4293      	cmp	r3, r2
 800cc34:	bf04      	itt	eq
 800cc36:	681a      	ldreq	r2, [r3, #0]
 800cc38:	685b      	ldreq	r3, [r3, #4]
 800cc3a:	6063      	str	r3, [r4, #4]
 800cc3c:	bf04      	itt	eq
 800cc3e:	1852      	addeq	r2, r2, r1
 800cc40:	6022      	streq	r2, [r4, #0]
 800cc42:	6004      	str	r4, [r0, #0]
 800cc44:	e7ec      	b.n	800cc20 <_free_r+0x24>
 800cc46:	4613      	mov	r3, r2
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	b10a      	cbz	r2, 800cc50 <_free_r+0x54>
 800cc4c:	42a2      	cmp	r2, r4
 800cc4e:	d9fa      	bls.n	800cc46 <_free_r+0x4a>
 800cc50:	6819      	ldr	r1, [r3, #0]
 800cc52:	1858      	adds	r0, r3, r1
 800cc54:	42a0      	cmp	r0, r4
 800cc56:	d10b      	bne.n	800cc70 <_free_r+0x74>
 800cc58:	6820      	ldr	r0, [r4, #0]
 800cc5a:	4401      	add	r1, r0
 800cc5c:	1858      	adds	r0, r3, r1
 800cc5e:	4282      	cmp	r2, r0
 800cc60:	6019      	str	r1, [r3, #0]
 800cc62:	d1dd      	bne.n	800cc20 <_free_r+0x24>
 800cc64:	6810      	ldr	r0, [r2, #0]
 800cc66:	6852      	ldr	r2, [r2, #4]
 800cc68:	605a      	str	r2, [r3, #4]
 800cc6a:	4401      	add	r1, r0
 800cc6c:	6019      	str	r1, [r3, #0]
 800cc6e:	e7d7      	b.n	800cc20 <_free_r+0x24>
 800cc70:	d902      	bls.n	800cc78 <_free_r+0x7c>
 800cc72:	230c      	movs	r3, #12
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	e7d3      	b.n	800cc20 <_free_r+0x24>
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	1821      	adds	r1, r4, r0
 800cc7c:	428a      	cmp	r2, r1
 800cc7e:	bf04      	itt	eq
 800cc80:	6811      	ldreq	r1, [r2, #0]
 800cc82:	6852      	ldreq	r2, [r2, #4]
 800cc84:	6062      	str	r2, [r4, #4]
 800cc86:	bf04      	itt	eq
 800cc88:	1809      	addeq	r1, r1, r0
 800cc8a:	6021      	streq	r1, [r4, #0]
 800cc8c:	605c      	str	r4, [r3, #4]
 800cc8e:	e7c7      	b.n	800cc20 <_free_r+0x24>
 800cc90:	bd38      	pop	{r3, r4, r5, pc}
 800cc92:	bf00      	nop
 800cc94:	200040f8 	.word	0x200040f8

0800cc98 <_malloc_r>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	1ccd      	adds	r5, r1, #3
 800cc9c:	f025 0503 	bic.w	r5, r5, #3
 800cca0:	3508      	adds	r5, #8
 800cca2:	2d0c      	cmp	r5, #12
 800cca4:	bf38      	it	cc
 800cca6:	250c      	movcc	r5, #12
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	4606      	mov	r6, r0
 800ccac:	db01      	blt.n	800ccb2 <_malloc_r+0x1a>
 800ccae:	42a9      	cmp	r1, r5
 800ccb0:	d903      	bls.n	800ccba <_malloc_r+0x22>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	bd70      	pop	{r4, r5, r6, pc}
 800ccba:	f000 f87d 	bl	800cdb8 <__malloc_lock>
 800ccbe:	4a21      	ldr	r2, [pc, #132]	; (800cd44 <_malloc_r+0xac>)
 800ccc0:	6814      	ldr	r4, [r2, #0]
 800ccc2:	4621      	mov	r1, r4
 800ccc4:	b991      	cbnz	r1, 800ccec <_malloc_r+0x54>
 800ccc6:	4c20      	ldr	r4, [pc, #128]	; (800cd48 <_malloc_r+0xb0>)
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	b91b      	cbnz	r3, 800ccd4 <_malloc_r+0x3c>
 800cccc:	4630      	mov	r0, r6
 800ccce:	f000 f863 	bl	800cd98 <_sbrk_r>
 800ccd2:	6020      	str	r0, [r4, #0]
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f000 f85e 	bl	800cd98 <_sbrk_r>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d124      	bne.n	800cd2a <_malloc_r+0x92>
 800cce0:	230c      	movs	r3, #12
 800cce2:	6033      	str	r3, [r6, #0]
 800cce4:	4630      	mov	r0, r6
 800cce6:	f000 f868 	bl	800cdba <__malloc_unlock>
 800ccea:	e7e4      	b.n	800ccb6 <_malloc_r+0x1e>
 800ccec:	680b      	ldr	r3, [r1, #0]
 800ccee:	1b5b      	subs	r3, r3, r5
 800ccf0:	d418      	bmi.n	800cd24 <_malloc_r+0x8c>
 800ccf2:	2b0b      	cmp	r3, #11
 800ccf4:	d90f      	bls.n	800cd16 <_malloc_r+0x7e>
 800ccf6:	600b      	str	r3, [r1, #0]
 800ccf8:	50cd      	str	r5, [r1, r3]
 800ccfa:	18cc      	adds	r4, r1, r3
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f000 f85c 	bl	800cdba <__malloc_unlock>
 800cd02:	f104 000b 	add.w	r0, r4, #11
 800cd06:	1d23      	adds	r3, r4, #4
 800cd08:	f020 0007 	bic.w	r0, r0, #7
 800cd0c:	1ac3      	subs	r3, r0, r3
 800cd0e:	d0d3      	beq.n	800ccb8 <_malloc_r+0x20>
 800cd10:	425a      	negs	r2, r3
 800cd12:	50e2      	str	r2, [r4, r3]
 800cd14:	e7d0      	b.n	800ccb8 <_malloc_r+0x20>
 800cd16:	428c      	cmp	r4, r1
 800cd18:	684b      	ldr	r3, [r1, #4]
 800cd1a:	bf16      	itet	ne
 800cd1c:	6063      	strne	r3, [r4, #4]
 800cd1e:	6013      	streq	r3, [r2, #0]
 800cd20:	460c      	movne	r4, r1
 800cd22:	e7eb      	b.n	800ccfc <_malloc_r+0x64>
 800cd24:	460c      	mov	r4, r1
 800cd26:	6849      	ldr	r1, [r1, #4]
 800cd28:	e7cc      	b.n	800ccc4 <_malloc_r+0x2c>
 800cd2a:	1cc4      	adds	r4, r0, #3
 800cd2c:	f024 0403 	bic.w	r4, r4, #3
 800cd30:	42a0      	cmp	r0, r4
 800cd32:	d005      	beq.n	800cd40 <_malloc_r+0xa8>
 800cd34:	1a21      	subs	r1, r4, r0
 800cd36:	4630      	mov	r0, r6
 800cd38:	f000 f82e 	bl	800cd98 <_sbrk_r>
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d0cf      	beq.n	800cce0 <_malloc_r+0x48>
 800cd40:	6025      	str	r5, [r4, #0]
 800cd42:	e7db      	b.n	800ccfc <_malloc_r+0x64>
 800cd44:	200040f8 	.word	0x200040f8
 800cd48:	200040fc 	.word	0x200040fc

0800cd4c <_realloc_r>:
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	4607      	mov	r7, r0
 800cd50:	4614      	mov	r4, r2
 800cd52:	460e      	mov	r6, r1
 800cd54:	b921      	cbnz	r1, 800cd60 <_realloc_r+0x14>
 800cd56:	4611      	mov	r1, r2
 800cd58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd5c:	f7ff bf9c 	b.w	800cc98 <_malloc_r>
 800cd60:	b922      	cbnz	r2, 800cd6c <_realloc_r+0x20>
 800cd62:	f7ff ff4b 	bl	800cbfc <_free_r>
 800cd66:	4625      	mov	r5, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd6c:	f000 f826 	bl	800cdbc <_malloc_usable_size_r>
 800cd70:	42a0      	cmp	r0, r4
 800cd72:	d20f      	bcs.n	800cd94 <_realloc_r+0x48>
 800cd74:	4621      	mov	r1, r4
 800cd76:	4638      	mov	r0, r7
 800cd78:	f7ff ff8e 	bl	800cc98 <_malloc_r>
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d0f2      	beq.n	800cd68 <_realloc_r+0x1c>
 800cd82:	4631      	mov	r1, r6
 800cd84:	4622      	mov	r2, r4
 800cd86:	f7ff fbc3 	bl	800c510 <memcpy>
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	4638      	mov	r0, r7
 800cd8e:	f7ff ff35 	bl	800cbfc <_free_r>
 800cd92:	e7e9      	b.n	800cd68 <_realloc_r+0x1c>
 800cd94:	4635      	mov	r5, r6
 800cd96:	e7e7      	b.n	800cd68 <_realloc_r+0x1c>

0800cd98 <_sbrk_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4c06      	ldr	r4, [pc, #24]	; (800cdb4 <_sbrk_r+0x1c>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4605      	mov	r5, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	6023      	str	r3, [r4, #0]
 800cda4:	f7fe fb76 	bl	800b494 <_sbrk>
 800cda8:	1c43      	adds	r3, r0, #1
 800cdaa:	d102      	bne.n	800cdb2 <_sbrk_r+0x1a>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	b103      	cbz	r3, 800cdb2 <_sbrk_r+0x1a>
 800cdb0:	602b      	str	r3, [r5, #0]
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	200048ac 	.word	0x200048ac

0800cdb8 <__malloc_lock>:
 800cdb8:	4770      	bx	lr

0800cdba <__malloc_unlock>:
 800cdba:	4770      	bx	lr

0800cdbc <_malloc_usable_size_r>:
 800cdbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc0:	1f18      	subs	r0, r3, #4
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	bfbc      	itt	lt
 800cdc6:	580b      	ldrlt	r3, [r1, r0]
 800cdc8:	18c0      	addlt	r0, r0, r3
 800cdca:	4770      	bx	lr

0800cdcc <trunc>:
 800cdcc:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800cdd0:	ec5c bb10 	vmov	fp, ip, d0
 800cdd4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800cdd8:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800cddc:	2913      	cmp	r1, #19
 800cdde:	4664      	mov	r4, ip
 800cde0:	dc11      	bgt.n	800ce06 <trunc+0x3a>
 800cde2:	2900      	cmp	r1, #0
 800cde4:	bfa7      	ittee	ge
 800cde6:	4b15      	ldrge	r3, [pc, #84]	; (800ce3c <trunc+0x70>)
 800cde8:	fa43 f101 	asrge.w	r1, r3, r1
 800cdec:	2200      	movlt	r2, #0
 800cdee:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800cdf2:	bfa4      	itt	ge
 800cdf4:	2200      	movge	r2, #0
 800cdf6:	ea2c 0301 	bicge.w	r3, ip, r1
 800cdfa:	4693      	mov	fp, r2
 800cdfc:	469c      	mov	ip, r3
 800cdfe:	ec4c bb10 	vmov	d0, fp, ip
 800ce02:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800ce06:	2933      	cmp	r1, #51	; 0x33
 800ce08:	dd0d      	ble.n	800ce26 <trunc+0x5a>
 800ce0a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ce0e:	d1f6      	bne.n	800cdfe <trunc+0x32>
 800ce10:	4663      	mov	r3, ip
 800ce12:	ee10 2a10 	vmov	r2, s0
 800ce16:	ee10 0a10 	vmov	r0, s0
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	f7f3 fa3e 	bl	800029c <__adddf3>
 800ce20:	4683      	mov	fp, r0
 800ce22:	468c      	mov	ip, r1
 800ce24:	e7eb      	b.n	800cdfe <trunc+0x32>
 800ce26:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800ce2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce2e:	fa23 f000 	lsr.w	r0, r3, r0
 800ce32:	ea2b 0600 	bic.w	r6, fp, r0
 800ce36:	46b3      	mov	fp, r6
 800ce38:	46a4      	mov	ip, r4
 800ce3a:	e7e0      	b.n	800cdfe <trunc+0x32>
 800ce3c:	000fffff 	.word	0x000fffff

0800ce40 <_init>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr

0800ce4c <_fini>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	bf00      	nop
 800ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce52:	bc08      	pop	{r3}
 800ce54:	469e      	mov	lr, r3
 800ce56:	4770      	bx	lr
